{
    "title": "G. New Roads",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>There are <span class=\"tex-span\"><i>n</i></span> cities in Berland, each of them has a unique id\u00a0\u2014 an integer from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span>, the capital is the one with id <span class=\"tex-span\">1</span>. Now there is a serious problem in Berland with roads\u00a0\u2014 there are no roads.</p><p>That is why there was a decision to build <span class=\"tex-span\"><i>n</i>\u2009-\u20091</span> roads so that there will be exactly one simple path between each pair of cities.</p><p>In the construction plan <span class=\"tex-span\"><i>t</i></span> integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>t</i></sub></span> were stated, where <span class=\"tex-span\"><i>t</i></span> equals to the distance from the capital to the most distant city, concerning new roads. <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> equals the number of cities which should be at the distance <span class=\"tex-span\"><i>i</i></span> from the capital. The distance between two cities is the number of roads one has to pass on the way from one city to another. </p><p>Also, it was decided that among all the cities except the capital there should be exactly <span class=\"tex-span\"><i>k</i></span> cities with exactly one road going from each of them. Such cities are dead-ends and can't be economically attractive. In calculation of these cities the capital is not taken into consideration regardless of the number of roads from it. </p><p>Your task is to offer a plan of road's construction which satisfies all the described conditions or to inform that it is impossible.</p>",
    "inputSpecification": "<p>The first line contains three positive numbers <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>t</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">2\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20092\u00b710<sup class=\"upper-index\">5</sup></span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>t</i>,\u2009<i>k</i>\u2009&lt;\u2009<i>n</i></span>)\u00a0\u2014 the distance to the most distant city from the capital and the number of cities which should be dead-ends (the capital in this number is not taken into consideration). </p><p>The second line contains a sequence of <span class=\"tex-span\"><i>t</i></span> integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>t</i></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009&lt;\u2009<i>n</i></span>), the <span class=\"tex-span\"><i>i</i></span>-th number is the number of cities which should be at the distance <span class=\"tex-span\"><i>i</i></span> from the capital. It is guaranteed that the sum of all the values <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> equals <span class=\"tex-span\"><i>n</i>\u2009-\u20091</span>.</p>",
    "outputSpecification": "<p>If it is impossible to built roads which satisfy all conditions, print <span class=\"tex-font-style-tt\">-1</span>.</p><p>Otherwise, in the first line print one integer <span class=\"tex-span\"><i>n</i></span>\u00a0\u2014 the number of cities in Berland. In the each of the next <span class=\"tex-span\"><i>n</i>\u2009-\u20091</span> line print two integers\u00a0\u2014 the ids of cities that are connected by a road. Each road should be printed exactly once. You can print the roads and the cities connected by a road in any order.</p><p>If there are multiple answers, print any of them. Remember that the capital has id <span class=\"tex-span\">1</span>.</p>",
    "samples": [
        {
            "input": "7 3 3<br/>2 3 1<br/>",
            "output": "7<br/>1 3<br/>2 1<br/>2 6<br/>2 4<br/>7 4<br/>3 5<br/>"
        },
        {
            "input": "14 5 6<br/>4 4 2 2 1<br/>",
            "output": "14<br/>3 1<br/>1 4<br/>11 6<br/>1 2<br/>10 13<br/>6 10<br/>10 12<br/>14 12<br/>8 4<br/>5 1<br/>3 7<br/>2 6<br/>5 9<br/>"
        },
        {
            "input": "3 1 1<br/>2<br/>",
            "output": "-1<br/>"
        }
    ],
    "note": null,
    "contestId": 746,
    "index": "G",
    "name": "New Roads",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "graphs",
        "trees"
    ],
    "solvedCount": 1359
}