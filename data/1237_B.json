{
    "title": "B. Balanced Tunnel",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 512.0,
        "unit": "megabytes"
    },
    "statement": "<p>Consider a tunnel on a one-way road. During a particular day, $$$n$$$ cars numbered from $$$1$$$ to $$$n$$$ entered and exited the tunnel exactly once. All the cars passed through the tunnel at constant speeds.</p><p>A traffic enforcement camera is mounted at the tunnel entrance. Another traffic enforcement camera is mounted at the tunnel exit. <span class=\"tex-font-style-it\">Perfectly balanced</span>.</p><p>Thanks to the cameras, the order in which the cars entered and exited the tunnel is known. No two cars entered or exited at the same time.</p><p>Traffic regulations prohibit overtaking inside the tunnel. If car $$$i$$$ overtakes any other car $$$j$$$ inside the tunnel, car $$$i$$$ must be fined. However, each car can be fined at most once.</p><p>Formally, let's say that car $$$i$$$ <span class=\"tex-font-style-it\">definitely overtook</span> car $$$j$$$ if car $$$i$$$ entered the tunnel later than car $$$j$$$ and exited the tunnel earlier than car $$$j$$$. Then, car $$$i$$$ must be fined if and only if it definitely overtook at least one other car.</p><p>Find the number of cars that must be fined. </p>",
    "inputSpecification": "<p>The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$), denoting the number of cars.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le n$$$), denoting the ids of cars in order of entering the tunnel. All $$$a_i$$$ are pairwise distinct.</p><p>The third line contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\le b_i \\le n$$$), denoting the ids of cars in order of exiting the tunnel. All $$$b_i$$$ are pairwise distinct.</p>",
    "outputSpecification": "<p>Output the number of cars to be fined.</p>",
    "samples": [
        {
            "input": "\n5\n3 5 2 1 4\n4 3 2 5 1\n",
            "output": "\n2\n"
        },
        {
            "input": "\n7\n5 2 3 6 7 1 4\n2 3 6 7 1 4 5\n",
            "output": "\n6\n"
        },
        {
            "input": "\n2\n1 2\n1 2\n",
            "output": "\n0\n"
        }
    ],
    "note": "<p>The first example is depicted below:</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/e1822b5dd5a198ab8026b89e835364bdcd60099e.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p>Car $$$2$$$ definitely overtook car $$$5$$$, while car $$$4$$$ definitely overtook cars $$$1$$$, $$$2$$$, $$$3$$$ and $$$5$$$. Cars $$$2$$$ and $$$4$$$ must be fined.</p><p>In the second example car $$$5$$$ was definitely overtaken by all other cars.</p><p>In the third example no car must be fined.</p>",
    "contestId": 1237,
    "index": "B",
    "name": "Balanced Tunnel",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "sortings",
        "two pointers"
    ],
    "solvedCount": 15090
}