{
    "title": "E. Staircases",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a matrix, consisting of $$$n$$$ rows and $$$m$$$ columns. The rows are numbered top to bottom, the columns are numbered left to right.</p><p>Each cell of the matrix can be either free or locked.</p><p>Let's call a path in the matrix <span class=\"tex-font-style-it\">a staircase</span> if it: </p><ul> <li> starts and ends in the free cell; </li><li> visits only free cells; </li><li> has one of the two following structures: <ol> <li> the second cell is $$$1$$$ to the right from the first one, the third cell is $$$1$$$ to the bottom from the second one, the fourth cell is $$$1$$$ to the right from the third one, and so on; </li><li> the second cell is $$$1$$$ to the bottom from the first one, the third cell is $$$1$$$ to the right from the second one, the fourth cell is $$$1$$$ to the bottom from the third one, and so on. </li></ol> </li></ul><p>In particular, a path, consisting of a single cell, is considered to be a staircase.</p><p>Here are some examples of staircases:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/d8ce1e156e62e77aa2e4f5006e073105f0d8e36f.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>Initially all the cells of the matrix are <span class=\"tex-font-style-bf\">free</span>.</p><p>You have to process $$$q$$$ queries, each of them flips the state of a single cell. So, if a cell is currently free, it makes it locked, and if a cell is currently locked, it makes it free.</p><p>Print the number of different staircases after each query. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.</p>",
    "inputSpecification": "<p>The first line contains three integers $$$n$$$, $$$m$$$ and $$$q$$$ ($$$1 \\le n, m \\le 1000$$$; $$$1 \\le q \\le 10^4$$$)\u00a0\u2014 the sizes of the matrix and the number of queries.</p><p>Each of the next $$$q$$$ lines contains two integers $$$x$$$ and $$$y$$$ ($$$1 \\le x \\le n$$$; $$$1 \\le y \\le m$$$)\u00a0\u2014 the description of each query.</p>",
    "outputSpecification": "<p>Print $$$q$$$ integers\u00a0\u2014 the $$$i$$$-th value should be equal to the number of different staircases after $$$i$$$ queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.</p>",
    "samples": [
        {
            "input": "\n2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 1\n1 1\n",
            "output": "\n5\n10\n5\n2\n5\n3\n1\n0\n"
        },
        {
            "input": "\n3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n",
            "output": "\n49\n35\n24\n29\n49\n39\n31\n23\n29\n27\n"
        },
        {
            "input": "\n1000 1000 2\n239 634\n239 634\n",
            "output": "\n1332632508\n1333333000\n"
        }
    ],
    "note": null,
    "contestId": 1598,
    "index": "E",
    "name": "Staircases",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "combinatorics",
        "data structures",
        "dfs and similar",
        "dp",
        "implementation",
        "math"
    ],
    "solvedCount": 2253
}