{
    "title": "B. Blueprint for Seating",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 1024.0,
        "unit": "megabytes"
    },
    "statement": "<p>An aircraft manufacturing company wants to optimize their products for passenger airlines. The company's latest research shows that most of the delays happen because of slow boarding.</p><p>Most of the medium-sized aircraft are designed with 3-3 seat layout, meaning each row has 6 seats: 3 seats on the left side, a single aisle, and 3 seats on the right side. At each of the left and right sides there is a window seat, a middle seat, and an aisle seat. A passenger that boards an aircraft assigned to an aisle seat takes significantly less time than a passenger assigned to a window seat even when there is no one else in the aircraft.</p><p>The company decided to compute an <span class=\"tex-font-style-underline\">inconvenience</span> of a layout as the total sum of distances from each of the seats of a single row to the closest aisle. The distance from a seat to an aisle is the number of seats between them. For a 3-3 layout, a window seat has a distance of 2, a middle seat\u00a0\u2014 1, and an aisle seat\u00a0\u2014 0. The inconvenience of a 3-3 layout is $$$(2+1+0)+(0+1+2)=6$$$. The inconvenience of a 3-5-3 layout is $$$(2+1+0)+(0+1+2+1+0)+(0+1+2)=10$$$.</p><p>Formally, a layout is a sequence of positive integers $$$a_1, a_2, \\ldots, a_{k+1}$$$\u00a0\u2014 group $$$i$$$ having $$$a_i$$$ seats, with $$$k$$$ aisles between groups, the $$$i$$$-th aisle being between groups $$$i$$$ and $$$i+1$$$. This means that in a layout each aisle must always be between two seats, so no aisle can be next to a window, and no two aisles can be next to each other.</p><p>The company decided to design a layout with a row of $$$n$$$ seats, $$$k$$$ aisles and having the minimum inconvenience possible. Help them find the minimum inconvenience among all layouts of $$$n$$$ seats and $$$k$$$ aisles, and count the number of such layouts modulo $$$998\\,244\\,353$$$.</p>",
    "inputSpecification": "<p>The first line contains an integer $$$t$$$\u00a0\u2014 the number of test cases you need to solve ($$$1 \\le t \\le 10^5$$$).</p><p>For each of the test cases, there is a single line containing $$$n$$$ and $$$k$$$\u00a0\u2014 the number of seats, and the number of aisles in a row ($$$2 \\le n \\le 10^9$$$; $$$1 \\le k \\le 10^5$$$; $$$k &lt; n$$$).</p><p>The total sum of $$$k$$$ in all $$$t$$$ given test cases does not exceed $$$10^6$$$.</p>",
    "outputSpecification": "<p>For each test case print two integers\u00a0\u2014 the minimum inconvenience among all possible layouts, and the number of layouts with the minimum inconvenience modulo $$$998\\,244\\,353$$$.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">8</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">5 2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">6 1</div><div class=\"test-example-line test-example-line-even test-example-line-6\">6 2</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">1000000000 1</div><div class=\"test-example-line test-example-line-even test-example-line-8\">9 2</div>",
            "output": "\n2 1\n0 1\n0 1\n1 3\n6 1\n2 4\n249999999500000000 1\n6 3\n"
        }
    ],
    "note": "<p>In the last test case of <span class=\"tex-font-style-tt\">9 2</span> the possible layouts with the minimum inconvenience of 6 are 3-4-2, 2-4-3, and 2-5-2.</p>",
    "contestId": 1912,
    "index": "B",
    "name": "Blueprint for Seating",
    "type": "PROGRAMMING",
    "tags": [
        "combinatorics",
        "divide and conquer",
        "math"
    ],
    "solvedCount": 949
}