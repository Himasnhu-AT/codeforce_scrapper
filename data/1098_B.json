{
    "title": "B. Nice table",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given an $$$n \\times m$$$ table, consisting of characters \u00ab<span class=\"tex-font-style-tt\">A</span>\u00bb, \u00ab<span class=\"tex-font-style-tt\">G</span>\u00bb, \u00ab<span class=\"tex-font-style-tt\">C</span>\u00bb, \u00ab<span class=\"tex-font-style-tt\">T</span>\u00bb. Let's call a table <span class=\"tex-font-style-it\">nice</span>, if every $$$2 \\times 2$$$ square contains all four distinct characters. Your task is to find a nice table (also consisting of \u00ab<span class=\"tex-font-style-tt\">A</span>\u00bb, \u00ab<span class=\"tex-font-style-tt\">G</span>\u00bb, \u00ab<span class=\"tex-font-style-tt\">C</span>\u00bb, \u00ab<span class=\"tex-font-style-tt\">T</span>\u00bb), that differs from the given table in the minimum number of characters.</p>",
    "inputSpecification": "<p>First line contains two positive integers $$$n$$$ and $$$m$$$\u00a0\u2014 number of rows and columns in the table you are given ($$$2 \\leq n, m, n \\times m \\leq 300\\,000$$$). Then, $$$n$$$ lines describing the table follow. Each line contains exactly $$$m$$$ characters \u00ab<span class=\"tex-font-style-tt\">A</span>\u00bb, \u00ab<span class=\"tex-font-style-tt\">G</span>\u00bb, \u00ab<span class=\"tex-font-style-tt\">C</span>\u00bb, \u00ab<span class=\"tex-font-style-tt\">T</span>\u00bb.</p>",
    "outputSpecification": "<p>Output $$$n$$$ lines, $$$m$$$ characters each. This table must be nice and differ from the input table in the minimum number of characters.</p>",
    "samples": [
        {
            "input": "\n2 2\nAG\nCT\n",
            "output": "\nAG\nCT\n"
        },
        {
            "input": "\n3 5\nAGCAG\nAGCAG\nAGCAG\n",
            "output": "\nTGCAT\nCATGC\nTGCAT\n"
        }
    ],
    "note": "<p>In the first sample, the table is already nice. In the second sample, you can change 9 elements to make the table nice.</p>",
    "contestId": 1098,
    "index": "B",
    "name": "Nice table",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "solvedCount": 1509
}