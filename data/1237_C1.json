{
    "title": "C1. Balanced Removals (Easier)",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 512.0,
        "unit": "megabytes"
    },
    "statement": "<p><span class=\"tex-font-style-it\">This is an easier version of the problem. In this version, $$$n \\le 2000$$$.</span></p><p>There are $$$n$$$ distinct points in three-dimensional space numbered from $$$1$$$ to $$$n$$$. The $$$i$$$-th point has coordinates $$$(x_i, y_i, z_i)$$$. The number of points $$$n$$$ is even.</p><p>You'd like to remove all $$$n$$$ points using a sequence of $$$\\frac{n}{2}$$$ snaps. In one snap, you can remove any two points $$$a$$$ and $$$b$$$ that have not been removed yet and form a <span class=\"tex-font-style-it\">perfectly balanced</span> pair. A pair of points $$$a$$$ and $$$b$$$ is perfectly balanced if no other point $$$c$$$ (that has not been removed yet) lies within the axis-aligned minimum bounding box of points $$$a$$$ and $$$b$$$.</p><p>Formally, point $$$c$$$ lies within the axis-aligned minimum bounding box of points $$$a$$$ and $$$b$$$ if and only if $$$\\min(x_a, x_b) \\le x_c \\le \\max(x_a, x_b)$$$, $$$\\min(y_a, y_b) \\le y_c \\le \\max(y_a, y_b)$$$, and $$$\\min(z_a, z_b) \\le z_c \\le \\max(z_a, z_b)$$$. Note that the bounding box might be degenerate. </p><p>Find a way to remove all points in $$$\\frac{n}{2}$$$ snaps.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 2000$$$; $$$n$$$ is even), denoting the number of points.</p><p>Each of the next $$$n$$$ lines contains three integers $$$x_i$$$, $$$y_i$$$, $$$z_i$$$ ($$$-10^8 \\le x_i, y_i, z_i \\le 10^8$$$), denoting the coordinates of the $$$i$$$-th point.</p><p>No two points coincide.</p>",
    "outputSpecification": "<p>Output $$$\\frac{n}{2}$$$ pairs of integers $$$a_i, b_i$$$ ($$$1 \\le a_i, b_i \\le n$$$), denoting the indices of points removed on snap $$$i$$$. Every integer between $$$1$$$ and $$$n$$$, inclusive, must appear in your output exactly once.</p><p>We can show that it is always possible to remove all points. If there are many solutions, output any of them.</p>",
    "samples": [
        {
            "input": "\n6\n3 1 0\n0 3 0\n2 2 0\n1 0 0\n1 3 0\n0 1 0\n",
            "output": "\n3 6\n5 1\n2 4\n"
        },
        {
            "input": "\n8\n0 1 1\n1 0 1\n1 1 0\n1 1 1\n2 2 2\n3 2 2\n2 3 2\n2 2 3\n",
            "output": "\n4 5\n1 6\n2 7\n3 8\n"
        }
    ],
    "note": "<p>In the first example, here is what points and their corresponding bounding boxes look like (drawn in two dimensions for simplicity, as all points lie on $$$z = 0$$$ plane). Note that order of removing matters: for example, points $$$5$$$ and $$$1$$$ don't form a perfectly balanced pair initially, but they do after point $$$3$$$ is removed. </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/b3860a7bd1c5d3029dbae870c7f603b62ea96e5f.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center>",
    "contestId": 1237,
    "index": "C1",
    "name": "Balanced Removals (Easier)",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "geometry",
        "greedy"
    ],
    "solvedCount": 6027
}