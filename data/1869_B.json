{
    "title": "B. 2D Traveling",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Piggy lives on an infinite plane with the Cartesian coordinate system on it.</p><p>There are $$$n$$$ cities on the plane, numbered from $$$1$$$ to $$$n$$$, and the first $$$k$$$ cities are defined as <span class=\"tex-font-style-it\">major cities</span>. The coordinates of the $$$i$$$-th city are $$$(x_i,y_i)$$$.</p><p>Piggy, as a well-experienced traveller, wants to have a relaxing trip after Zhongkao examination. Currently, he is in city $$$a$$$, and he wants to travel to city $$$b$$$ by air. You can fly between any two cities, and you can visit several cities in any order while travelling, but the final destination must be city $$$b$$$.</p><p>Because of active trade between major cities, it's possible to travel by plane between them for free. Formally, the price of an air ticket $$$f(i,j)$$$ between two cities $$$i$$$ and $$$j$$$ is defined as follows:</p><p>$$$$$$ f(i,j)= \\begin{cases} 0, &amp; \\text{if cities }i \\text{ and }j \\text{ are both major cities} \\\\ |x_i-x_j|+|y_i-y_j|, &amp; \\text{otherwise} \\end{cases} $$$$$$</p><p>Piggy doesn't want to save time, but he wants to save money. So you need to tell him the <span class=\"tex-font-style-bf\">minimum</span> value of the total cost of all air tickets if he can take any number of flights.</p>",
    "inputSpecification": "<p>The first line of input contains a single integer $$$t$$$ ($$$1\\le t\\le 10^4$$$) \u2014 the number of test cases. The description of test cases follows.</p><p>The first line of each test case contains four integers $$$n$$$, $$$k$$$, $$$a$$$ and $$$b$$$ ($$$2\\le n\\le 2\\cdot 10^5$$$, $$$0\\le k\\le n$$$, $$$1\\le a,b\\le n$$$, $$$a\\ne b$$$) \u2014 the number of cities, the number of major cities and the numbers of the starting and the ending cities.</p><p>Then $$$n$$$ lines follow, the $$$i$$$-th line contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$-10^9\\le x_i,y_i\\le 10^9$$$) \u2014 the coordinates of the $$$i$$$-th city. The first $$$k$$$ lines describe major cities. It is guaranteed that all coordinates are pairwise distinct.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, print a single integer \u2014 the minimum value of the total price of all air tickets.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">6 2 3 5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">0 0</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 -2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">-2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">-1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 -2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">-3 -3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 0 1 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">-1000000000 -1000000000</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1000000000 1000000000</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">7 5 4 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">154 147</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">-154 -147</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">123 456</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">20 23</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">43 20</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">998 244</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">353 100</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3 1 3 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">0 10</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 20</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 30</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4 3 2 4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">0 0</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">-100 100</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">-1 -1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">-1 0</div>",
            "output": "\n4\n4000000000\n0\n22\n1\n"
        }
    ],
    "note": "<p>In the first test case:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/98745192b645db8f3ec3d4e4395e1d16b1a41011.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"454px\"/> <span class=\"tex-font-style-it\">The major cities are marked red.</span> </center><p>The optimal way to choose the flights is: $$$3\\rightarrow 1 \\rightarrow 2 \\rightarrow 5$$$, which will cost $$$3+0+1=4$$$. Note that the flight $$$1\\rightarrow 2$$$ costs $$$0$$$, because both city $$$1$$$ and $$$2$$$ are major cities.</p><p>In the second test case, since there are only $$$2$$$ cities, the only way is to take a flight from city $$$1$$$ to $$$2$$$.</p><p>In the third test case, since city $$$2$$$ and $$$4$$$ are both major cities, Piggy can directly take a flight from city $$$2$$$ to $$$4$$$, which costs $$$0$$$.</p><p>In the fourth test case, Piggy can choose to take the following flights: $$$3\\rightarrow 2\\rightarrow 1$$$, and the cost is $$$11+11=22$$$.</p>",
    "contestId": 1869,
    "index": "B",
    "name": "2D Traveling",
    "type": "PROGRAMMING",
    "tags": [
        "geometry",
        "math",
        "shortest paths",
        "sortings"
    ],
    "solvedCount": 14843
}