{
    "title": "E. Brackets in Implications",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Implication is a function of two logical arguments, its value is false if and only if the value of the first argument is true and the value of the second argument is false. </p><p>Implication is written by using character '<span class=\"tex-font-style-tt\"><img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/70a0795f45d32287dba0eb83fc4a3f470c6e5537.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></span>', and the arguments and the result of the implication are written as '<span class=\"tex-font-style-tt\">0</span>' (<span class=\"tex-span\"><i>false</i></span>) and '<span class=\"tex-font-style-tt\">1</span>' (<span class=\"tex-span\"><i>true</i></span>). According to the definition of the implication: </p><center><p><img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/5e89bebcd120e22a78239691c68ebf276013ef17.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </p><p><img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/af68c40058d777554c00a17c9b5595940af39c06.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p><img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/7251f8f04d377c9ab47f3d0e3a9f228b43e58504.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </p><p><img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/b2ab3ebfd5399daf3f3a0ae3fb89fe88e057c9d0.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p></center><p>When a logical expression contains multiple implications, then when there are no brackets, it will be calculated from left to fight. For example,</p><p><img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/c37e0d808ad6d8d62f84eebefa9c068efa4bfaf9.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>. </p><p>When there are brackets, we first calculate the expression in brackets. For example,</p><p><img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/64fe2c9ef6920356045895e641e988348c80ed39.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p><p>For the given logical expression <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/c5d321568dee0b4f8cec503d24bd23b7ccf0dee2.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> determine if it is possible to place there brackets so that the value of a logical expression is false. If it is possible, your task is to find such an arrangement of brackets.</p>",
    "inputSpecification": "<p>The first line contains integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u2009100\u2009000</span>) \u2014 the number of arguments in a logical expression.</p><p>The second line contains <span class=\"tex-span\"><i>n</i></span> numbers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> (<img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/7bcdd7440cc300269a3395fa037d5af6351c3221.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>), which means the values of arguments in the expression in the order they occur.</p>",
    "outputSpecification": "<p>Print \"<span class=\"tex-font-style-tt\">NO</span>\" (without the quotes), if it is impossible to place brackets in the expression so that its value was equal to 0.</p><p>Otherwise, print \"<span class=\"tex-font-style-tt\">YES</span>\" in the first line and the logical expression with the required arrangement of brackets in the second line.</p><p>The expression should only contain characters '<span class=\"tex-font-style-tt\">0</span>', '<span class=\"tex-font-style-tt\">1</span>', '<span class=\"tex-font-style-tt\">-</span>' (character with ASCII code 45), '<span class=\"tex-font-style-tt\">&gt;</span>' (character with ASCII code 62), '<span class=\"tex-font-style-tt\">(</span>' and '<span class=\"tex-font-style-tt\">)</span>'. Characters '<span class=\"tex-font-style-tt\">-</span>' and '<span class=\"tex-font-style-tt\">&gt;</span>' can occur in an expression only paired like that: (\"<span class=\"tex-font-style-tt\">-&gt;</span>\") and represent implication. The total number of logical arguments (i.e. digits '<span class=\"tex-font-style-tt\">0</span>' and '<span class=\"tex-font-style-tt\">1</span>') in the expression must be equal to <span class=\"tex-span\"><i>n</i></span>. The order in which the digits follow in the expression from left to right must coincide with <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span>.</p><p>The expression should be <span class=\"tex-font-style-it\">correct</span>. More formally, a <span class=\"tex-font-style-it\">correct</span> expression is determined as follows:</p><ul> <li> Expressions \"<span class=\"tex-span\">0</span>\", \"<span class=\"tex-span\">1</span>\" (without the quotes) are correct. </li><li> If <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\">1</sub></span>, <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\">2</sub></span> are correct, then <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\">1</sub></span><span class=\"tex-font-style-tt\">-&gt;</span><span class=\"tex-span\"><i>v</i><sub class=\"lower-index\">2</sub></span> is a correct expression. </li><li> If <span class=\"tex-span\"><i>v</i></span> is a correct expression, then <span class=\"tex-span\">(<i>v</i>)</span> is a correct expression. </li></ul><p>The total number of characters in the resulting expression mustn't exceed <span class=\"tex-span\">10<sup class=\"upper-index\">6</sup></span>.</p><p>If there are multiple possible answers, you are allowed to print any of them.</p>",
    "samples": [
        {
            "input": "4<br/>0 1 1 0<br/>",
            "output": "YES<br/>(((0)->1)->(1->0))<br/>"
        },
        {
            "input": "2<br/>1 1<br/>",
            "output": "NO<br/>"
        },
        {
            "input": "1<br/>0<br/>",
            "output": "YES<br/>0<br/>"
        }
    ],
    "note": null,
    "contestId": 550,
    "index": "E",
    "name": "Brackets in Implications",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "solvedCount": 1379
}