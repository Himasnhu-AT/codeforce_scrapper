{
    "title": "A. Constructive Problem",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>As you know, any problem that does not require the use of complex data structures is considered constructive. You are offered to solve one of such problems.</p><p>You are given an array $$$a$$$ of $$$n$$$ non-negative integers. You are allowed to perform the following operation <span class=\"tex-font-style-bf\">exactly once</span>: choose some non-empty subsegment $$$a_l, a_{l+1}, \\ldots, a_r$$$ of the array $$$a$$$ and a non-negative integer $$$k$$$, and assign value $$$k$$$ to all elements of the array on the chosen subsegment.</p><p>The task is to find out whether $$$\\operatorname{MEX}(a)$$$ can be increased by exactly one by performing such an operation. In other words, if before the operation $$$\\operatorname{MEX}(a) = m$$$ held, then after the operation it must hold that $$$\\operatorname{MEX}(a) = m + 1$$$.</p><p>Recall that $$$\\operatorname{MEX}$$$ of a set of integers $$$c_1, c_2, \\ldots, c_k$$$ is defined as the smallest non-negative integer $$$x$$$ which does not occur in the set $$$c$$$.</p>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 50\\,000$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 200\\,000$$$)\u00a0\u2014 the number of elements of array $$$a$$$.</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 10^9$$$)\u00a0\u2014 elements of array $$$a$$$.</p><p>It is guaranteed that the sum $$$n$$$ over all test cases does not exceed $$$200\\,000$$$.</p>",
    "outputSpecification": "<p>For each test case, print \"<span class=\"tex-font-style-tt\">Yes</span>\" if you can increase $$$\\operatorname{MEX}(a)$$$ by exactly one by performing the operation from the statement exactly once, otherwise print \"<span class=\"tex-font-style-tt\">No</span>\".</p><p>You can output the answer in any case (upper or lower). For example, the strings \"<span class=\"tex-font-style-tt\">yEs</span>\", \"<span class=\"tex-font-style-tt\">yes</span>\", \"<span class=\"tex-font-style-tt\">Yes</span>\", and \"<span class=\"tex-font-style-tt\">YES</span>\" will be recognized as positive responses.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">0 2 2 0</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 2 0 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">0</div>",
            "output": "\nYes\nYes\nNo\nNo\n"
        }
    ],
    "note": "<p>In the first test case, $$$\\operatorname{MEX}(a) = 0$$$. If you set all elements of $$$a$$$ to $$$0$$$, then $$$\\operatorname{MEX}$$$ of the resulting array will be $$$1$$$, and thus will increase by one.</p><p>In the second test case, $$$\\operatorname{MEX}(a) = 1$$$. If we assign a value of $$$1$$$ to the elements of $$$a$$$ on a subsegment from $$$2$$$ to $$$3$$$, we get an array $$$[0, 1, 1, 0]$$$ for which $$$\\operatorname{MEX}$$$ is $$$2$$$, and thus is increased by one compared to the original.</p><p>It can be shown that in the third and fourth test cases it is impossible to perform an operation so that the value of $$$\\operatorname{MEX}(a)$$$ increases by exactly one.</p>",
    "contestId": 1819,
    "index": "A",
    "name": "Constructive Problem",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "greedy"
    ],
    "solvedCount": 12200
}