{
    "title": "F. Blocking Chips",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a tree, consisting of $$$n$$$ vertices. There are $$$k$$$ chips, placed in vertices $$$a_1, a_2, \\dots, a_k$$$. All $$$a_i$$$ are distinct. Vertices $$$a_1, a_2, \\dots, a_k$$$ are colored black initially. The remaining vertices are white.</p><p>You are going to play a game where you perform some moves (possibly, zero). On the $$$i$$$-th move ($$$1$$$-indexed) you are going to move the $$$((i - 1) \\bmod k + 1)$$$-st chip from its current vertex to an adjacent <span class=\"tex-font-style-bf\">white</span> vertex and color that vertex <span class=\"tex-font-style-bf\">black</span>. So, if $$$k=3$$$, you move chip $$$1$$$ on move $$$1$$$, chip $$$2$$$ on move $$$2$$$, chip $$$3$$$ on move $$$3$$$, chip $$$1$$$ on move $$$4$$$, chip $$$2$$$ on move $$$5$$$ and so on. If there is no adjacent white vertex, then the game ends.</p><p>What's the maximum number of moves you can perform?</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of testcases.</p><p>The first line of each testcase contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the number of vertices of the tree.</p><p>Each of the next $$$n - 1$$$ lines contains two integers $$$v$$$ and $$$u$$$ ($$$1 \\le v, u \\le n$$$)\u00a0\u2014 the descriptions of the edges. The given edges form a tree.</p><p>The next line contains a single integer $$$k$$$ ($$$1 \\le k \\le n$$$)\u00a0\u2014 the number of chips.</p><p>The next line contains $$$k$$$ integers $$$a_1, a_2, \\dots, a_k$$$ ($$$1 \\le a_i \\le n$$$)\u00a0\u2014 the vertices with the chips. All $$$a_i$$$ are distinct.</p><p>The sum of $$$n$$$ over all testcases doesn't exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each testcase, print a single integer\u00a0\u2014 the maximum number of moves you can perform.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">6</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3 6</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 4 6</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1</div>",
            "output": "\n2\n0\n1\n2\n0\n"
        }
    ],
    "note": null,
    "contestId": 1795,
    "index": "F",
    "name": "Blocking Chips",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "constructive algorithms",
        "dfs and similar",
        "greedy",
        "trees"
    ],
    "solvedCount": 1072
}