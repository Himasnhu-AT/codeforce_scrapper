{
    "title": "C. Crazy Diamond",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a permutation $$$p$$$ of integers from $$$1$$$ to $$$n$$$, where $$$n$$$ is an even number. </p><p>Your goal is to sort the permutation. To do so, you can perform zero or more operations of the following type: </p><ul> <li> take two indices $$$i$$$ and $$$j$$$ such that $$$2 \\cdot |i - j| \\geq n$$$ and swap $$$p_i$$$ and $$$p_j$$$. </li></ul><p>There is <span class=\"tex-font-style-bf\">no need to minimize</span> the number of operations, however you should use no more than $$$5 \\cdot n$$$ operations. One can show that it is always possible to do that.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 3 \\cdot 10^5$$$, $$$n$$$ is even)\u00a0\u2014 the length of the permutation. </p><p>The second line contains $$$n$$$ distinct integers $$$p_1, p_2, \\ldots, p_n$$$ ($$$1 \\le p_i \\le n$$$)\u00a0\u2014 the given permutation.</p>",
    "outputSpecification": "<p>On the first line print $$$m$$$ ($$$0 \\le m \\le 5 \\cdot n$$$)\u00a0\u2014 the number of swaps to perform.</p><p>Each of the following $$$m$$$ lines should contain integers $$$a_i, b_i$$$ ($$$1 \\le a_i, b_i \\le n$$$, $$$|a_i - b_i| \\ge \\frac{n}{2}$$$)\u00a0\u2014 the indices that should be swapped in the corresponding swap.</p><p>Note that there is no need to minimize the number of operations. We can show that an answer always exists.</p>",
    "samples": [
        {
            "input": "\n2\n2 1\n",
            "output": "\n1\n1 2"
        },
        {
            "input": "\n4\n3 4 1 2\n",
            "output": "\n4\n1 4\n1 4\n1 3\n2 4\n"
        },
        {
            "input": "\n6\n2 5 3 1 4 6\n",
            "output": "\n3\n1 5\n2 5\n1 4\n"
        }
    ],
    "note": "<p>In the first example, when one swap elements on positions $$$1$$$ and $$$2$$$, the array becomes sorted.</p><p>In the second example, pay attention that there is no need to minimize number of swaps.</p><p>In the third example, after swapping elements on positions $$$1$$$ and $$$5$$$ the array becomes: $$$[4, 5, 3, 1, 2, 6]$$$. After swapping elements on positions $$$2$$$ and $$$5$$$ the array becomes $$$[4, 2, 3, 1, 5, 6]$$$ and finally after swapping elements on positions $$$1$$$ and $$$4$$$ the array becomes sorted: $$$[1, 2, 3, 4, 5, 6]$$$.</p>",
    "contestId": 1148,
    "index": "C",
    "name": "Crazy Diamond",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "sortings"
    ],
    "solvedCount": 5233
}