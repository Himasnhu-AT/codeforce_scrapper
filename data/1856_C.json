{
    "title": "C. To Become Max",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given an array of integers $$$a$$$ of length $$$n$$$.</p><p>In one operation you: </p><ul> <li> Choose an index $$$i$$$ such that $$$1 \\le i \\le n - 1$$$ and $$$a_i \\le a_{i + 1}$$$. </li><li> Increase $$$a_i$$$ by $$$1$$$. </li></ul><p>Find the maximum possible value of $$$\\max(a_1, a_2, \\ldots a_n)$$$ that you can get after performing this operation at most $$$k$$$ times.</p>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line of input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 1000$$$, $$$1 \\le k \\le 10^{8}$$$)\u00a0\u2014 the length of the array $$$a$$$ and the maximum number of operations that can be performed.</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$1 \\le a_i \\le 10^{8}$$$)\u00a0\u2014 the elements of the array $$$a$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$1000$$$.</p>",
    "outputSpecification": "<p>For each test case output a single integer\u00a0\u2014 the maximum possible maximum of the array after performing at most $$$k$$$ operations.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 6</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 3 4 5 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 13</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 1 3 179</div><div class=\"test-example-line test-example-line-even test-example-line-4\">5 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4 3 2 2 2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5 6</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">6 5 4 1 5</div><div class=\"test-example-line test-example-line-even test-example-line-6\">2 17</div><div class=\"test-example-line test-example-line-even test-example-line-6\">3 5</div>",
            "output": "\n4\n7\n179\n5\n7\n6\n"
        }
    ],
    "note": "<p>In the first test case, one possible optimal sequence of operations is: $$$[\\color{red}{1}, 3, 3] \\rightarrow [2, \\color{red}{3}, 3] \\rightarrow [\\color{red}{2}, 4, 3] \\rightarrow [\\color{red}{3}, 4, 3] \\rightarrow [4, 4, 3]$$$.</p><p>In the second test case, one possible optimal sequence of operations is: $$$[1, \\color{red}{3}, 4, 5, 1] \\rightarrow [1, \\color{red}{4}, 4, 5, 1] \\rightarrow [1, 5, \\color{red}{4}, 5, 1] \\rightarrow [1, 5, \\color{red}{5}, 5, 1] \\rightarrow [1, \\color{red}{5}, 6, 5, 1] \\rightarrow [1, \\color{red}{6}, 6, 5, 1] \\rightarrow [1, 7, 6, 5, 1]$$$.</p>",
    "contestId": 1856,
    "index": "C",
    "name": "To Become Max",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "brute force",
        "data structures",
        "dp"
    ],
    "solvedCount": 11319
}