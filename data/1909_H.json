{
    "title": "H. Parallel Swaps Sort",
    "timeLimit": {
        "value": 7.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 1024.0,
        "unit": "megabytes"
    },
    "statement": "<div class=\"epigraph\"><div class=\"epigraph-text\"><span class=\"tex-font-style-it\"><a href=\"https://soundcloud.com/penehlopeexd/keygen-8-dubmood\">Dubmood - Keygen 8</a></span></div><div class=\"epigraph-source\">\u2800</div></div><p>You are given a permutation $$$p_1, p_2, \\dots, p_n$$$ of $$$[1, 2, \\dots, n]$$$. You can perform the following operation some (possibly $$$0$$$) times:</p><ul> <li> choose a subarray $$$[l, r]$$$ of even length; </li><li> swap $$$a_l$$$, $$$a_{l+1}$$$; </li><li> swap $$$a_{l+2}$$$, $$$a_{l+3}$$$ (if $$$l+3 \\leq r$$$); </li><li> $$$\\dots$$$ </li><li> swap $$$a_{r-1}$$$, $$$a_r$$$. </li></ul><p>Sort the permutation in at most $$$10^6$$$ operations. You do not need to minimize the number of operations.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 3 \\cdot 10^5$$$)\u00a0\u2014 the length of the permutation.</p><p>The second line contains $$$n$$$ integers $$$p_1, p_2, \\ldots, p_n$$$ ($$$1 \\le p_i \\le n$$$, the $$$p_i$$$ are distinct)\u00a0\u2014 the permutation before performing the operations.</p>",
    "outputSpecification": "<p>Output your operations in the following format.</p><p>The first line should contain an integer $$$k$$$ ($$$0 \\le k \\le 10^6$$$)\u00a0\u2014 the number of operations.</p><p>The next $$$k$$$ lines represent the $$$k$$$ operations in order. Each of these $$$k$$$ lines should contain two integers $$$l$$$ and $$$r$$$ ($$$1 \\leq l &lt; r \\leq n$$$, $$$r-l+1$$$ must be even)\u00a0\u2014 the corresponding operation consists in choosing the subarray $$$[l, r]$$$ and swapping its elements according to the problem statement.</p><p>After all the operations, $$$a_i = i$$$ must be true for each $$$i$$$ ($$$1 \\leq i \\leq n$$$).</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-even test-example-line-0\">2 5 4 1 3</div>",
            "output": "\n5\n1 4\n1 2\n2 5\n1 4\n4 5\n"
        },
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">9</div><div class=\"test-example-line test-example-line-even test-example-line-0\">1 2 3 4 5 6 7 8 9</div>",
            "output": "\n0\n"
        },
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">10</div><div class=\"test-example-line test-example-line-even test-example-line-0\">6 4 2 3 8 10 9 1 5 7</div>",
            "output": "\n15\n1 8\n6 9\n1 8\n3 10\n1 10\n1 10\n1 6\n6 9\n6 9\n2 7\n9 10\n5 10\n1 6\n2 9\n1 10\n"
        }
    ],
    "note": "<p>In the first test: </p><ul> <li> At the beginning, $$$p = [2, 5, 4, 1, 3]$$$. </li><li> In the first operation, you can choose $$$[l, r] = [1, 4]$$$. Then, $$$(a_1, a_2)$$$ are swapped and $$$(a_3, a_4)$$$ are swapped. The new permutation is $$$p = [5, 2, 1, 4, 3]$$$. </li><li> In the second operation, you can choose $$$[l, r] = [1, 2]$$$. Then, $$$(a_1, a_2)$$$ are swapped. The new permutation is $$$p = [2, 5, 1, 4, 3]$$$. </li><li> In the third operation, you can choose $$$[l, r] = [2, 5]$$$. Then, $$$(a_2, a_3)$$$ are swapped and $$$(a_4, a_5)$$$ are swapped. The new permutation is $$$p = [2, 1, 5, 3, 4]$$$. </li><li> In the fourth operation, you can choose $$$[l, r] = [1, 4]$$$. Then, $$$(a_1, a_2)$$$ are swapped and $$$(a_3, a_4)$$$ are swapped. The new permutation is $$$p = [1, 2, 3, 5, 4]$$$. </li><li> In the fifth operation, you can choose $$$[l, r] = [4, 5]$$$. Then, $$$(a_4, a_5)$$$ are swapped. The new permutation is $$$p = [1, 2, 3, 4, 5]$$$, which is sorted. </li></ul><p>In the second test, the permutation is already sorted, so you do not need to perform any operation.</p>",
    "contestId": 1909,
    "index": "H",
    "name": "Parallel Swaps Sort",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "data structures"
    ],
    "solvedCount": 63
}