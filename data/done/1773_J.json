{
    "title": "J. Jumbled Trees",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 1024.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given an undirected connected graph with $$$n$$$ vertices and $$$m$$$ edges. Each edge has an associated counter, initially equal to $$$0$$$. In one operation, you can choose an arbitrary spanning tree and add any value $$$v$$$ to all edges of this spanning tree. </p><p>Determine if it's possible to make every counter equal to its target value $$$x_i$$$ modulo prime $$$p$$$, and provide a sequence of operations that achieves it.</p>",
    "inputSpecification": "<p>The first line contains three integers $$$n$$$, $$$m$$$, and $$$p$$$\u00a0\u2014 the number of vertices, the number of edges, and the prime modulus ($$$1 \\le n \\le 500$$$; $$$1 \\le m \\le 1000$$$; $$$2 \\le p \\le 10^9$$$, $$$p$$$ is prime).</p><p>Next $$$m$$$ lines contain three integers $$$u_i$$$, $$$v_i$$$, $$$x_i$$$ each\u00a0\u2014 the two endpoints of the $$$i$$$-th edge and the target value of that edge's counter ($$$1 \\le u_i, v_i \\le n$$$; $$$0 \\le x_i &lt; p$$$; $$$u_i \\neq v_i$$$). </p><p>The graph is connected. There are no loops, but there may be multiple edges between the same two vertices.</p>",
    "outputSpecification": "<p>If the target values on counters cannot be achieved, print <span class=\"tex-font-style-tt\">-1</span>. </p><p>Otherwise, print $$$t$$$\u00a0\u2014 the number of operations, followed by $$$t$$$ lines, describing the sequence of operations. Each line starts with integer $$$v$$$ ($$$0 \\le v &lt; p$$$)\u00a0\u2014 the counter increment for this operation. Then, in the same line, followed by $$$n - 1$$$ integers $$$e_1$$$, $$$e_2$$$, ... $$$e_{n - 1}$$$ ($$$1 \\le e_i \\le m$$$)\u00a0\u2014 the edges of the spanning tree.</p><p>The number of operations $$$t$$$ should not exceed $$$2m$$$. You don't need to minimize $$$t$$$. Any correct answer within the $$$2m$$$ bound is accepted. You are allowed to repeat spanning trees.</p>",
    "samples": [
        {
            "input": "\n3 3 101\n1 2 30\n2 3 40\n3 1 50\n",
            "output": "\n3\n10 1 2\n20 1 3\n30 2 3"
        },
        {
            "input": "\n2 2 37\n1 2 8\n1 2 15\n",
            "output": "\n2\n8 1\n15 2"
        },
        {
            "input": "\n5 4 5\n1 3 1\n2 3 2\n2 5 3\n4 1 4\n",
            "output": "\n-1\n"
        }
    ],
    "note": null,
    "contestId": 1773,
    "index": "J",
    "name": "Jumbled Trees",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "solvedCount": 104
}