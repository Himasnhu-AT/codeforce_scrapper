{
    "title": "E. Restorer Distance",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You have to restore the wall. The wall consists of $$$N$$$ pillars of bricks, the height of the $$$i$$$-th pillar is initially equal to $$$h_{i}$$$, the height is measured in number of bricks. After the restoration all the $$$N$$$ pillars should have equal heights.</p><p>You are allowed the following operations:</p><ul><li> put a brick on top of one pillar, the cost of this operation is $$$A$$$;</li><li> remove a brick from the top of one non-empty pillar, the cost of this operation is $$$R$$$;</li><li> move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is $$$M$$$.</li></ul><p>You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes $$$0$$$.</p><p>What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?</p>",
    "inputSpecification": "<p>The first line of input contains four integers $$$N$$$, $$$A$$$, $$$R$$$, $$$M$$$ ($$$1 \\le N \\le 10^{5}$$$, $$$0 \\le A, R, M \\le 10^{4}$$$)\u00a0\u2014 the number of pillars and the costs of operations.</p><p>The second line contains $$$N$$$ integers $$$h_{i}$$$ ($$$0 \\le h_{i} \\le 10^{9}$$$)\u00a0\u2014 initial heights of pillars.</p>",
    "outputSpecification": "<p>Print one integer\u00a0\u2014 the minimal cost of restoration.</p>",
    "samples": [
        {
            "input": "\n3 1 100 100\n1 3 8\n",
            "output": "\n12\n"
        },
        {
            "input": "\n3 100 1 100\n1 3 8\n",
            "output": "\n9\n"
        },
        {
            "input": "\n3 100 100 1\n1 3 8\n",
            "output": "\n4\n"
        },
        {
            "input": "\n5 1 2 4\n5 5 3 6 5\n",
            "output": "\n4\n"
        },
        {
            "input": "\n5 1 2 2\n5 5 3 6 5\n",
            "output": "\n3\n"
        }
    ],
    "note": null,
    "contestId": 1355,
    "index": "E",
    "name": "Restorer Distance",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "greedy",
        "math",
        "sortings",
        "ternary search"
    ],
    "solvedCount": 4794
}