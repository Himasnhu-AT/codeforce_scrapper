{
    "title": "F. One Node is Gone",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You have an integer $$$n$$$. Let's define following tree generation as <span class=\"tex-font-style-it\">McDic's generation</span>:</p><ol> <li> Make a complete and full binary tree of $$$2^{n} - 1$$$ vertices. Complete and full binary tree means a tree that exactly one vertex is a root, all leaves have the same depth (distance from the root), and all non-leaf nodes have exactly two child nodes. </li><li> Select a non-root vertex $$$v$$$ from that binary tree. </li><li> Remove $$$v$$$ from tree and make new edges between $$$v$$$'s parent and $$$v$$$'s direct children. If $$$v$$$ has no children, then no new edges will be made. </li></ol><p>You have a tree. Determine if this tree can be made by McDic's generation. If yes, then find the parent vertex of removed vertex in tree.</p>",
    "inputSpecification": "<p>The first line contains integer $$$n$$$ ($$$2 \\le n \\le 17$$$).</p><p>The $$$i$$$-th of the next $$$2^{n} - 3$$$ lines contains two integers $$$a_{i}$$$ and $$$b_{i}$$$ ($$$1 \\le a_{i} \\lt b_{i} \\le 2^{n} - 2$$$)\u00a0\u2014 meaning there is an edge between $$$a_{i}$$$ and $$$b_{i}$$$. It is guaranteed that the given edges form a tree.</p>",
    "outputSpecification": "<p>Print two lines.</p><p>In the first line, print a single integer\u00a0\u2014 the number of answers. If given tree cannot be made by McDic's generation, then print $$$0$$$.</p><p>In the second line, print all possible answers in ascending order, separated by spaces. If the given tree cannot be made by McDic's generation, then don't print anything.</p>",
    "samples": [
        {
            "input": "\n4\n1 2\n1 3\n2 4\n2 5\n3 6\n3 13\n3 14\n4 7\n4 8\n5 9\n5 10\n6 11\n6 12\n",
            "output": "\n1\n3\n"
        },
        {
            "input": "\n2\n1 2\n",
            "output": "\n2\n1 2\n"
        },
        {
            "input": "\n3\n1 2\n2 3\n3 4\n4 5\n5 6\n",
            "output": "\n0\n"
        }
    ],
    "note": "<p>In the first example, $$$3$$$ is the only possible answer.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/9febd65ceaf3036489696c991e0b68979048294d.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>In the second example, there are $$$2$$$ possible answers.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/fe9e58024c9e2fcf01115e0c0178a9efa9ea9d88.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>In the third example, the tree can't be generated by McDic's generation.</p>",
    "contestId": 1228,
    "index": "F",
    "name": "One Node is Gone",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "implementation",
        "trees"
    ],
    "solvedCount": 421
}