{
    "title": "F. I Might Be Wrong",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a binary string $$$S$$$ of length $$$n$$$ indexed from $$$1$$$ to $$$n$$$. You can perform the following operation any number of times (possibly zero):</p><ul><li><p>Choose two integers $$$l$$$ and $$$r$$$ ($$$1 \\le l \\le r \\le n$$$). Let $$$cnt_0$$$ be the number of times <span class=\"tex-font-style-tt\">0</span> occurs in $$$S[l \\ldots r]$$$ and $$$cnt_1$$$ be the number of times <span class=\"tex-font-style-tt\">1</span> occurs in $$$S[l \\ldots r]$$$. You can pay $$$|cnt_0 - cnt_1| + 1$$$ coins and sort the $$$S[l \\ldots r]$$$. (by $$$S[l \\ldots r]$$$ we mean the substring of $$$S$$$ starting at position $$$l$$$ and ending at position $$$r$$$)</p><p>For example if $$$S = $$$ <span class=\"tex-font-style-tt\">11001</span>, we can perform the operation on $$$S[2 \\ldots 4]$$$, paying $$$|2 - 1| + 1 = 2$$$ coins, and obtain $$$S = $$$ <span class=\"tex-font-style-tt\">10011</span> as a new string.</p></li></ul><p>Find the minimum total number of coins required to sort $$$S$$$ in increasing order.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)\u00a0\u2014 the number of test cases. The description of test cases follows.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the size of $$$S$$$.</p><p>The second line of each test case contains a binary string $$$S$$$ of $$$n$$$ characters $$$S_1S_2 \\ldots S_n$$$. ($$$S_i = $$$ <span class=\"tex-font-style-tt\">0</span> or $$$S_i = $$$ <span class=\"tex-font-style-tt\">1</span> for each $$$1 \\le i \\le n$$$)</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output the minimum total number of coins required to sort $$$S$$$ in increasing order.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">101</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1000</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">11010</div><div class=\"test-example-line test-example-line-even test-example-line-6\">6</div><div class=\"test-example-line test-example-line-even test-example-line-6\">110000</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">20</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">01000010001010011000</div>",
            "output": "\n0\n1\n1\n3\n2\n2\n5\n"
        }
    ],
    "note": "<p>In the first test case, $$$S$$$ is already sorted.</p><p>In the second test case, it's enough to apply the operation with $$$l = 1, r = 2$$$.</p><p>In the third test case, it's enough to apply the operation with $$$l = 1, r = 2$$$.</p>",
    "contestId": 1693,
    "index": "F",
    "name": "I Might Be Wrong",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "greedy",
        "two pointers"
    ],
    "solvedCount": 276
}