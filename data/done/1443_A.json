{
    "title": "A. Kids Seating",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Today the kindergarten has a new group of $$$n$$$ kids who need to be seated at the dinner table. The chairs at the table are numbered from $$$1$$$ to $$$4n$$$. Two kids can't sit on the same chair. It is known that two kids who sit on chairs with numbers $$$a$$$ and $$$b$$$ ($$$a \\neq b$$$) will indulge if: </p><ol> <li> $$$gcd(a, b) = 1$$$ or, </li><li> $$$a$$$ divides $$$b$$$ or $$$b$$$ divides $$$a$$$. </li></ol><p>$$$gcd(a, b)$$$\u00a0\u2014 the maximum number $$$x$$$ such that $$$a$$$ is divisible by $$$x$$$ and $$$b$$$ is divisible by $$$x$$$.</p><p>For example, if $$$n=3$$$ and the kids sit on chairs with numbers $$$2$$$, $$$3$$$, $$$4$$$, then they will indulge since $$$4$$$ is divided by $$$2$$$ and $$$gcd(2, 3) = 1$$$. If kids sit on chairs with numbers $$$4$$$, $$$6$$$, $$$10$$$, then they will not indulge.</p><p>The teacher really doesn't want the mess at the table, so she wants to seat the kids so there are no $$$2$$$ of the kid that can indulge. More formally, she wants no pair of chairs $$$a$$$ and $$$b$$$ that the kids occupy to fulfill the condition above.</p><p>Since the teacher is very busy with the entertainment of the kids, she asked you to solve this problem.</p>",
    "inputSpecification": "<p>The first line contains one integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$)\u00a0\u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>Each test case consists of one line containing an integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$)\u00a0\u2014 the number of kids.</p>",
    "outputSpecification": "<p>Output $$$t$$$ lines, which contain $$$n$$$ distinct integers from $$$1$$$ to $$$4n$$$\u00a0\u2014 the numbers of chairs that the kids should occupy in the corresponding test case. If there are multiple answers, print any of them. You can print $$$n$$$ numbers in any order.</p>",
    "samples": [
        {
            "input": "\n3\n2\n3\n4\n",
            "output": "\n6 4\n4 6 10\n14 10 12 8\n"
        }
    ],
    "note": null,
    "contestId": 1443,
    "index": "A",
    "name": "Kids Seating",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "solvedCount": 16096
}