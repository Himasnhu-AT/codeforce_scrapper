{
    "title": "C. Restore the Array",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Kristina had an array $$$a$$$ of length $$$n$$$ consisting of non-negative integers.</p><p>She built a new array $$$b$$$ of length $$$n-1$$$, such that $$$b_i = \\max(a_i, a_{i+1})$$$ ($$$1 \\le i \\le n-1$$$).</p><p>For example, suppose Kristina had an array $$$a$$$ = [$$$3, 0, 4, 0, 5$$$] of length $$$5$$$. Then she did the following: </p><ol> <li> Calculated $$$b_1 = \\max(a_1, a_2) = \\max(3, 0) = 3$$$; </li><li> Calculated $$$b_2 = \\max(a_2, a_3) = \\max(0, 4) = 4$$$; </li><li> Calculated $$$b_3 = \\max(a_3, a_4) = \\max(4, 0) = 4$$$; </li><li> Calculated $$$b_4 = \\max(a_4, a_5) = \\max(0, 5) = 5$$$. </li></ol> As a result, she got an array $$$b$$$ = [$$$3, 4, 4, 5$$$] of length $$$4$$$.<p>You only know the array $$$b$$$. Find any matching array $$$a$$$ that Kristina may have originally had.</p>",
    "inputSpecification": "<p>The first line of input data contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases.</p><p>The description of the test cases follows.</p><p>The first line of each test case contains one integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) \u2014 the number of elements in the array $$$a$$$ that Kristina originally had.</p><p>The second line of each test case contains exactly $$$n-1$$$ non-negative integer \u2014 elements of array $$$b$$$ ($$$0 \\le b_i \\le 10^9$$$).</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$, and that array $$$b$$$ was built correctly from some array $$$a$$$.</p>",
    "outputSpecification": "<p>For each test case on a separate line, print exactly $$$n$$$ non-negative integers \u2014 the elements of the array $$$a$$$ that Kristina originally had.</p><p>If there are several possible answers \u2014 output any of them.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">11</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 4 4 5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">0 0 0 0</div><div class=\"test-example-line test-example-line-even test-example-line-4\">6</div><div class=\"test-example-line test-example-line-even test-example-line-4\">0 3 4 4 3</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">10</div><div class=\"test-example-line test-example-line-even test-example-line-6\">4</div><div class=\"test-example-line test-example-line-even test-example-line-6\">3 3 3</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">4 2 5 5</div><div class=\"test-example-line test-example-line-even test-example-line-8\">4</div><div class=\"test-example-line test-example-line-even test-example-line-8\">3 3 3</div><div class=\"test-example-line test-example-line-odd test-example-line-9\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-9\">2 1 0</div><div class=\"test-example-line test-example-line-even test-example-line-10\">3</div><div class=\"test-example-line test-example-line-even test-example-line-10\">4 4</div><div class=\"test-example-line test-example-line-odd test-example-line-11\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-11\">8 1 3 5 10</div>",
            "output": "\n3 0 4 0 5\n2 2 1 1\n0 0 0 0 0\n0 0 3 4 3 3\n10 10\n3 3 3 1\n4 2 2 5 5\n3 3 3 3\n2 1 0 0\n2 4 4\n8 1 1 3 5 10"
        }
    ],
    "note": "<p>The first test case is explained in the problem statement.</p><p>In the second test case, we can get array $$$b$$$ = [$$$2, 2, 1$$$] from the array $$$a$$$ = [$$$2, 2, 1, 1$$$]: </p><ul> <li> $$$b_1 = \\max(a_1, a_2) = \\max(2, 2) = 2$$$; </li><li> $$$b_2 = \\max(a_2, a_3) = \\max(2, 1) = 2$$$; </li><li> $$$b_3 = \\max(a_3, a_4) = \\max(1, 1) = 1$$$. </li></ul><p>In the third test case, all elements of the array $$$b$$$ are zeros. Since each $$$b_i$$$ is the maximum of two adjacent elements of array $$$a$$$, array $$$a$$$ can only consist entirely of zeros.</p><p>In the fourth test case, we can get array $$$b$$$ = [$$$0, 3, 4, 4, 3$$$] from the array $$$a$$$ = [$$$0, 0, 3, 4, 3, 3$$$] : </p><ul> <li> $$$b_1 = \\max(a_1, a_2) = \\max(0, 0) = 0$$$; </li><li> $$$b_2 = \\max(a_2, a_3) = \\max(0, 3) = 3$$$; </li><li> $$$b_3 = \\max(a_3, a_4) = \\max(3, 4) = 4$$$; </li><li> $$$b_4 = \\max(a_4, a_5) = \\max(4, 3) = 4$$$; </li><li> $$$b_5 = \\max(a_5, a_6) = \\max(3, 3) = 3$$$. </li></ul>",
    "contestId": 1811,
    "index": "C",
    "name": "Restore the Array",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "solvedCount": 19079
}