{
    "title": "G. Tree Queries",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a tree consisting of <span class=\"tex-span\"><i>n</i></span> vertices (numbered from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span>). Initially all vertices are white. You have to process <span class=\"tex-span\"><i>q</i></span> queries of two different types:</p><ol> <li> <span class=\"tex-span\">1</span> <span class=\"tex-span\"><i>x</i></span> \u2014 change the color of vertex <span class=\"tex-span\"><i>x</i></span> to black. It is guaranteed that the first query will be of this type. </li><li> <span class=\"tex-span\">2</span> <span class=\"tex-span\"><i>x</i></span> \u2014 for the vertex <span class=\"tex-span\"><i>x</i></span>, find the minimum index <span class=\"tex-span\"><i>y</i></span> such that the vertex with index <span class=\"tex-span\"><i>y</i></span> belongs to the simple path from <span class=\"tex-span\"><i>x</i></span> to some black vertex (a simple path never visits any vertex more than once). </li></ol><p>For each query of type <span class=\"tex-span\">2</span> print the answer to it.</p><p><span class=\"tex-font-style-bf\">Note that the queries are given in modified way</span>.</p>",
    "inputSpecification": "<p>The first line contains two numbers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>q</i></span> (<span class=\"tex-span\">3\u2009\u2264\u2009<i>n</i>,\u2009<i>q</i>\u2009\u2264\u200910<sup class=\"upper-index\">6</sup></span>).</p><p>Then <span class=\"tex-span\"><i>n</i>\u2009-\u20091</span> lines follow, each line containing two numbers <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>x</i><sub class=\"lower-index\"><i>i</i></sub>\u2009&lt;\u2009<i>y</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>n</i></span>) and representing the edge between vertices <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>i</i></sub></span>.</p><p>It is guaranteed that these edges form a tree.</p><p>Then <span class=\"tex-span\"><i>q</i></span> lines follow. Each line contains two integers <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>z</i><sub class=\"lower-index\"><i>i</i></sub></span>, where <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub></span> is the type of <span class=\"tex-span\"><i>i</i></span>th query, and <span class=\"tex-span\"><i>z</i><sub class=\"lower-index\"><i>i</i></sub></span> can be used to restore <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> for this query in this way: you have to keep track of the answer to the last query of type <span class=\"tex-span\">2</span> (let's call this answer <span class=\"tex-span\"><i>last</i></span>, and initially <span class=\"tex-span\"><i>last</i>\u2009=\u20090</span>); then <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub>\u2009=\u2009(<i>z</i><sub class=\"lower-index\"><i>i</i></sub>\u2009+\u2009<i>last</i>)\u2009<i>mod</i>\u2009<i>n</i>\u2009+\u20091</span>.</p><p>It is guaranteed that the first query is of type <span class=\"tex-span\">1</span>, and there is at least one query of type <span class=\"tex-span\">2</span>.</p>",
    "outputSpecification": "<p>For each query of type <span class=\"tex-span\">2</span> output the answer to it.</p>",
    "samples": [
        {
            "input": "4 6<br/>1 2<br/>2 3<br/>3 4<br/>1 2<br/>1 2<br/>2 2<br/>1 3<br/>2 2<br/>2 2<br/>",
            "output": "3<br/>2<br/>1<br/>"
        }
    ],
    "note": null,
    "contestId": 825,
    "index": "G",
    "name": "Tree Queries",
    "type": "PROGRAMMING",
    "tags": [
        "dfs and similar",
        "graphs",
        "trees"
    ],
    "solvedCount": 1149
}