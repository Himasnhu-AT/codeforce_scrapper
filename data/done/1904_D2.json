{
    "title": "D2. Set To Max (Hard Version)",
    "timeLimit": {
        "value": 4.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p><span class=\"tex-font-style-bf\">This is the hard version of the problem. The only differences between the two versions of this problem are the constraints on $$$n$$$ and the time limit. You can make hacks only if all versions of the problem are solved.</span></p><p>You are given two arrays $$$a$$$ and $$$b$$$ of length $$$n$$$.</p><p>You can perform the following operation some (possibly zero) times: </p><ol> <li> choose $$$l$$$ and $$$r$$$ such that $$$1 \\leq l \\leq r \\leq n$$$. </li><li> let $$$x=\\max(a_l,a_{l+1},\\ldots,a_r)$$$. </li><li> for all $$$l \\leq i \\leq r$$$, set $$$a_i := x$$$. </li></ol><p>Determine if you can make array $$$a$$$ equal to array $$$b$$$.</p>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the length of the arrays.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le n$$$)\u00a0\u2014 the elements of array $$$a$$$.</p><p>The third line contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\le b_i \\le n$$$)\u00a0\u2014 the elements of array $$$b$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output \"<span class=\"tex-font-style-tt\">YES</span>\" (without quotes) if you can make $$$a$$$ into $$$b$$$ using any number of operations, and \"<span class=\"tex-font-style-tt\">NO</span>\" (without quotes) otherwise.</p><p>You can output \"<span class=\"tex-font-style-tt\">YES</span>\" and \"<span class=\"tex-font-style-tt\">NO</span>\" in any case (for example, strings \"<span class=\"tex-font-style-tt\">yES</span>\", \"<span class=\"tex-font-style-tt\">yes</span>\" and \"<span class=\"tex-font-style-tt\">Yes</span>\" will be recognized as a positive response).</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2 3 2 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3 3 2 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 4 2 2 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 4 3 4 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 2 1 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 3 3 2 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2 1 2</div>",
            "output": "\nYES\nNO\nYES\nNO\nNO\n"
        }
    ],
    "note": "<p>In the first test case, we can achieve array $$$b$$$ by applying a single operation: $$$(l,r)=(2,3)$$$.</p><p>In the second test case, it can be shown we cannot achieve array $$$b$$$ in any amount of operations.</p><p>In the third test case, we can achieve array $$$b$$$ by applying two operations: $$$(l,r)=(2,5)$$$. followed by $$$(l,r)=(1,3)$$$.</p><p>In the fourth and fifth test cases, it can be shown we cannot achieve array $$$b$$$ in any amount of operations.</p>",
    "contestId": 1904,
    "index": "D2",
    "name": "Set To Max (Hard Version)",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "data structures",
        "divide and conquer",
        "greedy",
        "implementation",
        "sortings"
    ],
    "solvedCount": 3938
}