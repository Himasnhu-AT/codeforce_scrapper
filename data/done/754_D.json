{
    "title": "D. Fedor and coupons",
    "timeLimit": {
        "value": 4.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>All our characters have hobbies. The same is true for Fedor. He enjoys shopping in the neighboring supermarket. </p><p>The goods in the supermarket have unique integer ids. Also, for every integer there is a product with id equal to this integer. Fedor has <span class=\"tex-span\"><i>n</i></span> discount coupons, the <span class=\"tex-span\"><i>i</i></span>-th of them can be used with products with ids ranging from <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></span> to <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span>, inclusive. Today Fedor wants to take exactly <span class=\"tex-span\"><i>k</i></span> coupons with him.</p><p>Fedor wants to choose the <span class=\"tex-span\"><i>k</i></span> coupons in such a way that the number of such products <span class=\"tex-span\"><i>x</i></span> that all coupons can be used with this product <span class=\"tex-span\"><i>x</i></span> is as large as possible (for better understanding, see examples). Fedor wants to save his time as well, so he asks you to choose coupons for him. Help Fedor!</p>",
    "inputSpecification": "<p>The first line contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>k</i>\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20093\u00b710<sup class=\"upper-index\">5</sup></span>)\u00a0\u2014 the number of coupons Fedor has, and the number of coupons he wants to choose.</p><p>Each of the next <span class=\"tex-span\"><i>n</i></span> lines contains two integers <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">\u2009-\u200910<sup class=\"upper-index\">9</sup>\u2009\u2264\u2009<i>l</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>r</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">9</sup></span>)\u00a0\u2014 the description of the <span class=\"tex-span\"><i>i</i></span>-th coupon. The coupons can be equal.</p>",
    "outputSpecification": "<p>In the first line print single integer\u00a0\u2014 the maximum number of products with which all the chosen coupons can be used. The products with which at least one coupon cannot be used shouldn't be counted.</p><p>In the second line print <span class=\"tex-span\"><i>k</i></span> distinct integers <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\">1</sub>,\u2009<i>p</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>p</i><sub class=\"lower-index\"><i>k</i></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>p</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>n</i></span>)\u00a0\u2014 the ids of the coupons which Fedor should choose.</p><p>If there are multiple answers, print any of them.</p>",
    "samples": [
        {
            "input": "4 2<br/>1 100<br/>40 70<br/>120 130<br/>125 180<br/>",
            "output": "31<br/>1 2 <br/>"
        },
        {
            "input": "3 2<br/>1 12<br/>15 20<br/>25 30<br/>",
            "output": "0<br/>1 2 <br/>"
        },
        {
            "input": "5 2<br/>1 10<br/>5 15<br/>14 50<br/>30 70<br/>99 100<br/>",
            "output": "21<br/>3 4 <br/>"
        }
    ],
    "note": "<p>In the first example if we take the first two coupons then all the products with ids in range <span class=\"tex-span\">[40,\u200970]</span> can be bought with both coupons. There are <span class=\"tex-span\">31</span> products in total.</p><p>In the second example, no product can be bought with two coupons, that is why the answer is <span class=\"tex-span\">0</span>. Fedor can choose any two coupons in this example.</p>",
    "contestId": 754,
    "index": "D",
    "name": "Fedor and coupons",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "data structures",
        "greedy",
        "sortings"
    ],
    "solvedCount": 2205
}