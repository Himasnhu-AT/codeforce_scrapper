{
    "title": "F. Koala and Notebook",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 512.0,
        "unit": "megabytes"
    },
    "statement": "<p>Koala Land consists of $$$m$$$ bidirectional roads connecting $$$n$$$ cities. The roads are numbered from $$$1$$$ to $$$m$$$ by order in input. It is guaranteed, that one can reach any city from every other city.</p><p>Koala starts traveling from city $$$1$$$. Whenever he travels on a road, he writes its number down in his notebook. He doesn't put spaces between the numbers, so they all get concatenated into a single number.</p><p>Before embarking on his trip, Koala is curious about the resulting number for all possible destinations. For each possible destination, what is the smallest number he could have written for it?</p><p>Since these numbers may be quite large, print their remainders modulo $$$10^9+7$$$. Please note, that you need to compute the remainder of the minimum possible number, <span class=\"tex-font-style-bf\">not</span> the minimum possible remainder.</p>",
    "inputSpecification": "<p>The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 10^5, n - 1 \\le m \\le 10^5$$$), the number of cities and the number of roads, respectively.</p><p>The $$$i$$$-th of the following $$$m$$$ lines contains integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i, y_i \\le n$$$, $$$x_i \\ne y_i$$$), representing a bidirectional road between cities $$$x_i$$$ and $$$y_i$$$.</p><p>It is guaranteed, that for any pair of cities there is at most one road connecting them, and that one can reach any city from every other city. </p>",
    "outputSpecification": "<p>Print $$$n - 1$$$ integers, the answer for every city except for the first city.</p><p>The $$$i$$$-th integer should be equal to the smallest number he could have written for destination $$$i+1$$$. Since this number may be large, output its remainder modulo $$$10^9+7$$$.</p>",
    "samples": [
        {
            "input": "\n11 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n",
            "output": "\n1\n12\n123\n1234\n12345\n123456\n1234567\n12345678\n123456789\n345678826\n"
        },
        {
            "input": "\n12 19\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 11\n11 12\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n",
            "output": "\n1\n12\n13\n14\n15\n16\n17\n18\n19\n1210\n121011\n"
        },
        {
            "input": "\n12 14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n1 3\n1 4\n1 10\n",
            "output": "\n1\n12\n13\n134\n1345\n13456\n1498\n149\n14\n1410\n141011\n"
        }
    ],
    "note": null,
    "contestId": 1209,
    "index": "F",
    "name": "Koala and Notebook",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "dfs and similar",
        "graphs",
        "shortest paths",
        "strings",
        "trees"
    ],
    "solvedCount": 1109
}