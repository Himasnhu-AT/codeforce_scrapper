{
    "title": "E. Nearest Opposite Parity",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given an array $$$a$$$ consisting of $$$n$$$ integers. In one move, you can jump from the position $$$i$$$ to the position $$$i - a_i$$$ (if $$$1 \\le i - a_i$$$) or to the position $$$i + a_i$$$ (if $$$i + a_i \\le n$$$).</p><p>For each position $$$i$$$ from $$$1$$$ to $$$n$$$ you want to know the minimum the number of moves required to reach any position $$$j$$$ such that $$$a_j$$$ has the opposite parity from $$$a_i$$$ (i.e. if $$$a_i$$$ is odd then $$$a_j$$$ has to be even and vice versa).</p>",
    "inputSpecification": "<p>The first line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) \u2014 the number of elements in $$$a$$$.</p><p>The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le n$$$), where $$$a_i$$$ is the $$$i$$$-th element of $$$a$$$.</p>",
    "outputSpecification": "<p>Print $$$n$$$ integers $$$d_1, d_2, \\dots, d_n$$$, where $$$d_i$$$ is the minimum the number of moves required to reach any position $$$j$$$ such that $$$a_j$$$ has the opposite parity from $$$a_i$$$ (i.e. if $$$a_i$$$ is odd then $$$a_j$$$ has to be even and vice versa) or <span class=\"tex-font-style-tt\">-1</span> if it is impossible to reach such a position.</p>",
    "samples": [
        {
            "input": "\n10\n4 5 7 6 7 5 4 4 6 4\n",
            "output": "\n1 1 1 2 -1 1 1 3 1 1 \n"
        }
    ],
    "note": null,
    "contestId": 1272,
    "index": "E",
    "name": "Nearest Opposite Parity",
    "type": "PROGRAMMING",
    "tags": [
        "dfs and similar",
        "graphs",
        "shortest paths"
    ],
    "solvedCount": 6056
}