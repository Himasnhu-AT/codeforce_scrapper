{
    "title": "C. Booking System",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Innovation technologies are on a victorious march around the planet. They integrate into all spheres of human activity!</p><p>A restaurant called \"Dijkstra's Place\" has started thinking about optimizing the booking system. </p><p>There are <span class=\"tex-span\"><i>n</i></span> booking requests received by now. Each request is characterized by two numbers: <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>i</i></sub></span> \u2014 the size of the group of visitors who will come via this request and the total sum of money they will spend in the restaurant, correspondingly.</p><p>We know that for each request, all <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> people want to sit at the same table and are going to spend the whole evening in the restaurant, from the opening moment at 18:00 to the closing moment.</p><p>Unfortunately, there only are <span class=\"tex-span\"><i>k</i></span> tables in the restaurant. For each table, we know <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> \u2014 the maximum number of people who can sit at it. A table can have only people from the same group sitting at it. If you cannot find a large enough table for the whole group, then all visitors leave and naturally, pay nothing.</p><p>Your task is: given the tables and the requests, decide which requests to accept and which requests to decline so that the money paid by the happy and full visitors was maximum.</p>",
    "inputSpecification": "<p>The first line of the input contains integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20091000</span>) \u2014 the number of requests from visitors. Then <span class=\"tex-span\"><i>n</i></span> lines follow. Each line contains two integers: <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub>,\u2009<i>p</i><sub class=\"lower-index\"><i>i</i></sub></span> <span class=\"tex-span\">(1\u2009\u2264\u2009<i>c</i><sub class=\"lower-index\"><i>i</i></sub>,\u2009<i>p</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u20091000</span>) \u2014 the size of the group of visitors who will come by the <span class=\"tex-span\"><i>i</i></span>-th request and the total sum of money they will pay when they visit the restaurant, correspondingly.</p><p>The next line contains integer <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>k</i>\u2009\u2264\u20091000</span>) \u2014 the number of tables in the restaurant. The last line contains <span class=\"tex-span\"><i>k</i></span> space-separated integers: <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\">1</sub>,\u2009<i>r</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>r</i><sub class=\"lower-index\"><i>k</i></sub></span> <span class=\"tex-span\">(1\u2009\u2264\u2009<i>r</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u20091000)</span> \u2014 the maximum number of people that can sit at each table.</p>",
    "outputSpecification": "<p>In the first line print two integers: <span class=\"tex-span\"><i>m</i>,\u2009<i>s</i></span> \u2014 the number of accepted requests and the total money you get from these requests, correspondingly.</p><p>Then print <span class=\"tex-span\"><i>m</i></span> lines \u2014 each line must contain two space-separated integers: the number of the accepted request and the number of the table to seat people who come via this request. The requests and the tables are consecutively numbered starting from <span class=\"tex-span\">1</span> in the order in which they are given in the input.</p><p>If there are multiple optimal answers, print any of them.</p>",
    "samples": [
        {
            "input": "3<br/>10 50<br/>2 100<br/>5 30<br/>3<br/>4 6 9<br/>",
            "output": "2 130<br/>2 1<br/>3 2<br/>"
        }
    ],
    "note": null,
    "contestId": 416,
    "index": "C",
    "name": "Booking System",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "implementation"
    ],
    "solvedCount": 7690
}