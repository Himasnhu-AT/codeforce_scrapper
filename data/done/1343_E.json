{
    "title": "E. Weights Distributing",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given an undirected unweighted graph consisting of $$$n$$$ vertices and $$$m$$$ edges (which represents the map of Bertown) and the array of prices $$$p$$$ of length $$$m$$$. It is guaranteed that there is a path between each pair of vertices (districts).</p><p>Mike has planned a trip from the vertex (district) $$$a$$$ to the vertex (district) $$$b$$$ and then from the vertex (district) $$$b$$$ to the vertex (district) $$$c$$$. He can visit the same district twice or more. But there is one issue: authorities of the city want to set a price for using the road so if someone goes along the road then he should pay the price corresponding to this road (<span class=\"tex-font-style-bf\">he pays each time he goes along the road</span>). The list of prices that will be used $$$p$$$ is ready and they just want to distribute it between all roads in the town in such a way that each price from the array corresponds to exactly one road.</p><p>You are a good friend of Mike (and suddenly a mayor of Bertown) and want to help him to make his trip as cheap as possible. So, your task is to distribute prices between roads in such a way that if Mike chooses the optimal path then the price of the trip is the <span class=\"tex-font-style-bf\">minimum</span> possible. <span class=\"tex-font-style-bf\">Note that you cannot rearrange prices after the start of the trip</span>.</p><p>You have to answer $$$t$$$ independent test cases.</p>",
    "inputSpecification": "<p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The first line of the test case contains five integers $$$n, m, a, b$$$ and $$$c$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$, $$$n-1 \\le m \\le min(\\frac{n(n-1)}{2}, 2 \\cdot 10^5)$$$, $$$1 \\le a, b, c \\le n$$$) \u2014 the number of vertices, the number of edges and districts in Mike's trip.</p><p>The second line of the test case contains $$$m$$$ integers $$$p_1, p_2, \\dots, p_m$$$ ($$$1 \\le p_i \\le 10^9$$$), where $$$p_i$$$ is the $$$i$$$-th price from the array.</p><p>The following $$$m$$$ lines of the test case denote edges: edge $$$i$$$ is represented by a pair of integers $$$v_i$$$, $$$u_i$$$ ($$$1 \\le v_i, u_i \\le n$$$, $$$u_i \\ne v_i$$$), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i.\u2009e. for each pair ($$$v_i, u_i$$$) there are no other pairs ($$$v_i, u_i$$$) or ($$$u_i, v_i$$$) in the array of edges, and for each pair $$$(v_i, u_i)$$$ the condition $$$v_i \\ne u_i$$$ is satisfied. It is guaranteed that the given graph is connected.</p><p>It is guaranteed that the sum of $$$n$$$ (as well as the sum of $$$m$$$) does not exceed $$$2 \\cdot 10^5$$$ ($$$\\sum n \\le 2 \\cdot 10^5$$$, $$$\\sum m \\le 2 \\cdot 10^5$$$).</p>",
    "outputSpecification": "<p>For each test case, print the answer \u2014 the <span class=\"tex-font-style-bf\">minimum</span> possible price of Mike's trip if you distribute prices between edges optimally.</p>",
    "samples": [
        {
            "input": "\n2\n4 3 2 3 4\n1 2 3\n1 2\n1 3\n1 4\n7 9 1 5 7\n2 10 4 8 5 6 7 3 3\n1 2\n1 3\n1 4\n3 2\n3 5\n4 2\n5 6\n1 7\n6 7\n",
            "output": "\n7\n12\n"
        }
    ],
    "note": "<p>One of the possible solution to the first test case of the example:</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/bcd57e84c44bc22ccce7e5005c98f3f1d0fadebf.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p>One of the possible solution to the second test case of the example:</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/f1d0f51cf563c458a58154af19f523d4cb7bafc0.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p>",
    "contestId": 1343,
    "index": "E",
    "name": "Weights Distributing",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "graphs",
        "greedy",
        "shortest paths",
        "sortings"
    ],
    "solvedCount": 4888
}