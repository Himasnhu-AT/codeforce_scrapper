{
    "title": "B. Scenes From a Memory",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>During the hypnosis session, Nicholas suddenly remembered a positive integer $$$n$$$, which <span class=\"tex-font-style-bf\">doesn't contain zeros in decimal notation</span>. </p><p>Soon, when he returned home, he got curious: what is the maximum number of digits that can be removed from the number so that the number becomes <span class=\"tex-font-style-bf\">not prime</span>, that is, either composite or equal to one?</p><p>For some numbers doing so is impossible: for example, for number $$$53$$$ it's impossible to delete some of its digits to obtain a not prime integer. However, <span class=\"tex-font-style-bf\">for all $$$n$$$ in the test cases of this problem, it's guaranteed that it's possible to delete some of their digits to obtain a not prime number</span>.</p><p>Note that you cannot remove all the digits from the number.</p><p>A prime number is a number that has no divisors except one and itself. A composite is a number that has more than two divisors. $$$1$$$ is neither a prime nor a composite number.</p>",
    "inputSpecification": "<p>Each test contains multiple test cases.</p><p>The first line contains one positive integer $$$t$$$ ($$$1 \\le t \\le 10^3$$$), denoting the number of test cases. Description of the test cases follows.</p><p>The first line of each test case contains one positive integer $$$k$$$ ($$$1 \\le k \\le 50$$$)\u00a0\u2014 the number of digits in the number.</p><p>The second line of each test case contains a positive integer $$$n$$$, which doesn't contain zeros in decimal notation ($$$10^{k-1} \\le n &lt; 10^{k}$$$). It is guaranteed that it is always possible to remove less than $$$k$$$ digits to make the number not prime.</p><p>It is guaranteed that the sum of $$$k$$$ over all test cases does not exceed $$$10^4$$$.</p>",
    "outputSpecification": "<p>For every test case, print two numbers in two lines. In the first line print the number of digits, that you <span class=\"tex-font-style-bf\">have left</span> in the number. In the second line print the digits left after all delitions. </p><p>If there are multiple solutions, print any.</p>",
    "samples": [
        {
            "input": "\n7\n3\n237\n5\n44444\n3\n221\n2\n35\n3\n773\n1\n4\n30\n626221626221626221626221626221\n",
            "output": "\n2\n27\n1\n4\n1\n1\n2\n35\n2\n77\n1\n4\n1\n6\n"
        }
    ],
    "note": "<p>In the first test case, you can't delete $$$2$$$ digits from the number $$$237$$$, as all the numbers $$$2$$$, $$$3$$$, and $$$7$$$ are prime. However, you can delete $$$1$$$ digit, obtaining a number $$$27 = 3^3$$$.</p><p>In the second test case, you can delete all digits except one, as $$$4 = 2^2$$$ is a composite number.</p>",
    "contestId": 1562,
    "index": "B",
    "name": "Scenes From a Memory",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "constructive algorithms",
        "implementation",
        "math",
        "number theory"
    ],
    "solvedCount": 19244
}