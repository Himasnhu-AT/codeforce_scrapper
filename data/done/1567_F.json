{
    "title": "F. One-Four Overload",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Alice has an empty grid with $$$n$$$ rows and $$$m$$$ columns. Some of the cells are marked, and <span class=\"tex-font-style-bf\">no marked cells are adjacent to the edge of the grid</span>. (Two squares are <span class=\"tex-font-style-it\">adjacent</span> if they share a side.) </p><p>Alice wants to fill each cell with a number such that the following statements are true: </p><ul> <li> every <span class=\"tex-font-style-it\">unmarked</span> cell contains either the number $$$1$$$ or $$$4$$$; </li><li> every <span class=\"tex-font-style-it\">marked</span> cell contains the sum of the numbers in all <span class=\"tex-font-style-bf\">unmarked</span> cells adjacent to it (if a marked cell is not adjacent to any unmarked cell, this sum is $$$0$$$); </li><li> every <span class=\"tex-font-style-it\">marked</span> cell contains a multiple of $$$5$$$. </li></ul> Alice couldn't figure it out, so she asks Bob to help her. Help Bob find any such grid, or state that no such grid exists.",
    "inputSpecification": "<p>The first line of input contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 500$$$)\u00a0\u2014 the number of rows and the number of columns in the grid, respectively.</p><p>Then $$$n$$$ lines follow, each containing $$$m$$$ characters. Each of these characters is either '<span class=\"tex-font-style-tt\">.</span>' or '<span class=\"tex-font-style-tt\">X</span>'\u00a0\u2014 an unmarked and a marked cell, respectively. <span class=\"tex-font-style-bf\">No marked cells are adjacent to the edge of the grid.</span></p>",
    "outputSpecification": "<p>Output \"'<span class=\"tex-font-style-tt\">NO</span>\" if no suitable grid exists. Otherwise, output \"'<span class=\"tex-font-style-tt\">YES</span>\"'. Then output $$$n$$$ lines of $$$m$$$ space-separated integers\u00a0\u2014 the integers in the grid.</p>",
    "samples": [
        {
            "input": "\n5 5\n.....\n.XXX.\n.X.X.\n.XXX.\n.....\n",
            "output": "\nYES\n4 1 4 4 1\n4 5 5 5 1\n4 5 1 5 4\n1 5 5 5 4\n1 4 4 1 4\n"
        },
        {
            "input": "\n5 5\n.....\n.XXX.\n.XXX.\n.XXX.\n.....\n",
            "output": "\nNO\n"
        },
        {
            "input": "\n3 2\n..\n..\n..\n",
            "output": "\nYES\n4 1\n4 1\n1 4\n"
        },
        {
            "input": "\n9 9\n.........\n.XXXXX.X.\n.X...X...\n.X.XXXXX.\n.X.X.X.X.\n.X.XXX.X.\n.X.....X.\n.XXXXXXX.\n.........\n",
            "output": "\nYES\n4 4 4 1 4 1 4 1 4\n1 5 5 5 5 5 4 10 1\n4 5 1 4 1 5 4 4 4\n4 5 1 5 5 0 5 5 1\n4 5 1 5 4 5 1 5 4\n4 5 1 5 5 5 4 5 1\n1 5 4 4 1 1 4 5 1\n4 5 5 5 5 5 5 5 4\n1 1 1 1 4 4 1 1 4\n"
        }
    ],
    "note": "<p>It can be shown that no such grid exists for the second test.</p>",
    "contestId": 1567,
    "index": "F",
    "name": "One-Four Overload",
    "type": "PROGRAMMING",
    "tags": [
        "2-sat",
        "constructive algorithms",
        "dfs and similar",
        "dsu",
        "graphs",
        "implementation"
    ],
    "solvedCount": 732
}