{
    "title": "D. Unnatural Language Processing",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Lura was bored and decided to make a simple language using the five letters $$$\\texttt{a}$$$, $$$\\texttt{b}$$$, $$$\\texttt{c}$$$, $$$\\texttt{d}$$$, $$$\\texttt{e}$$$. There are two types of letters: </p><ul> <li> <span class=\"tex-font-style-it\">vowels</span>\u00a0\u2014 the letters $$$\\texttt{a}$$$ and $$$\\texttt{e}$$$. They are represented by $$$\\textsf{V}$$$. </li><li> <span class=\"tex-font-style-it\">consonants</span>\u00a0\u2014 the letters $$$\\texttt{b}$$$, $$$\\texttt{c}$$$, and $$$\\texttt{d}$$$. They are represented by $$$\\textsf{C}$$$. </li></ul> There are two types of <span class=\"tex-font-style-it\">syllables</span> in the language: $$$\\textsf{CV}$$$ (consonant followed by vowel) or $$$\\textsf{CVC}$$$ (vowel with consonant before and after). For example, $$$\\texttt{ba}$$$, $$$\\texttt{ced}$$$, $$$\\texttt{bab}$$$ are syllables, but $$$\\texttt{aa}$$$, $$$\\texttt{eda}$$$, $$$\\texttt{baba}$$$ are not.<p>A <span class=\"tex-font-style-it\">word</span> in the language is a sequence of syllables. Lura has written a word in the language, but she doesn't know how to split it into syllables. Help her break the word into syllables.</p><p>For example, given the word $$$\\texttt{bacedbab}$$$, it would be split into syllables as $$$\\texttt{ba.ced.bab}$$$ (the dot $$$\\texttt{.}$$$ represents a syllable boundary).</p>",
    "inputSpecification": "<p>The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$)\u00a0\u2014 the length of the word.</p><p>The second line of each test case contains a string consisting of $$$n$$$ lowercase Latin characters \u00a0\u2014 the word. </p><p>All words given are valid words in the language; that is, they only use the letters $$$\\texttt{a}$$$, $$$\\texttt{b}$$$, $$$\\texttt{c}$$$, $$$\\texttt{d}$$$, $$$\\texttt{e}$$$, and each word is made up of several syllables.</p><p>The sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For test case, output a string denoting the word split into syllables by inserting a dot $$$\\texttt{.}$$$ between every pair of adjacent syllables.</p><p>If there are multiple possible splittings, output any of them. The input is given in such a way that at least one possible splitting exists.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">8</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">bacedbab</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">baba</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">13</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">daddecabeddad</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">dac</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">dacdac</div><div class=\"test-example-line test-example-line-even test-example-line-6\">22</div><div class=\"test-example-line test-example-line-even test-example-line-6\">dababbabababbabbababba</div>",
            "output": "\nba.ced.bab\nba.ba\ndad.de.ca.bed.dad\ndac\ndac.dac\nda.bab.ba.ba.bab.bab.ba.bab.ba\n"
        }
    ],
    "note": null,
    "contestId": 1915,
    "index": "D",
    "name": "Unnatural Language Processing",
    "type": "PROGRAMMING",
    "tags": [
        "greedy",
        "implementation",
        "strings"
    ],
    "solvedCount": 28307
}