{
    "title": "B. Sum Graph",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p><span class=\"tex-font-style-it\">This is an interactive problem.</span></p><p>There is a hidden permutation $$$p_1, p_2, \\dots, p_n$$$. </p><p>Consider an undirected graph with $$$n$$$ nodes only with no edges. You can make two types of queries:</p><ol> <li> Specify an integer $$$x$$$ satisfying $$$2 \\le x \\le 2n$$$. For all integers $$$i$$$ ($$$1 \\le i \\le n$$$) such that $$$1 \\le x-i \\le n$$$, an edge between node $$$i$$$ and node $$$x-i$$$ will be added. </li><li> Query the number of <span class=\"tex-font-style-bf\">edges</span> in the shortest path between node $$$p_i$$$ and node $$$p_j$$$. As the answer to this question you will get the number of edges in the shortest path if such a path exists, or $$$-1$$$ if there is no such path. </li></ol><p>Note that you can make both types of queries in <span class=\"tex-font-style-bf\">any</span> order.</p><p>Within $$$2n$$$ queries (including type $$$1$$$ and type $$$2$$$), guess two possible permutations, at least one of which is $$$p_1, p_2, \\dots, p_n$$$. You get accepted if at least one of the permutations is correct. You are allowed to guess the same permutation twice.</p><p>A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).</p>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) \u2014 the number of test cases.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^3$$$) \u2014 the length of the permutation.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^3$$$.</p>",
    "outputSpecification": null,
    "samples": [
        {
            "input": "\n2\n6\n\n1\n\n1\n\n1\n\n1\n\n1\n\n2\n\n-1\n\n1\n2\n\n1\n",
            "output": "\n\n\n+ 12\n\n+ 2\n\n+ 3\n\n? 1 3\n\n+ 5\n\n? 1 5\n\n? 4 5\n\n! 1 4 2 5 3 6 1 2 3 4 5 6\n\n\n! 1 2 2 1\n\n"
        }
    ],
    "note": "<p>In the first test case, $$$n=6$$$ and the hidden permutation $$$p = [1,4,2,5,3,6]$$$.</p><p>Firstly, make a type $$$1$$$ query on $$$x=12, 2, 3$$$ respectively. This adds four edges to the graph in total: </p><ul> <li> An edge that connects node $$$6$$$ and node $$$6$$$. </li><li> An edge that connects node $$$1$$$ and node $$$1$$$. </li><li> An edge that connects node $$$1$$$ and node $$$2$$$. </li><li> An edge that connects node $$$2$$$ and node $$$1$$$. </li></ul><p>Since all of these queries are valid, the interactor returns $$$1$$$ after each of them.</p><p>Then, query the number of edges in the shortest path between node $$$p_1 = 1$$$ and $$$p_3 = 2$$$, which is equal to $$$1$$$.</p><p>Then, make a type $$$1$$$ query on $$$x=5$$$. This adds four edges to the graph in total: </p><ul> <li> An edge that connects node $$$1$$$ and node $$$4$$$. </li><li> An edge that connects node $$$2$$$ and node $$$3$$$. </li><li> An edge that connects node $$$3$$$ and node $$$2$$$. </li><li> An edge that connects node $$$4$$$ and node $$$1$$$. </li></ul><p>Since this query is valid, the interactor returns $$$1$$$.</p><p>Then, query the number of edges in the shortest path between node $$$p_1 = 1$$$ and $$$p_5 = 3$$$, which is equal to $$$2$$$.</p><p>Then, query the number of edges in the shortest path between node $$$p_4 = 5$$$ and $$$p_5 = 3$$$. Such a path doesn't exist, therefore the interactor returns $$$-1$$$.</p><p>Afterwards, due to some magic, two possible permutations that can be $$$p$$$ are determined: the first permutation is $$$[1,4,2,5,3,6]$$$ and the second permutation is $$$[1,2,3,4,5,6]$$$. Since the first permutation is equal to the hidden permutation, this test case is solved correctly. In total, $$$7$$$ queries are used, which is within the limit of $$$2 \\cdot 6 = 12$$$ queries.</p><p>Since the answer is correct, the interactor returns $$$1$$$.</p><p>In the second test case, $$$n=2$$$ and the hidden permutation is $$$p = [2,1]$$$.</p><p>Since there are only $$$2! = 2$$$ possible permutations, no queries are needed. It is sufficient to just output the two permutations, $$$[1,2]$$$ and $$$[2,1]$$$. In total, $$$0$$$ queries are used, which is within the limit of $$$2 \\cdot 2 = 4$$$ queries.</p><p>Since the answer is correct, the interactor returns $$$1$$$.</p>",
    "contestId": 1815,
    "index": "B",
    "name": "Sum Graph",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "constructive algorithms",
        "graphs",
        "implementation",
        "interactive",
        "shortest paths",
        "trees"
    ],
    "solvedCount": 2893
}