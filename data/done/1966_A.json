{
    "title": "A. Card Exchange",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You have a hand of $$$n$$$ cards, where each card has a number written on it, and a fixed integer $$$k$$$. You can perform the following operation any number of times:</p><ul> <li> Choose any $$$k$$$ cards from your hand that all have the same number. </li><li> Exchange these cards for $$$k-1$$$ cards, each of which can have <span class=\"tex-font-style-bf\">any</span> number you choose (including the number written on the cards you just exchanged). </li></ul><p>Here is one possible sequence of operations for the first example case, which has $$$k=3$$$:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/99af5df0491f8ed27b54f9130400fa15a9aeb63e.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>What is the minimum number of cards you can have in your hand at the end of this process?</p>",
    "inputSpecification": "<p>The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 500$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 100$$$, $$$2 \\le k \\le 100$$$)\u00a0\u2014 the number of cards you have, and the number of cards you exchange during each operation, respectively.</p><p>The next line of each test case contains $$$n$$$ integers $$$c_1, c_2, \\ldots c_n$$$ ($$$1 \\le c_i \\le 100$$$)\u00a0\u2014 the numbers written on your cards.</p>",
    "outputSpecification": "<p>For each test case, output a single integer\u00a0\u2014 the minimum number of cards you can have left in your hand after any number of operations.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 1 1 4 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 10</div><div class=\"test-example-line test-example-line-even test-example-line-2\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">7 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 2 1 100 5 2 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">10 4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 1 1 1 1 1 1 1 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5 2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3 8 1 48 7</div><div class=\"test-example-line test-example-line-even test-example-line-6\">6 2</div><div class=\"test-example-line test-example-line-even test-example-line-6\">10 20 30 10 20 40</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">6 3</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">10 20 30 10 20 40</div>",
            "output": "\n2\n1\n1\n3\n5\n1\n6\n"
        }
    ],
    "note": "<p>The first example case corresponds to the picture above. The sequence of operations displayed there is optimal, so the answer is $$$2$$$.</p><p>In the second example case, no operations can be performed, so the answer is $$$1$$$.</p><p>In the fourth example case, you can repeatedly select $$$4$$$ cards numbered with $$$1$$$ and replace them with $$$3$$$ cards numbered with $$$1$$$, until there are $$$3$$$ cards left.</p>",
    "contestId": 1966,
    "index": "A",
    "name": "Card Exchange",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "games",
        "greedy"
    ],
    "solvedCount": 15968
}