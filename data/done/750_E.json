{
    "title": "E. New Year and Old Subsequence",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>A string <span class=\"tex-span\"><i>t</i></span> is called <span class=\"tex-font-style-it\">nice</span> if a string \"<span class=\"tex-font-style-tt\">2017</span>\" occurs in <span class=\"tex-span\"><i>t</i></span> as a <span class=\"tex-font-style-bf\">subsequence</span> but a string \"<span class=\"tex-font-style-tt\">2016</span>\" doesn't occur in <span class=\"tex-span\"><i>t</i></span> as a <span class=\"tex-font-style-bf\">subsequence</span>. For example, strings \"<span class=\"tex-font-style-tt\">203434107</span>\" and \"<span class=\"tex-font-style-tt\">9220617</span>\" are nice, while strings \"<span class=\"tex-font-style-tt\">20016</span>\", \"<span class=\"tex-font-style-tt\">1234</span>\" and \"<span class=\"tex-font-style-tt\">20167</span>\" aren't nice.</p><p>The <span class=\"tex-font-style-it\">ugliness</span> of a string is the minimum possible number of characters to remove, in order to obtain a nice string. If it's impossible to make a string nice by removing characters, its ugliness is <span class=\"tex-span\">\u2009-\u20091</span>.</p><p>Limak has a string <span class=\"tex-span\"><i>s</i></span> of length <span class=\"tex-span\"><i>n</i></span>, with characters indexed <span class=\"tex-span\">1</span> through <span class=\"tex-span\"><i>n</i></span>. He asks you <span class=\"tex-span\"><i>q</i></span> queries. In the <span class=\"tex-span\"><i>i</i></span>-th query you should compute and print the ugliness of a <span class=\"tex-font-style-bf\">substring</span> (continuous subsequence) of <span class=\"tex-span\"><i>s</i></span> starting at the index <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> and ending at the index <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span> (inclusive).</p>",
    "inputSpecification": "<p>The first line of the input contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>q</i></span> (<span class=\"tex-span\">4\u2009\u2264\u2009<i>n</i>\u2009\u2264\u2009200\u2009000</span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>q</i>\u2009\u2264\u2009200\u2009000</span>)\u00a0\u2014 the length of the string <span class=\"tex-span\"><i>s</i></span> and the number of queries respectively.</p><p>The second line contains a string <span class=\"tex-span\"><i>s</i></span> of length <span class=\"tex-span\"><i>n</i></span>. Every character is one of digits '<span class=\"tex-font-style-tt\">0</span>'\u2013'<span class=\"tex-font-style-tt\">9</span>'.</p><p>The <span class=\"tex-span\"><i>i</i></span>-th of next <span class=\"tex-span\"><i>q</i></span> lines contains two integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>b</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>n</i></span>), describing a substring in the <span class=\"tex-span\"><i>i</i></span>-th query.</p>",
    "outputSpecification": "<p>For each query print the ugliness of the given substring.</p>",
    "samples": [
        {
            "input": "8 3<br/>20166766<br/>1 8<br/>1 7<br/>2 8<br/>",
            "output": "4<br/>3<br/>-1<br/>"
        },
        {
            "input": "15 5<br/>012016662091670<br/>3 4<br/>1 14<br/>4 15<br/>1 13<br/>10 15<br/>",
            "output": "-1<br/>2<br/>1<br/>-1<br/>-1<br/>"
        },
        {
            "input": "4 2<br/>1234<br/>2 4<br/>1 2<br/>",
            "output": "-1<br/>-1<br/>"
        }
    ],
    "note": "<p>In the first sample:</p><ul> <li> In the first query, <span class=\"tex-span\"><i>ugliness</i>(</span>\"<span class=\"tex-font-style-tt\">20166766</span>\"<span class=\"tex-span\">)\u2009=\u20094</span> because all four sixes must be removed. </li><li> In the second query, <span class=\"tex-span\"><i>ugliness</i>(</span>\"<span class=\"tex-font-style-tt\">2016676</span>\"<span class=\"tex-span\">)\u2009=\u20093</span> because all three sixes must be removed. </li><li> In the third query, <span class=\"tex-span\"><i>ugliness</i>(</span>\"<span class=\"tex-font-style-tt\">0166766</span>\"<span class=\"tex-span\">)\u2009=\u2009\u2009-\u20091</span> because it's impossible to remove some digits to get a nice string. </li></ul><p>In the second sample:</p><ul> <li> In the second query, <span class=\"tex-span\"><i>ugliness</i>(</span>\"<span class=\"tex-font-style-tt\">01201666209167</span>\"<span class=\"tex-span\">)\u2009=\u20092</span>. It's optimal to remove the first digit '<span class=\"tex-font-style-tt\">2</span>' and the last digit '<span class=\"tex-font-style-tt\">6</span>', what gives a string \"<span class=\"tex-font-style-tt\">010166620917</span>\", which is nice. </li><li> In the third query, <span class=\"tex-span\"><i>ugliness</i>(</span>\"<span class=\"tex-font-style-tt\">016662091670</span>\"<span class=\"tex-span\">)\u2009=\u20091</span>. It's optimal to remove the last digit '<span class=\"tex-font-style-tt\">6</span>', what gives a nice string \"<span class=\"tex-font-style-tt\">01666209170</span>\". </li></ul>",
    "contestId": 750,
    "index": "E",
    "name": "New Year and Old Subsequence",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "divide and conquer",
        "dp",
        "matrices"
    ],
    "solvedCount": 1470
}