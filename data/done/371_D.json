{
    "title": "D. Vessels",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>There is a system of <span class=\"tex-span\"><i>n</i></span> vessels arranged one above the other as shown in the figure below. Assume that the vessels are numbered from 1 to <span class=\"tex-span\"><i>n</i></span>, in the order from the highest to the lowest, the volume of the <span class=\"tex-span\"><i>i</i></span>-th vessel is <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> liters.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/0db7b83cd355ec1a3d336117e286565b519900cc.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>Initially, all the vessels are empty. In some vessels water is poured. All the water that overflows from the <span class=\"tex-span\"><i>i</i></span>-th vessel goes to the <span class=\"tex-span\">(<i>i</i>\u2009+\u20091)</span>-th one. The liquid that overflows from the <span class=\"tex-span\"><i>n</i></span>-th vessel spills on the floor.</p><p>Your task is to simulate pouring water into the vessels. To do this, you will need to handle two types of queries:</p><ol> <li> Add <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> liters of water to the <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>i</i></sub></span>-th vessel; </li><li> Print the number of liters of water in the <span class=\"tex-span\"><i>k</i><sub class=\"lower-index\"><i>i</i></sub></span>-th vessel. </li></ol><p>When you reply to the second request you can assume that all the water poured up to this point, has already overflown between the vessels.</p>",
    "inputSpecification": "<p>The first line contains integer <span class=\"tex-span\"><i>n</i></span> \u2014 the number of vessels (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20092\u00b710<sup class=\"upper-index\">5</sup></span>). The second line contains <span class=\"tex-span\"><i>n</i></span> integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> \u2014 the vessels' capacities (<span class=\"tex-span\">1\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">9</sup></span>). The vessels' capacities do not necessarily increase from the top vessels to the bottom ones (see the second sample). The third line contains integer <span class=\"tex-span\"><i>m</i></span> \u2014 the number of queries (<span class=\"tex-span\">1\u2009\u2264\u2009<i>m</i>\u2009\u2264\u20092\u00b710<sup class=\"upper-index\">5</sup></span>). Each of the next <span class=\"tex-span\"><i>m</i></span> lines contains the description of one query. The query of the first type is represented as \"<span class=\"tex-span\">1\u00a0<i>p</i><sub class=\"lower-index\"><i>i</i></sub>\u00a0<i>x</i><sub class=\"lower-index\"><i>i</i></sub></span>\", the query of the second type is represented as \"<span class=\"tex-span\">2\u00a0<i>k</i><sub class=\"lower-index\"><i>i</i></sub></span>\" (<span class=\"tex-span\">1\u2009\u2264\u2009<i>p</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>n</i></span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>x</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">9</sup></span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>k</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>n</i></span>).</p>",
    "outputSpecification": "<p>For each query, print on a single line the number of liters of water in the corresponding vessel.</p>",
    "samples": [
        {
            "input": "2<br/>5 10<br/>6<br/>1 1 4<br/>2 1<br/>1 2 5<br/>1 1 4<br/>2 1<br/>2 2<br/>",
            "output": "4<br/>5<br/>8<br/>"
        },
        {
            "input": "3<br/>5 10 8<br/>6<br/>1 1 12<br/>2 2<br/>1 1 6<br/>1 3 2<br/>2 2<br/>2 3<br/>",
            "output": "7<br/>10<br/>5<br/>"
        }
    ],
    "note": null,
    "contestId": 371,
    "index": "D",
    "name": "Vessels",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "dsu",
        "implementation",
        "trees"
    ],
    "solvedCount": 5389
}