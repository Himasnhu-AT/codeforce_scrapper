{
    "title": "C. Read Time",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Mad scientist Mike does not use slow hard disks. His modification of a hard drive has not one, but <span class=\"tex-span\"><i>n</i></span> different heads that can read data in parallel.</p><p>When viewed from the side, Mike's hard drive is an endless array of tracks. The tracks of the array are numbered from left to right with integers, starting with 1. In the initial state the <span class=\"tex-span\"><i>i</i></span>-th reading head is above the track number <span class=\"tex-span\"><i>h</i><sub class=\"lower-index\"><i>i</i></sub></span>. For each of the reading heads, the hard drive's firmware can move the head exactly one track to the right or to the left, or leave it on the current track. During the operation each head's movement does not affect the movement of the other heads: the heads can change their relative order; there can be multiple reading heads above any of the tracks. A track is considered <span class=\"tex-font-style-underline\">read</span> if at least one head has visited this track. In particular, all of the tracks numbered <span class=\"tex-span\"><i>h</i><sub class=\"lower-index\">1</sub></span>, <span class=\"tex-span\"><i>h</i><sub class=\"lower-index\">2</sub></span>, <span class=\"tex-span\">...</span>, <span class=\"tex-span\"><i>h</i><sub class=\"lower-index\"><i>n</i></sub></span> have been read at the beginning of the operation.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/74f1fe19c026065f690c4ac1646b3951b4afb6ea.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>Mike needs to read the data on <span class=\"tex-span\"><i>m</i></span> distinct tracks with numbers <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\">1</sub></span>, <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\">2</sub></span>, <span class=\"tex-span\">...</span>, <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>m</i></sub></span>. Determine the minimum time the hard drive firmware needs to move the heads and read all the given tracks. Note that an arbitrary number of other tracks can also be read.</p>",
    "inputSpecification": "<p>The first line of the input contains two space-separated integers <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>,\u2009<i>m</i>\u2009\u2264\u200910<sup class=\"upper-index\">5</sup></span>) \u2014 the number of disk heads and the number of tracks to read, accordingly. The second line contains <span class=\"tex-span\"><i>n</i></span> distinct integers <span class=\"tex-span\"><i>h</i><sub class=\"lower-index\"><i>i</i></sub></span> in ascending order (<span class=\"tex-span\">1\u2009\u2264\u2009<i>h</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">10</sup></span>, <span class=\"tex-span\"><i>h</i><sub class=\"lower-index\"><i>i</i></sub>\u2009&lt;\u2009<i>h</i><sub class=\"lower-index\"><i>i</i>\u2009+\u20091</sub></span>) \u2014 the initial positions of the heads. The third line contains <span class=\"tex-span\"><i>m</i></span> distinct integers <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>i</i></sub></span> in ascending order (<span class=\"tex-span\">1\u2009\u2264\u2009<i>p</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">10</sup></span>, <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>i</i></sub>\u2009&lt;\u2009<i>p</i><sub class=\"lower-index\"><i>i</i>\u2009+\u20091</sub></span>) - the numbers of tracks to read.</p><p>Please, do not use the <span class=\"tex-font-style-tt\">%lld</span> specifier to read or write 64-bit integers in \u0421++. It is recommended to use the <span class=\"tex-font-style-tt\">cin</span>, <span class=\"tex-font-style-tt\">cout</span> streams or the <span class=\"tex-font-style-tt\">%I64d</span> specifier.</p>",
    "outputSpecification": "<p>Print a single number \u2014 the minimum time required, in seconds, to read all the needed tracks.</p>",
    "samples": [
        {
            "input": "3 4<br/>2 5 6<br/>1 3 6 8<br/>",
            "output": "2<br/>"
        },
        {
            "input": "3 3<br/>1 2 3<br/>1 2 3<br/>",
            "output": "0<br/>"
        },
        {
            "input": "1 2<br/>165<br/>142 200<br/>",
            "output": "81<br/>"
        }
    ],
    "note": "<p>The first test coincides with the figure. In this case the given tracks can be read in 2 seconds in the following way: </p><ol> <li> during the first second move the 1-st head to the left and let it stay there; </li><li> move the second head to the left twice; </li><li> move the third head to the right twice (note that the 6-th track has already been read at the beginning). </li></ol><p>One cannot read the tracks in 1 second as the 3-rd head is at distance 2 from the 8-th track.</p>",
    "contestId": 343,
    "index": "C",
    "name": "Read Time",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "greedy",
        "two pointers"
    ],
    "solvedCount": 2911
}