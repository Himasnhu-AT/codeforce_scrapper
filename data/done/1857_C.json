{
    "title": "C. Assembly via Minimums",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Sasha has an array $$$a$$$ of $$$n$$$ integers. He got bored and for all $$$i$$$, $$$j$$$ ($$$i &lt; j$$$), he wrote down the minimum value of $$$a_i$$$ and $$$a_j$$$. He obtained a new array $$$b$$$ of size $$$\\frac{n\\cdot (n-1)}{2}$$$.</p><p>For example, if $$$a=$$$ [$$$2,3,5,1$$$], he would write [$$$\\min(2, 3), \\min(2, 5), \\min(2, 1), \\min(3, 5), \\min(3, 1), min(5, 1)$$$] $$$=$$$ [$$$2, 2, 1, 3, 1, 1$$$].</p><p>Then, he randomly <span class=\"tex-font-style-bf\">shuffled</span> all the elements of the array $$$b$$$.</p><p>Unfortunately, he forgot the array $$$a$$$, and your task is to restore any possible array $$$a$$$ from which the array $$$b$$$ could have been obtained.</p><p><span class=\"tex-font-style-bf\">The elements of array $$$a$$$ should be in the range $$$[-10^9,10^9]$$$</span>.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1\\le t\\le 200$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$2\\le n\\le 10^3$$$)\u00a0\u2014 the length of array $$$a$$$.</p><p>The second line of each test case contains $$$\\frac{n\\cdot (n-1)}{2}$$$ integers $$$b_1,b_2,\\dots,b_{\\frac{n\\cdot (n-1)}{2}}$$$ ($$$\u221210^9\\le b_i\\le 10^9$$$)\u00a0\u2014 the elements of array $$$b$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all tests does not exceed $$$10^3$$$ and for each array $$$b$$$ in the test, there exists an original array.</p>",
    "outputSpecification": "<p>For each test case, output any possible array $$$a$$$ of length $$$n$$$.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">7 5 3 5 3 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 2 2 2 2 2 2 2 2 2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3 0 0 -2 0 -2 0 0 -2 -2</div>",
            "output": "\n1 3 3\n10 10\n7 5 3 12\n2 2 2 2 2\n0 -2 0 3 5"
        }
    ],
    "note": "<p>In the first sample, Sasha chose the array $$$[1,3,3]$$$, then the array $$$b$$$ will look like $$$[\\min(a_1,a_2)=1, \\min(a_1,a_3)=1, \\min(a_2,a_3)=3]$$$, after shuffling its elements, the array can look like $$$[1,3,1]$$$.</p><p>In the second sample, there is only one pair, so the array $$$[10,10]$$$ is suitable. Another suitable array could be $$$[15,10]$$$.</p>",
    "contestId": 1857,
    "index": "C",
    "name": "Assembly via Minimums",
    "type": "PROGRAMMING",
    "tags": [
        "greedy",
        "sortings"
    ],
    "solvedCount": 23621
}