{
    "title": "C. Robot in a Hallway",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>There is a grid, consisting of $$$2$$$ rows and $$$m$$$ columns. The rows are numbered from $$$1$$$ to $$$2$$$ from top to bottom. The columns are numbered from $$$1$$$ to $$$m$$$ from left to right.</p><p>The robot starts in a cell $$$(1, 1)$$$. In one second, it can perform either of two actions: </p><ul> <li> move into a cell adjacent by a side: up, right, down or left; </li><li> remain in the same cell. </li></ul><p>The robot is not allowed to move outside the grid.</p><p>Initially, all cells, except for the cell $$$(1, 1)$$$, are locked. Each cell $$$(i, j)$$$ contains a value $$$a_{i,j}$$$\u00a0\u2014 the moment that this cell gets unlocked. The robot can only move into a cell $$$(i, j)$$$ if at least $$$a_{i,j}$$$ seconds have passed before the move.</p><p>The robot should visit all cells <span class=\"tex-font-style-bf\">without entering any cell twice or more</span> (cell $$$(1, 1)$$$ is considered entered at the start). It can finish in any cell.</p><p>What is the fastest the robot can achieve that?</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of testcases.</p><p>The first line of each testcase contains a single integer $$$m$$$ ($$$2 \\le m \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the number of columns of the grid.</p><p>The $$$i$$$-th of the next $$$2$$$ lines contains $$$m$$$ integers $$$a_{i,1}, a_{i,2}, \\dots, a_{i,m}$$$ ($$$0 \\le a_{i,j} \\le 10^9$$$)\u00a0\u2014 the moment of time each cell gets unlocked. $$$a_{1,1} = 0$$$. If $$$a_{i,j} = 0$$$, then cell $$$(i, j)$$$ is unlocked from the start.</p><p>The sum of $$$m$$$ over all testcases doesn't exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each testcase, print a single integer\u00a0\u2014 the minimum amount of seconds that the robot can take to visit all cells without entering any cell twice or more.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">0 0 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 3 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">0 4 8 12 16</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 6 10 14 18</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">0 10 10 10</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">10 10 10 10</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">0 0</div><div class=\"test-example-line test-example-line-even test-example-line-4\">0 0</div>",
            "output": "\n5\n19\n17\n3\n"
        }
    ],
    "note": null,
    "contestId": 1716,
    "index": "C",
    "name": "Robot in a Hallway",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "dp",
        "greedy",
        "implementation",
        "ternary search"
    ],
    "solvedCount": 4043
}