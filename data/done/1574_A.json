{
    "title": "A. Regular Bracket Sequences",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 512.0,
        "unit": "megabytes"
    },
    "statement": "<p>A bracket sequence is a string containing only characters \"<span class=\"tex-font-style-tt\">(</span>\" and \"<span class=\"tex-font-style-tt\">)</span>\". A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"<span class=\"tex-font-style-tt\">1</span>\" and \"<span class=\"tex-font-style-tt\">+</span>\" between the original characters of the sequence. For example, bracket sequences \"<span class=\"tex-font-style-tt\">()()</span>\" and \"<span class=\"tex-font-style-tt\">(())</span>\" are regular (the resulting expressions are: \"<span class=\"tex-font-style-tt\">(1)+(1)</span>\" and \"<span class=\"tex-font-style-tt\">((1+1)+1)</span>\"), and \"<span class=\"tex-font-style-tt\">)(</span>\", \"<span class=\"tex-font-style-tt\">(</span>\" and \"<span class=\"tex-font-style-tt\">)</span>\" are not.</p><p>You are given an integer $$$n$$$. Your goal is to construct and print <span class=\"tex-font-style-bf\">exactly $$$n$$$</span> different regular bracket sequences of length $$$2n$$$.</p>",
    "inputSpecification": "<p>The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 50$$$) \u2014 the number of test cases.</p><p>Each test case consists of one line containing one integer $$$n$$$ ($$$1 \\le n \\le 50$$$).</p>",
    "outputSpecification": "<p>For each test case, print $$$n$$$ lines, each containing a regular bracket sequence of length <span class=\"tex-font-style-bf\">exactly $$$2n$$$</span>. All bracket sequences you output for a testcase should be different (though they may repeat in different test cases). If there are multiple answers, print any of them. It can be shown that it's always possible.</p>",
    "samples": [
        {
            "input": "\n3\n3\n1\n3\n",
            "output": "\n()()()\n((()))\n(()())\n()\n((()))\n(())()\n()(())\n"
        }
    ],
    "note": null,
    "contestId": 1574,
    "index": "A",
    "name": "Regular Bracket Sequences",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms"
    ],
    "solvedCount": 21469
}