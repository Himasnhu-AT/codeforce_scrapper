{
    "title": "B. Text Document Analysis",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Modern text editors usually show some information regarding the document being edited. For example, the number of words, the number of pages, or the number of characters.</p><p>In this problem you should implement the similar functionality.</p><p>You are given a string which only consists of:</p><ul> <li> uppercase and lowercase English letters, </li><li> underscore symbols (they are used as separators), </li><li> parentheses (both opening and closing). </li></ul><p>It is guaranteed that each opening parenthesis has a succeeding closing parenthesis. Similarly, each closing parentheses has a preceding opening parentheses matching it. For each pair of matching parentheses there are no other parenthesis between them. In other words, each parenthesis in the string belongs to a matching \"opening-closing\" pair, and such pairs can't be nested.</p><p>For example, the following string is valid: \"<span class=\"tex-font-style-tt\">_Hello_Vasya(and_Petya)__bye_(and_OK)</span>\".</p><p><span class=\"tex-font-style-it\">Word</span> is a maximal sequence of consecutive letters, i.e. such sequence that the first character to the left and the first character to the right of it is an underscore, a parenthesis, or it just does not exist. For example, the string above consists of seven words: \"<span class=\"tex-font-style-tt\">Hello</span>\", \"<span class=\"tex-font-style-tt\">Vasya</span>\", \"<span class=\"tex-font-style-tt\">and</span>\", \"<span class=\"tex-font-style-tt\">Petya</span>\", \"<span class=\"tex-font-style-tt\">bye</span>\", \"<span class=\"tex-font-style-tt\">and</span>\" and \"<span class=\"tex-font-style-tt\">OK</span>\". Write a program that finds:</p><ul> <li> the length of the longest word outside the parentheses (print <span class=\"tex-font-style-tt\">0</span>, if there is no word outside the parentheses), </li><li> the number of words inside the parentheses (print <span class=\"tex-font-style-tt\">0</span>, if there is no word inside the parentheses). </li></ul>",
    "inputSpecification": "<p>The first line of the input contains a single integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u2009255</span>)\u00a0\u2014 the length of the given string. The second line contains the string consisting of only lowercase and uppercase English letters, parentheses and underscore symbols. </p>",
    "outputSpecification": "<p>Print two space-separated integers:</p><ul> <li> the length of the longest word outside the parentheses (print <span class=\"tex-font-style-tt\">0</span>, if there is no word outside the parentheses), </li><li> the number of words inside the parentheses (print <span class=\"tex-font-style-tt\">0</span>, if there is no word inside the parentheses). </li></ul>",
    "samples": [
        {
            "input": "37<br/>_Hello_Vasya(and_Petya)__bye_(and_OK)<br/>",
            "output": "5 4"
        },
        {
            "input": "37<br/>_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__<br/>",
            "output": "2 6"
        },
        {
            "input": "27<br/>(LoooonG)__shOrt__(LoooonG)<br/>",
            "output": "5 2"
        },
        {
            "input": "5<br/>(___)<br/>",
            "output": "0 0<br/>"
        }
    ],
    "note": "<p>In the first sample, the words \"<span class=\"tex-font-style-tt\">Hello</span>\", \"<span class=\"tex-font-style-tt\">Vasya</span>\" and \"<span class=\"tex-font-style-tt\">bye</span>\" are outside any of the parentheses, and the words \"<span class=\"tex-font-style-tt\">and</span>\", \"<span class=\"tex-font-style-tt\">Petya</span>\", \"<span class=\"tex-font-style-tt\">and</span>\" and \"<span class=\"tex-font-style-tt\">OK</span>\" are inside. Note, that the word \"<span class=\"tex-font-style-tt\">and</span>\" is given twice and you should count it twice in the answer.</p>",
    "contestId": 723,
    "index": "B",
    "name": "Text Document Analysis",
    "type": "PROGRAMMING",
    "tags": [
        "expression parsing",
        "implementation",
        "strings"
    ],
    "solvedCount": 10093
}