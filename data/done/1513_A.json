{
    "title": "A. Array and Peaks",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>A sequence of $$$n$$$ integers is called a permutation if it contains all integers from $$$1$$$ to $$$n$$$ exactly once.</p><p>Given two integers $$$n$$$ and $$$k$$$, construct a permutation $$$a$$$ of numbers from $$$1$$$ to $$$n$$$ which has <span class=\"tex-font-style-bf\">exactly</span> $$$k$$$ peaks. An index $$$i$$$ of an array $$$a$$$ of size $$$n$$$ is said to be a peak if $$$1 &lt; i &lt; n$$$ and $$$a_i \\gt a_{i-1}$$$ and $$$a_i \\gt a_{i+1}$$$. If such permutation is not possible, then print $$$-1$$$.</p>",
    "inputSpecification": "<p>The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$)\u00a0\u2014 the number of test cases.</p><p>Then $$$t$$$ lines follow, each containing two space-separated integers $$$n$$$ ($$$1 \\leq n \\leq 100$$$) and $$$k$$$ ($$$0 \\leq k \\leq n$$$)\u00a0\u2014 the length of an array and the required number of peaks.</p>",
    "outputSpecification": "<p>Output $$$t$$$ lines. For each test case, if there is no permutation with given length and number of peaks, then print $$$-1$$$. Otherwise print a line containing $$$n$$$ space-separated integers which forms a permutation of numbers from $$$1$$$ to $$$n$$$ and contains exactly $$$k$$$ peaks. </p><p>If there are multiple answers, print any.</p>",
    "samples": [
        {
            "input": "\n5\n1 0\n5 2\n6 6\n2 1\n6 1\n",
            "output": "\n1 \n2 4 1 5 3 \n-1\n-1\n1 3 6 5 4 2\n"
        }
    ],
    "note": "<p>In the second test case of the example, we have array $$$a = [2,4,1,5,3]$$$. Here, indices $$$i=2$$$ and $$$i=4$$$ are the peaks of the array. This is because $$$(a_{2} \\gt a_{1} $$$, $$$a_{2} \\gt a_{3})$$$ and $$$(a_{4} \\gt a_{3}$$$, $$$a_{4} \\gt a_{5})$$$. </p>",
    "contestId": 1513,
    "index": "A",
    "name": "Array and Peaks",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "solvedCount": 19206
}