{
    "title": "A. Shaass and Oskols",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Shaass has decided to hunt some birds. There are <span class=\"tex-span\"><i>n</i></span> horizontal electricity wires aligned parallel to each other. Wires are numbered <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span> from top to bottom. On each wire there are some oskols sitting next to each other. Oskol is the name of a delicious kind of birds in Shaass's territory. Supposed there are <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> oskols sitting on the <span class=\"tex-span\"><i>i</i></span>-th wire.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/0f0b26dc7ab155442b37a92c6ebc2dee9c84f077.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>Sometimes Shaass shots one of the birds and the bird dies (suppose that this bird sat at the <span class=\"tex-span\"><i>i</i></span>-th wire). Consequently all the birds on the <span class=\"tex-span\"><i>i</i></span>-th wire to the left of the dead bird get scared and jump up on the wire number <span class=\"tex-span\"><i>i</i>\u2009-\u20091</span>, if there exists no upper wire they fly away. Also all the birds to the right of the dead bird jump down on wire number <span class=\"tex-span\"><i>i</i>\u2009+\u20091</span>, if there exists no such wire they fly away. </p><p>Shaass has shot <span class=\"tex-span\"><i>m</i></span> birds. You're given the initial number of birds on each wire, tell him how many birds are sitting on each wire after the shots.</p>",
    "inputSpecification": "<p>The first line of the input contains an integer <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\">(1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u2009100)</span>. The next line contains a list of space-separated integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span>, <span class=\"tex-span\">(0\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009100)</span>. </p><p>The third line contains an integer <span class=\"tex-span\"><i>m</i></span>, <span class=\"tex-span\">(0\u2009\u2264\u2009<i>m</i>\u2009\u2264\u2009100)</span>. Each of the next <span class=\"tex-span\"><i>m</i></span> lines contains two integers <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>i</i></sub></span>. The integers mean that for the <span class=\"tex-span\"><i>i</i></span>-th time Shaass shoot the <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>i</i></sub></span>-th (from left) bird on the <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span>-th wire, <span class=\"tex-span\">(1\u2009\u2264\u2009<i>x</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>n</i>,\u20091\u2009\u2264\u2009<i>y</i><sub class=\"lower-index\"><i>i</i></sub>)</span>. It's guaranteed there will be at least <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>i</i></sub></span> birds on the <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span>-th wire at that moment.</p>",
    "outputSpecification": "<p>On the <span class=\"tex-span\"><i>i</i></span>-th line of the output print the number of birds on the <span class=\"tex-span\"><i>i</i></span>-th wire.</p>",
    "samples": [
        {
            "input": "5<br/>10 10 10 10 10<br/>5<br/>2 5<br/>3 13<br/>2 12<br/>1 13<br/>4 6<br/>",
            "output": "0<br/>12<br/>5<br/>0<br/>16<br/>"
        },
        {
            "input": "3<br/>2 4 1<br/>1<br/>2 2<br/>",
            "output": "3<br/>0<br/>3<br/>"
        }
    ],
    "note": null,
    "contestId": 294,
    "index": "A",
    "name": "Shaass and Oskols",
    "type": "PROGRAMMING",
    "tags": [
        "implementation",
        "math"
    ],
    "solvedCount": 22434
}