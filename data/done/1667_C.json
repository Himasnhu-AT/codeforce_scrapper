{
    "title": "C. Half Queen Cover",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a board with $$$n$$$ rows and $$$n$$$ columns, numbered from $$$1$$$ to $$$n$$$. The intersection of the $$$a$$$-th row and $$$b$$$-th column is denoted by $$$(a, b)$$$.</p><p>A half-queen attacks cells in the same row, same column, and on one diagonal. More formally, a half-queen on $$$(a, b)$$$ attacks the cell $$$(c, d)$$$ if $$$a=c$$$ or $$$b=d$$$ or $$$a-b=c-d$$$.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/4b4a0df65f37f3a376355ee9f3447b4e1eb66138.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> <span class=\"tex-font-size-small\">The blue cells are under attack.</span> </center> What is the minimum number of half-queens that can be placed on that board so as to ensure that each square is attacked by at least one half-queen?<p>Construct an optimal solution.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) \u2014 the size of the board.</p>",
    "outputSpecification": "<p>In the first line print a single integer $$$k$$$ \u2014 the minimum number of half-queens.</p><p>In each of the next $$$k$$$ lines print two integers $$$a_i$$$, $$$b_i$$$ ($$$1 \\le a_i, b_i \\le n$$$) \u2014 the position of the $$$i$$$-th half-queen.</p><p>If there are multiple solutions, print any.</p>",
    "samples": [
        {
            "input": "\n1\n",
            "output": "\n1\n1 1\n"
        },
        {
            "input": "\n2\n",
            "output": "\n1\n1 1\n"
        },
        {
            "input": "\n3\n",
            "output": "\n2\n1 1\n1 2\n"
        }
    ],
    "note": "<p>Example $$$1$$$: one half-queen is enough. Note: a half-queen on $$$(1, 1)$$$ attacks $$$(1, 1)$$$.</p><p>Example $$$2$$$: one half-queen is enough too. $$$(1, 2)$$$ or $$$(2, 1)$$$ would be wrong solutions, because a half-queen on $$$(1, 2)$$$ does not attack the cell $$$(2, 1)$$$ and vice versa. $$$(2, 2)$$$ is also a valid solution.</p><p>Example $$$3$$$: it is impossible to cover the board with one half queen. There are multiple solutions for $$$2$$$ half-queens; you can print any of them.</p>",
    "contestId": 1667,
    "index": "C",
    "name": "Half Queen Cover",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "solvedCount": 1531
}