{
    "title": "G. Pepe Racing",
    "timeLimit": {
        "value": 5.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p><span class=\"tex-font-style-it\">This is an interactive problem.</span></p><p>There are $$$n^2$$$ pepes labeled $$$1, 2, \\ldots, n^2$$$ with <span class=\"tex-font-style-bf\">pairwise distinct</span> speeds. You would like to set up some races to find out the relative speed of these pepes.</p><p>In one race, you can choose exactly $$$n$$$ distinct pepes and make them race against each other. After each race, you will only know the <span class=\"tex-font-style-bf\">fastest</span> pepe of these $$$n$$$ pepes.</p><p>Can you order the $$$n^2-n+1$$$ fastest pepes in <span class=\"tex-font-style-bf\">at most</span> $$$2n^2 - 2n + 1$$$ races? Note that the slowest $$$n - 1$$$ pepes are indistinguishable from each other.</p><p>Note that the interactor is <span class=\"tex-font-style-bf\">adaptive</span>. That is, the relative speeds of the pepes are not fixed in the beginning and may depend on your queries. But it is guaranteed that at any moment there is at least one initial configuration of pepes such that all the answers to the queries are consistent.</p>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). The description of the test cases follows.</p><p>The only line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 20$$$)\u00a0\u2014 the number of pepes in one race.</p><p>After reading the integer $$$n$$$ for each test case, you should begin the interaction.</p><p>It is guaranteed that the sum of $$$n^3$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.</p>",
    "outputSpecification": null,
    "samples": [
        {
            "input": "\n1\n2\n\n2\n\n4\n\n4\n\n3\n\n2",
            "output": "\n\n\n? 1 2\n\n? 3 4\n\n? 2 4\n\n? 2 3\n\n? 2 1\n\n! 4 3 2"
        }
    ],
    "note": null,
    "contestId": 1896,
    "index": "G",
    "name": "Pepe Racing",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "implementation",
        "interactive",
        "sortings"
    ],
    "solvedCount": 313
}