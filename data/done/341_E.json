{
    "title": "E. Candies Game",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Iahub is playing an uncommon game. Initially, he has <span class=\"tex-span\"><i>n</i></span> boxes, numbered 1, 2, 3, <span class=\"tex-span\">...</span>, <span class=\"tex-span\"><i>n</i></span>. Each box has some number of candies in it, described by a sequence <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub></span>, <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">2</sub></span>, <span class=\"tex-span\">...</span>, <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>n</i></sub></span>. The number <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>k</i></sub></span> represents the number of candies in box <span class=\"tex-span\"><i>k</i></span>. </p><p>The goal of the game is to move all candies into <span class=\"tex-font-style-bf\">exactly</span> two boxes. The rest of <span class=\"tex-span\"><i>n</i>\u2009-\u20092</span> boxes must contain <span class=\"tex-font-style-bf\">zero</span> candies. Iahub is allowed to do several (possible zero) moves. At each move he chooses two different boxes <span class=\"tex-span\"><i>i</i></span> and <span class=\"tex-span\"><i>j</i></span>, such that <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>j</i></sub></span>. Then, Iahub moves from box <span class=\"tex-span\"><i>j</i></span> to box <span class=\"tex-span\"><i>i</i></span> exactly <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> candies. Obviously, when two boxes have equal number of candies, box number <span class=\"tex-span\"><i>j</i></span> becomes empty.</p><p>Your task is to give him a set of moves such as Iahub to archive the goal of the game. If Iahub can't win the game for the given configuration of boxes, output -1. Please note that in case there exist a solution, you don't need to print the solution using minimal number of moves.</p>",
    "inputSpecification": "<p>The first line of the input contains integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">3\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20091000</span>). The next line contains <span class=\"tex-span\"><i>n</i></span> non-negative integers: <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> \u2014 sequence elements. It is guaranteed that sum of all numbers in sequence <span class=\"tex-span\"><i>a</i></span> is up to <span class=\"tex-span\">10<sup class=\"upper-index\">6</sup></span>. </p>",
    "outputSpecification": "<p>In case there exists no solution, output -1. Otherwise, in the first line output integer <span class=\"tex-span\"><i>c</i></span> <span class=\"tex-span\">(0\u2009\u2264\u2009<i>c</i>\u2009\u2264\u200910<sup class=\"upper-index\">6</sup>)</span>, representing number of moves in your solution. Each of the next <span class=\"tex-span\"><i>c</i></span> lines should contain two integers <span class=\"tex-span\"><i>i</i></span> and <span class=\"tex-span\"><i>j</i></span> <span class=\"tex-span\">(1\u2009\u2264\u2009<i>i</i>,\u2009<i>j</i>\u2009\u2264\u2009<i>n</i>,\u2009<i>i</i>\u2009\u2260\u2009<i>j</i>)</span>: integers <span class=\"tex-span\"><i>i</i></span>, <span class=\"tex-span\"><i>j</i></span> in the <span class=\"tex-span\"><i>k</i></span>th line mean that at the <span class=\"tex-span\"><i>k</i></span>-th move you will move candies from the <span class=\"tex-span\"><i>j</i></span>-th box to the <span class=\"tex-span\"><i>i</i></span>-th one.</p>",
    "samples": [
        {
            "input": "3<br/>3 6 9<br/>",
            "output": "2<br/>2 3<br/>1 3<br/>"
        },
        {
            "input": "3<br/>0 1 0<br/>",
            "output": "-1"
        },
        {
            "input": "4<br/>0 1 1 0<br/>",
            "output": "0<br/>"
        }
    ],
    "note": "<p>For the first sample, after the first move the boxes will contain 3, 12 and 3 candies. After the second move, the boxes will contain 6, 12 and 0 candies. Now all candies are in exactly 2 boxes.</p><p>For the second sample, you can observe that the given configuration is not valid, as all candies are in a single box and they should be in two boxes. Also, any move won't change the configuration, so there exists no solution.</p><p>For the third sample, all candies are already in 2 boxes. Hence, no move is needed.</p>",
    "contestId": 341,
    "index": "E",
    "name": "Candies Game",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "solvedCount": 437
}