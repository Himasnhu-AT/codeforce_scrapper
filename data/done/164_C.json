{
    "title": "C. Machine Programming",
    "timeLimit": {
        "value": 5.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>One remarkable day company \"X\" received <span class=\"tex-span\"><i>k</i></span> machines. And they were not simple machines, they were mechanical programmers! This was the last unsuccessful step before switching to android programmers, but that's another story.</p><p>The company has now <span class=\"tex-span\"><i>n</i></span> tasks, for each of them we know the start time of its execution <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span>, the duration of its execution <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub></span>, and the company profit from its completion <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span>. Any machine can perform any task, exactly one at a time. If a machine has started to perform the task, it is busy at all moments of time from <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span> to <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub>\u2009+\u2009<i>t</i><sub class=\"lower-index\"><i>i</i></sub>\u2009-\u20091</span>, inclusive, and it cannot switch to another task.</p><p>You are required to select a set of tasks which can be done with these <span class=\"tex-span\"><i>k</i></span> machines, and which will bring the maximum total profit.</p>",
    "inputSpecification": "<p>The first line contains two integer numbers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20091000</span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>k</i>\u2009\u2264\u200950</span>) \u2014 the numbers of tasks and machines, correspondingly.</p><p>The next <span class=\"tex-span\"><i>n</i></span> lines contain space-separated groups of three integers <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub>,\u2009<i>t</i><sub class=\"lower-index\"><i>i</i></sub>,\u2009<i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>s</i><sub class=\"lower-index\"><i>i</i></sub>,\u2009<i>t</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">9</sup></span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>c</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">6</sup></span>), <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span> is the time where they start executing the <span class=\"tex-span\"><i>i</i></span>-th task, <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub></span> is the duration of the <span class=\"tex-span\"><i>i</i></span>-th task and <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> is the profit of its execution.</p>",
    "outputSpecification": "<p>Print <span class=\"tex-span\"><i>n</i></span> integers <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\">1</sub>,\u2009<i>x</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>x</i><sub class=\"lower-index\"><i>n</i></sub></span>. Number <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> should equal <span class=\"tex-span\">1</span>, if task <span class=\"tex-span\"><i>i</i></span> should be completed and otherwise it should equal <span class=\"tex-span\">0</span>.</p><p>If there are several optimal solutions, print any of them.</p>",
    "samples": [
        {
            "input": "3 1<br/>2 7 5<br/>1 3 3<br/>4 1 3<br/>",
            "output": "0 1 1<br/>"
        },
        {
            "input": "5 2<br/>1 5 4<br/>1 4 5<br/>1 3 2<br/>4 1 2<br/>5 6 1<br/>",
            "output": "1 1 0 0 1<br/>"
        }
    ],
    "note": "<p>In the first sample the tasks need to be executed at moments of time 2 ... 8, 1 ... 3 and 4 ... 4, correspondingly. The first task overlaps with the second and the third ones, so we can execute either task one (profit 5) or tasks two and three (profit 6).</p>",
    "contestId": 164,
    "index": "C",
    "name": "Machine Programming",
    "type": "PROGRAMMING",
    "tags": [
        "flows",
        "graphs"
    ],
    "solvedCount": 878
}