{
    "title": "D. Tournament Construction",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 512.0,
        "unit": "megabytes"
    },
    "statement": "<p>Ivan is reading a book about tournaments. He knows that a tournament is an oriented graph with exactly one oriented edge between each pair of vertices. The score of a vertex is the number of edges going outside this vertex. </p><p>Yesterday Ivan learned Landau's criterion: there is tournament with scores <span class=\"tex-span\"><i>d</i><sub class=\"lower-index\">1</sub>\u2009\u2264\u2009<i>d</i><sub class=\"lower-index\">2</sub>\u2009\u2264\u2009...\u2009\u2264\u2009<i>d</i><sub class=\"lower-index\"><i>n</i></sub></span> if and only if <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/a30e638d8f9d5d38655abcbffbbcaf3a82dc7867.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> for all <span class=\"tex-span\">1\u2009\u2264\u2009<i>k</i>\u2009&lt;\u2009<i>n</i></span> and <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/39dff607f0a8d5f1887f9fc8ebe46e78ca3a8631.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p><p>Now, Ivan wanna solve following problem: given a <span class=\"tex-font-style-bf\">set</span> of numbers <span class=\"tex-span\"><i>S</i>\u2009=\u2009{<i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>m</i></sub>}</span>, is there a tournament with given set of scores? I.e. is there tournament with sequence of scores <span class=\"tex-span\"><i>d</i><sub class=\"lower-index\">1</sub>,\u2009<i>d</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>d</i><sub class=\"lower-index\"><i>n</i></sub></span> such that if we remove duplicates in scores, we obtain the required set <span class=\"tex-span\">{<i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>m</i></sub>}</span>? </p><p>Find a tournament with <span class=\"tex-font-style-bf\">minimum</span> possible number of vertices. </p>",
    "inputSpecification": "<p>The first line contains a single integer <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>m</i>\u2009\u2264\u200931</span>).</p><p>The next line contains <span class=\"tex-span\"><i>m</i></span> distinct integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>m</i></sub></span> (<span class=\"tex-span\">0\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200930</span>)\u00a0\u2014 elements of the set <span class=\"tex-span\"><i>S</i></span>. It is guaranteed that all elements of the set are distinct.</p>",
    "outputSpecification": "<p>If there are no such tournaments, print string \"<span class=\"tex-font-style-tt\">=(</span>\" (without quotes).</p><p>Otherwise, print an integer <span class=\"tex-span\"><i>n</i></span>\u00a0\u2014 the number of vertices in the tournament.</p><p>Then print <span class=\"tex-span\"><i>n</i></span> lines with <span class=\"tex-span\"><i>n</i></span> characters\u00a0\u2014 matrix of the tournament. The <span class=\"tex-span\"><i>j</i></span>-th element in the <span class=\"tex-span\"><i>i</i></span>-th row should be <span class=\"tex-span\">1</span> if the edge between the <span class=\"tex-span\"><i>i</i></span>-th and the <span class=\"tex-span\"><i>j</i></span>-th vertices is oriented towards the <span class=\"tex-span\"><i>j</i></span>-th vertex, and <span class=\"tex-span\">0</span> otherwise. The main diagonal should contain only zeros.</p>",
    "samples": [
        {
            "input": "2<br/>1 2<br/>",
            "output": "4<br/>0011<br/>1001<br/>0100<br/>0010<br/>"
        },
        {
            "input": "2<br/>0 3<br/>",
            "output": "6<br/>000111<br/>100011<br/>110001<br/>011001<br/>001101<br/>000000<br/>"
        }
    ],
    "note": null,
    "contestId": 850,
    "index": "D",
    "name": "Tournament Construction",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "dp",
        "graphs",
        "greedy",
        "math"
    ],
    "solvedCount": 374
}