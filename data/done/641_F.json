{
    "title": "F. Little Artem and 2-SAT",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Little Artem is a very smart programmer. He knows many different difficult algorithms. Recently he has mastered in <span class=\"tex-font-style-underline\">2-SAT</span> one.</p><p>In computer science, 2-satisfiability (abbreviated as <span class=\"tex-font-style-underline\">2-SAT</span>) is the special case of the problem of determining whether a conjunction (logical <span class=\"tex-font-style-underline\">AND</span>) of disjunctions (logical <span class=\"tex-font-style-underline\">OR</span>) have a solution, in which all disjunctions consist of no more than two arguments (variables). For the purpose of this problem we consider only <span class=\"tex-font-style-underline\">2-SAT</span> formulas where each disjunction consists of exactly two arguments.</p><p>Consider the following <span class=\"tex-font-style-underline\">2-SAT</span> problem as an example: <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/601704e7df7a37d9164f79c37cca99967e8cd046.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>. Note that there might be negations in <span class=\"tex-font-style-underline\">2-SAT</span> formula (like for <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\">1</sub></span> and for <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\">4</sub></span>).</p><p>Artem now tries to solve as many problems with <span class=\"tex-font-style-underline\">2-SAT</span> as possible. He found a very interesting one, which he can not solve yet. Of course, he asks you to help him. </p><p>The problem is: given two <span class=\"tex-font-style-underline\">2-SAT</span> formulas <span class=\"tex-span\"><i>f</i></span> and <span class=\"tex-span\"><i>g</i></span>, determine whether their sets of possible solutions are the same. Otherwise, find any variables assignment <span class=\"tex-span\"><i>x</i></span> such that <span class=\"tex-span\"><i>f</i>(<i>x</i>)\u2009\u2260\u2009<i>g</i>(<i>x</i>)</span>. </p>",
    "inputSpecification": "<p>The first line of the input contains three integers <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>m</i><sub class=\"lower-index\">1</sub></span> and <span class=\"tex-span\"><i>m</i><sub class=\"lower-index\">2</sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20091000</span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>m</i><sub class=\"lower-index\">1</sub>,\u2009<i>m</i><sub class=\"lower-index\">2</sub>\u2009\u2264\u2009<i>n</i><sup class=\"upper-index\">2</sup></span>)\u00a0\u2014 the number of variables, the number of disjunctions in the first formula and the number of disjunctions in the second formula, respectively.</p><p>Next <span class=\"tex-span\"><i>m</i><sub class=\"lower-index\">1</sub></span> lines contains the description of <span class=\"tex-font-style-underline\">2-SAT</span> formula <span class=\"tex-span\"><i>f</i></span>. The description consists of exactly <span class=\"tex-span\"><i>m</i><sub class=\"lower-index\">1</sub></span> pairs of integers <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">\u2009-\u2009<i>n</i>\u2009\u2264\u2009<i>x</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>n</i>,\u2009<i>x</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2260\u20090</span>) each on separate line, where <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub>\u2009&gt;\u20090</span> corresponds to the variable without negation, while <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub>\u2009&lt;\u20090</span> corresponds to the variable with negation. Each pair gives a single disjunction. Next <span class=\"tex-span\"><i>m</i><sub class=\"lower-index\">2</sub></span> lines contains formula <span class=\"tex-span\"><i>g</i></span> in the similar format.</p>",
    "outputSpecification": "<p>If both formulas share the same set of solutions, output a single word \"<span class=\"tex-font-style-tt\">SIMILAR</span>\" (without quotes). Otherwise output exactly <span class=\"tex-span\"><i>n</i></span> integers <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> (<img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/32e81dd1993925f1aa00ee976c0f800b6a7e43cd.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>)\u00a0\u2014 any set of values <span class=\"tex-span\"><i>x</i></span> such that <span class=\"tex-span\"><i>f</i>(<i>x</i>)\u2009\u2260\u2009<i>g</i>(<i>x</i>)</span>.</p>",
    "samples": [
        {
            "input": "2 1 1<br/>1 2<br/>1 2<br/>",
            "output": "SIMILAR<br/>"
        },
        {
            "input": "2 1 1<br/>1 2<br/>1 -2<br/>",
            "output": "0 0 <br/>"
        }
    ],
    "note": "<p>First sample has two equal formulas, so they are similar by definition.</p><p>In second sample if we compute first function with <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\">1</sub>\u2009=\u20090</span> and <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\">2</sub>\u2009=\u20090</span> we get the result <span class=\"tex-span\">0</span>, because <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/82cbca427149bc7516804c97b5963cbfddd08900.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>. But the second formula is <span class=\"tex-span\">1</span>, because <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/c8a53f3cfcb77e8a34515ff1420d44e5e2c3db0b.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p>",
    "contestId": 641,
    "index": "F",
    "name": "Little Artem and 2-SAT",
    "type": "PROGRAMMING",
    "tags": [],
    "solvedCount": 185
}