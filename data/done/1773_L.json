{
    "title": "L. Lisa's Sequences",
    "timeLimit": {
        "value": 5.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 1024.0,
        "unit": "megabytes"
    },
    "statement": "<p>Lisa loves playing with the sequences of integers. When she gets a new integer sequence $$$a_i$$$ of length $$$n$$$, she starts looking for all <span class=\"tex-font-style-it\">monotone</span> subsequences. A monotone subsequence $$$[l, r]$$$ is defined by two indices $$$l$$$ and $$$r$$$ ($$$1 \\le l &lt; r \\le n$$$) such that $$$\\forall i = l, l+1, \\ldots, r-1: a_i \\le a_{i+1}$$$ or $$$\\forall i = l, l+1, \\ldots, r-1: a_i \\ge a_{i+1}$$$. </p><p>Lisa considers a sequence $$$a_i$$$ to be <span class=\"tex-font-style-it\">boring</span> if there is a monotone subsequence $$$[l, r]$$$ that is as long as her boredom threshold $$$k$$$, that is when $$$r - l + 1 = k$$$.</p><p>Lucas has a sequence $$$b_i$$$ that he wants to present to Lisa, but the sequence might be boring for Lisa. So, he wants to change some elements of his sequence $$$b_i$$$, so that Lisa does not get bored playing with it. However, Lucas is lazy and wants to change as few elements of the sequence $$$b_i$$$ as possible. Your task is to help Lucas find the required changes. </p>",
    "inputSpecification": "<p>The first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$3 \\le k \\le n \\le 10^6$$$)\u00a0\u2014 the length of the sequence and Lisa's boredom threshold. The second line contains $$$n$$$ integers $$$b_i$$$ ($$$1 \\le b_i \\le 99\\,999$$$)\u00a0\u2014 the original sequence that Lucas has.</p>",
    "outputSpecification": "<p>On the first line output an integer $$$m$$$\u00a0\u2014 the minimal number of elements in $$$b_i$$$ that needs to be changed to make the sequence not boring for Lisa. On the second line output $$$n$$$ integers $$$a_i$$$ ($$$0 \\le a_i \\le 100\\,000$$$), so that the sequence of integers $$$a_i$$$ is not boring for Lisa and is different from the original sequence $$$b_i$$$ in exactly $$$m$$$ positions.</p>",
    "samples": [
        {
            "input": "\n5 3\n1 2 3 4 5\n",
            "output": "\n2\n1 0 3 0 5\n"
        },
        {
            "input": "\n6 3\n1 1 1 1 1 1\n",
            "output": "\n3\n1 100000 0 1 0 1\n"
        },
        {
            "input": "\n6 4\n1 1 4 4 1 1\n",
            "output": "\n1\n1 1 4 0 1 1\n"
        },
        {
            "input": "\n6 4\n4 4 4 2 2 2\n",
            "output": "\n2\n4 4 0 2 0 2\n"
        },
        {
            "input": "\n6 4\n4 4 4 3 4 4\n",
            "output": "\n1\n4 4 100000 3 4 4\n"
        },
        {
            "input": "\n8 4\n2 1 1 3 3 1 1 2\n",
            "output": "\n2\n2 1 1 3 0 1 0 2\n"
        },
        {
            "input": "\n10 4\n1 1 1 2 2 1 1 2 2 1\n",
            "output": "\n2\n1 1 100000 2 2 100000 1 2 2 1\n"
        },
        {
            "input": "\n7 5\n5 4 4 3 4 4 4\n",
            "output": "\n0\n5 4 4 3 4 4 4\n"
        },
        {
            "input": "\n10 10\n1 1 1 1 1 1 1 1 1 1\n",
            "output": "\n1\n1 1 1 1 1 1 1 1 0 1\n"
        }
    ],
    "note": null,
    "contestId": 1773,
    "index": "L",
    "name": "Lisa's Sequences",
    "type": "PROGRAMMING",
    "tags": [
        "dp"
    ],
    "solvedCount": 30
}