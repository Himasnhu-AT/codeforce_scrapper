{
    "title": "F. Farmer John's Favorite Function",
    "timeLimit": {
        "value": 5.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<div class=\"epigraph\"><div class=\"epigraph-text\"><span class=\"tex-font-style-it\"><a href=\"https://soundcloud.com/user-838515264/camellia-parts-ooparts\">\u03a9\u03a9PARTS - Camellia</a></span></div><div class=\"epigraph-source\">\u2800</div></div><p>Farmer John has an array $$$a$$$ of length $$$n$$$. He also has a function $$$f$$$ with the following recurrence: </p><ul> <li> $$$f(1) = \\sqrt{a_1}$$$; </li><li> For all $$$i &gt; 1$$$, $$$f(i) = \\sqrt{f(i-1)+a_i}$$$. </li></ul><p>Note that $$$f(i)$$$ is not necessarily an integer.</p><p>He plans to do $$$q$$$ updates to the array. Each update, he gives you two integers $$$k$$$ and $$$x$$$ and he wants you to set $$$a_k = x$$$. After each update, he wants to know $$$\\lfloor f(n) \\rfloor$$$, where $$$\\lfloor t \\rfloor$$$ denotes the value of $$$t$$$ rounded down to the nearest integer.</p>",
    "inputSpecification": "<p>The first line contains $$$n$$$ and $$$q$$$ ($$$1 \\leq n, q \\leq 2 \\cdot 10^5$$$), the length of $$$a$$$ and the number of updates he will perform.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\leq a_i \\leq 10^{18}$$$).</p><p>The next $$$q$$$ lines each contain two integers $$$k$$$ and $$$x$$$ ($$$1 \\leq k \\leq n$$$, $$$0 \\leq x \\leq 10^{18}$$$), the index of the update and the element he will replace $$$a_k$$$ with.</p>",
    "outputSpecification": "<p>For each update, output an integer, $$$\\lfloor f(n) \\rfloor$$$, on a new line.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5 6</div><div class=\"test-example-line test-example-line-even test-example-line-0\">0 14 0 7 6</div><div class=\"test-example-line test-example-line-even test-example-line-0\">1 4</div><div class=\"test-example-line test-example-line-even test-example-line-0\">1 3</div><div class=\"test-example-line test-example-line-even test-example-line-0\">2 15</div><div class=\"test-example-line test-example-line-even test-example-line-0\">4 1</div><div class=\"test-example-line test-example-line-even test-example-line-0\">5 2</div><div class=\"test-example-line test-example-line-even test-example-line-0\">5 8</div>",
            "output": "\n3\n2\n3\n2\n1\n3\n"
        },
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">15 10</div><div class=\"test-example-line test-example-line-even test-example-line-0\">3364 1623 5435 7 6232 245 7903 3880 9738 577 4598 1868 1112 8066 199</div><div class=\"test-example-line test-example-line-even test-example-line-0\">14 4284</div><div class=\"test-example-line test-example-line-even test-example-line-0\">14 8066</div><div class=\"test-example-line test-example-line-even test-example-line-0\">6 92</div><div class=\"test-example-line test-example-line-even test-example-line-0\">6 245</div><div class=\"test-example-line test-example-line-even test-example-line-0\">2 925</div><div class=\"test-example-line test-example-line-even test-example-line-0\">2 1623</div><div class=\"test-example-line test-example-line-even test-example-line-0\">5 176</div><div class=\"test-example-line test-example-line-even test-example-line-0\">5 6232</div><div class=\"test-example-line test-example-line-even test-example-line-0\">3 1157</div><div class=\"test-example-line test-example-line-even test-example-line-0\">3 5435</div>",
            "output": "\n16\n17\n16\n17\n16\n17\n16\n17\n16\n17\n"
        },
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">2 2</div><div class=\"test-example-line test-example-line-even test-example-line-0\">386056082462833225 923951085408043421</div><div class=\"test-example-line test-example-line-even test-example-line-0\">1 386056082462833225</div><div class=\"test-example-line test-example-line-even test-example-line-0\">1 386056082462833224</div>",
            "output": "\n961223744\n961223743\n"
        },
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">13 10</div><div class=\"test-example-line test-example-line-even test-example-line-0\">31487697732100 446330174221392699 283918145228010533 619870471872432389 11918456891794188 247842810542459080 140542974216802552 698742782599365547 533363381213535498 92488084424940128 401887157851719898 128798321287952855 137376848358184069</div><div class=\"test-example-line test-example-line-even test-example-line-0\">3 283918145228010532</div><div class=\"test-example-line test-example-line-even test-example-line-0\">3 283918145228010533</div><div class=\"test-example-line test-example-line-even test-example-line-0\">1 2183728930312</div><div class=\"test-example-line test-example-line-even test-example-line-0\">13 1000000000000000000</div><div class=\"test-example-line test-example-line-even test-example-line-0\">10 1000000000000000000</div><div class=\"test-example-line test-example-line-even test-example-line-0\">9 1000000000000000000</div><div class=\"test-example-line test-example-line-even test-example-line-0\">8 1000000000000000000</div><div class=\"test-example-line test-example-line-even test-example-line-0\">7 1000000000000000000</div><div class=\"test-example-line test-example-line-even test-example-line-0\">6 1000000000000000000</div><div class=\"test-example-line test-example-line-even test-example-line-0\">5 1000000000000000000</div>",
            "output": "\n370643829\n370643830\n370643829\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n"
        }
    ],
    "note": "<p>In the first test case, the array after the first update is $$$[4, 14, 0, 7, 6]$$$. The values of $$$f$$$ are:</p><ul> <li> $$$f(1)=2$$$; </li><li> $$$f(2)=4$$$; </li><li> $$$f(3)=2$$$; </li><li> $$$f(4)=3$$$; </li><li> $$$f(5)=3$$$. </li></ul><p>Since $$$\\lfloor f(5) \\rfloor = 3$$$, we output $$$3$$$.</p><p>The array after the second update is $$$[3, 14, 0, 7, 6]$$$. The values of $$$f$$$, rounded to $$$6$$$ decimal places, are:</p><ul> <li> $$$f(1)\\approx 1.732051$$$; </li><li> $$$f(2)\\approx 3.966365$$$; </li><li> $$$f(3)\\approx 1.991573$$$; </li><li> $$$f(4)\\approx 2.998595$$$; </li><li> $$$f(5)\\approx 2.999766$$$. </li></ul><p>Since $$$\\lfloor f(5) \\rfloor = 2$$$, we output $$$2$$$.</p>",
    "contestId": 1942,
    "index": "F",
    "name": "Farmer John's Favorite Function",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "data structures",
        "implementation",
        "math"
    ],
    "solvedCount": 601
}