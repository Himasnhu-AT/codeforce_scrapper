{
    "title": "A. Countdown",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a digital clock with $$$n$$$ digits. Each digit shows an integer from $$$0$$$ to $$$9$$$, so the whole clock shows an integer from $$$0$$$ to $$$10^n-1$$$. The clock will show leading zeroes if the number is smaller than $$$10^{n-1}$$$.</p><p>You want the clock to show $$$0$$$ with as few operations as possible. In an operation, you can do one of the following: </p><ul> <li> decrease the number on the clock by $$$1$$$, or </li><li> swap two digits (you can choose which digits to swap, and they don't have to be adjacent). </li></ul><p>Your task is to determine the minimum number of operations needed to make the clock show $$$0$$$.</p>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^3$$$).</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 100$$$) \u2014 number of digits on the clock.</p><p>The second line of each test case contains a string of $$$n$$$ digits $$$s_1, s_2, \\ldots, s_n$$$ ($$$0 \\le s_1, s_2, \\ldots, s_n \\le 9$$$) \u2014 the number on the clock.</p><p>Note: If the number is smaller than $$$10^{n-1}$$$ the clock will show leading zeroes.</p>",
    "outputSpecification": "<p>For each test case, print one integer: the minimum number of operations needed to make the clock show $$$0$$$.</p>",
    "samples": [
        {
            "input": "\n7\n3\n007\n4\n1000\n5\n00000\n3\n103\n4\n2020\n9\n123456789\n30\n001678294039710047203946100020\n",
            "output": "\n7\n2\n0\n5\n6\n53\n115\n"
        }
    ],
    "note": "<p>In the first example, it's optimal to just decrease the number $$$7$$$ times.</p><p>In the second example, we can first swap the first and last position and then decrease the number by $$$1$$$.</p><p>In the third example, the clock already shows $$$0$$$, so we don't have to perform any operations.</p>",
    "contestId": 1573,
    "index": "A",
    "name": "Countdown",
    "type": "PROGRAMMING",
    "tags": [
        "greedy"
    ],
    "solvedCount": 20959
}