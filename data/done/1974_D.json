{
    "title": "D. Ingenuity-2",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Let's imagine the surface of Mars as an infinite coordinate plane. Initially, the rover Perseverance-2 and the helicopter Ingenuity-2 are located at the point with coordinates $$$(0, 0)$$$. A set of instructions $$$s$$$ consisting of $$$n$$$ instructions of the following types was specially developed for them:</p><ul> <li> <span class=\"tex-font-style-tt\">N</span>: move one meter north (from point $$$(x, y)$$$ to $$$(x, y + 1)$$$); </li><li> <span class=\"tex-font-style-tt\">S</span>: move one meter south (from point $$$(x, y)$$$ to $$$(x, y - 1)$$$); </li><li> <span class=\"tex-font-style-tt\">E</span>: move one meter east (from point $$$(x, y)$$$ to $$$(x + 1, y)$$$); </li><li> <span class=\"tex-font-style-tt\">W</span>: move one meter west (from point $$$(x, y)$$$ to $$$(x - 1, y)$$$). </li></ul><p>Each instruction must be executed either by the rover or by the helicopter. Moreover, each device must execute <span class=\"tex-font-style-bf\">at least one</span> instruction. Your task is to distribute the instructions in such a way that after executing all $$$n$$$ instructions, the helicopter and the rover end up at the same point, or determine that this is impossible.</p>",
    "inputSpecification": "<p>The first line of input contains $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the number of instructions.</p><p>The second line of each test case contains a string $$$s$$$ of length $$$n$$$ consisting of the characters '<span class=\"tex-font-style-tt\">N</span>', '<span class=\"tex-font-style-tt\">S</span>', '<span class=\"tex-font-style-tt\">E</span>', '<span class=\"tex-font-style-tt\">W</span>'\u00a0\u2014 the sequence of instructions.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10 ^ 5$$$.</p>",
    "outputSpecification": "<p>For each test case, if the required distribution of instructions exists, output a string $$$p$$$ of length $$$n$$$ consisting of the characters '<span class=\"tex-font-style-tt\">R</span>', '<span class=\"tex-font-style-tt\">H</span>'. If the $$$i$$$-th operation should be executed by the rover, then $$$p_i=\\text{R}$$$, if the $$$i$$$-th operation should be executed by the helicopter, then $$$p_i=\\text{H}$$$. If there are multiple solutions, output any of them.</p><p>Otherwise, output <span class=\"tex-font-style-tt\">NO</span>.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">NENSNE</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">WWW</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">NESSWS</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">SN</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">WE</div><div class=\"test-example-line test-example-line-even test-example-line-6\">4</div><div class=\"test-example-line test-example-line-even test-example-line-6\">SSNN</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">WESN</div><div class=\"test-example-line test-example-line-even test-example-line-8\">2</div><div class=\"test-example-line test-example-line-even test-example-line-8\">SS</div><div class=\"test-example-line test-example-line-odd test-example-line-9\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-9\">EWNN</div><div class=\"test-example-line test-example-line-even test-example-line-10\">4</div><div class=\"test-example-line test-example-line-even test-example-line-10\">WEWE</div>",
            "output": "\nRRHRRH\nNO\nHRRHRH\nNO\nNO\nRHRH\nRRHH\nRH\nRRRH\nRRHH"
        }
    ],
    "note": "<p>Let's consider the first example: the string $$$S = \\texttt{NENSNE}$$$. One of the possible solutions, shown in the figure below, is $$$p = \\texttt{RRHRRH}$$$, using which both the rover and the helicopter will end up one meter north and one meter east.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/bb4cbb5897ef7ab4afcc336d45457d0bb9d07c2c.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>For <span class=\"tex-font-style-tt\">WWW</span>, the solution is impossible.</p>",
    "contestId": 1974,
    "index": "D",
    "name": "Ingenuity-2",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "solvedCount": 12155
}