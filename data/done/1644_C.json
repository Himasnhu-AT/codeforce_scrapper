{
    "title": "C. Increase Subarray Sums",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given an array $$$a_1, a_2, \\dots, a_n$$$, consisting of $$$n$$$ integers. You are also given an integer value $$$x$$$.</p><p>Let $$$f(k)$$$ be the maximum sum of a contiguous subarray of $$$a$$$ after applying the following operation: add $$$x$$$ to the elements on exactly $$$k$$$ <span class=\"tex-font-style-bf\">distinct</span> positions. An empty subarray should also be considered, it has sum $$$0$$$.</p><p>Note that the subarray doesn't have to include all of the increased elements.</p><p>Calculate the maximum value of $$$f(k)$$$ for all $$$k$$$ from $$$0$$$ to $$$n$$$ independently.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 5000$$$)\u00a0\u2014 the number of testcases.</p><p>The first line of the testcase contains two integers $$$n$$$ and $$$x$$$ ($$$1 \\le n \\le 5000$$$; $$$0 \\le x \\le 10^5$$$)\u00a0\u2014 the number of elements in the array and the value to add.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$-10^5 \\le a_i \\le 10^5$$$).</p><p>The sum of $$$n$$$ over all testcases doesn't exceed $$$5000$$$.</p>",
    "outputSpecification": "<p>For each testcase, print $$$n + 1$$$ integers\u00a0\u2014 the maximum value of $$$f(k)$$$ for all $$$k$$$ from $$$0$$$ to $$$n$$$ independently.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 1 3 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">-2 -7 -1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">10 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">-6 -1 -2 4 -6 -1 -4 4 -5 -4</div>",
            "output": "\n10 12 14 16 18\n0 4 4 5\n4 6 6 7 7 7 7 8 8 8 8\n"
        }
    ],
    "note": "<p>In the first testcase, it doesn't matter which elements you add $$$x$$$ to. The subarray with the maximum sum will always be the entire array. If you increase $$$k$$$ elements by $$$x$$$, $$$k \\cdot x$$$ will be added to the sum.</p><p>In the second testcase: </p><ul> <li> For $$$k = 0$$$, the empty subarray is the best option. </li><li> For $$$k = 1$$$, it's optimal to increase the element at position $$$3$$$. The best sum becomes $$$-1 + 5 = 4$$$ for a subarray $$$[3, 3]$$$. </li><li> For $$$k = 2$$$, it's optimal to increase the element at position $$$3$$$ and any other element. The best sum is still $$$4$$$ for a subarray $$$[3, 3]$$$. </li><li> For $$$k = 3$$$, you have to increase all elements. The best sum becomes $$$(-2 + 5) + (-7 + 5) + (-1 + 5) = 5$$$ for a subarray $$$[1, 3]$$$. </li></ul>",
    "contestId": 1644,
    "index": "C",
    "name": "Increase Subarray Sums",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "implementation"
    ],
    "solvedCount": 13448
}