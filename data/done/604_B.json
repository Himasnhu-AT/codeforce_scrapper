{
    "title": "B. More Cowbell",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Kevin Sun wants to move his precious collection of <span class=\"tex-span\"><i>n</i></span> cowbells from Naperthrill to Exeter, where there is actually grass instead of corn. Before moving, he must pack his cowbells into <span class=\"tex-span\"><i>k</i></span> boxes of a fixed size. In order to keep his collection safe during transportation, he won't place more than <span class=\"tex-font-style-bf\">two</span> cowbells into a single box. Since Kevin wishes to minimize expenses, he is curious about the smallest size box he can use to pack his entire collection. </p><p>Kevin is a meticulous cowbell collector and knows that the size of his <span class=\"tex-span\"><i>i</i></span>-th (<span class=\"tex-span\">1\u2009\u2264\u2009<i>i</i>\u2009\u2264\u2009<i>n</i></span>) cowbell is an integer <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span>. In fact, he keeps his cowbells sorted by size, so <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i>\u2009-\u20091</sub>\u2009\u2264\u2009<i>s</i><sub class=\"lower-index\"><i>i</i></sub></span> for any <span class=\"tex-span\"><i>i</i>\u2009&gt;\u20091</span>. Also an expert packer, Kevin can fit one or two cowbells into a box of size <span class=\"tex-span\"><i>s</i></span> if and only if the sum of their sizes does not exceed <span class=\"tex-span\"><i>s</i></span>. Given this information, help Kevin determine the smallest <span class=\"tex-span\"><i>s</i></span> for which it is possible to put all of his cowbells into <span class=\"tex-span\"><i>k</i></span> boxes of size <span class=\"tex-span\"><i>s</i></span>.</p>",
    "inputSpecification": "<p>The first line of the input contains two space-separated integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20092\u00b7<i>k</i>\u2009\u2264\u2009100\u2009000</span>), denoting the number of cowbells and the number of boxes, respectively.</p><p>The next line contains <span class=\"tex-span\"><i>n</i></span> space-separated integers <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\">1</sub>,\u2009<i>s</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>s</i><sub class=\"lower-index\"><i>n</i></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>s</i><sub class=\"lower-index\">1</sub>\u2009\u2264\u2009<i>s</i><sub class=\"lower-index\">2</sub>\u2009\u2264\u2009...\u2009\u2264\u2009<i>s</i><sub class=\"lower-index\"><i>n</i></sub>\u2009\u2264\u20091\u2009000\u2009000</span>), the sizes of Kevin's cowbells. It is guaranteed that the sizes <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span> are given in non-decreasing order.</p>",
    "outputSpecification": "<p>Print a single integer, the smallest <span class=\"tex-span\"><i>s</i></span> for which it is possible for Kevin to put all of his cowbells into <span class=\"tex-span\"><i>k</i></span> boxes of size <span class=\"tex-span\"><i>s</i></span>.</p>",
    "samples": [
        {
            "input": "2 1<br/>2 5<br/>",
            "output": "7<br/>"
        },
        {
            "input": "4 3<br/>2 3 5 9<br/>",
            "output": "9<br/>"
        },
        {
            "input": "3 2<br/>3 5 7<br/>",
            "output": "8<br/>"
        }
    ],
    "note": "<p>In the first sample, Kevin must pack his two cowbells into the same box. </p><p>In the second sample, Kevin can pack together the following sets of cowbells: <span class=\"tex-span\">{2,\u20093}</span>, <span class=\"tex-span\">{5}</span> and <span class=\"tex-span\">{9}</span>.</p><p>In the third sample, the optimal solution is <span class=\"tex-span\">{3,\u20095}</span> and <span class=\"tex-span\">{7}</span>.</p>",
    "contestId": 604,
    "index": "B",
    "name": "More Cowbell",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "greedy"
    ],
    "solvedCount": 8290
}