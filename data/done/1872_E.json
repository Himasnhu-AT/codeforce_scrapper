{
    "title": "E. Data Structures Fan",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given an array of integers $$$a_1, a_2, \\ldots, a_n$$$, as well as a binary string$$$^{\\dagger}$$$ $$$s$$$ consisting of $$$n$$$ characters.</p><p>Augustin is a big fan of data structures. Therefore, he asked you to implement a data structure that can answer $$$q$$$ queries. There are two types of queries:</p><ul><li> \"1 $$$l$$$ $$$r$$$\" ($$$1\\le l \\le r \\le n$$$)\u00a0\u2014 replace each character $$$s_i$$$ for $$$l \\le i \\le r$$$ with its opposite. That is, replace all $$$\\texttt{0}$$$ with $$$\\texttt{1}$$$ and all $$$\\texttt{1}$$$ with $$$\\texttt{0}$$$.</li><li> \"2 $$$g$$$\" ($$$g \\in \\{0, 1\\}$$$)\u00a0\u2014 calculate the value of the <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\">bitwise XOR</a> of the numbers $$$a_i$$$ for all indices $$$i$$$ such that $$$s_i = g$$$. Note that the $$$\\operatorname{XOR}$$$ of an empty set of numbers is considered to be equal to $$$0$$$.</li></ul><p>Please help Augustin to answer all the queries!</p><p>For example, if $$$n = 4$$$, $$$a = [1, 2, 3, 6]$$$, $$$s = \\texttt{1001}$$$, consider the following series of queries:</p><ol><li> \"2 $$$0$$$\"\u00a0\u2014 we are interested in the indices $$$i$$$ for which $$$s_i = \\tt{0}$$$, since $$$s = \\tt{1001}$$$, these are the indices $$$2$$$ and $$$3$$$, so the answer to the query will be $$$a_2 \\oplus a_3 = 2 \\oplus 3 = 1$$$.</li><li> \"1 $$$1$$$ $$$3$$$\"\u00a0\u2014 we need to replace the characters $$$s_1, s_2, s_3$$$ with their opposites, so before the query $$$s = \\tt{1001}$$$, and after the query: $$$s = \\tt{0111}$$$.</li><li> \"2 $$$1$$$\"\u00a0\u2014 we are interested in the indices $$$i$$$ for which $$$s_i = \\tt{1}$$$, since $$$s = \\tt{0111}$$$, these are the indices $$$2$$$, $$$3$$$, and $$$4$$$, so the answer to the query will be $$$a_2 \\oplus a_3 \\oplus a_4 = 2 \\oplus 3 \\oplus 6 = 7$$$.</li><li> \"1 $$$2$$$ $$$4$$$\"\u00a0\u2014 $$$s = \\tt{0111}$$$ $$$\\to$$$ $$$s = \\tt{0000}$$$.</li><li> \"2 $$$1$$$\"\u00a0\u2014 $$$s = \\tt{0000}$$$, there are no indices with $$$s_i = \\tt{1}$$$, so since the $$$\\operatorname{XOR}$$$ of an empty set of numbers is considered to be equal to $$$0$$$, the answer to this query is $$$0$$$.</li></ol><p>$$$^{\\dagger}$$$ A binary string is a string containing only characters $$$\\texttt{0}$$$ or $$$\\texttt{1}$$$.</p>",
    "inputSpecification": "<p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases in the test.</p><p>The descriptions of the test cases follow.</p><p>The first line of each test case description contains an integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$)\u00a0\u2014 the length of the array.</p><p>The second line of the test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$).</p><p>The third line of the test case contains the binary string $$$s$$$ of length $$$n$$$.</p><p>The fourth line of the test case contains one integer $$$q$$$ ($$$1 \\le q \\le 10^5$$$)\u00a0\u2014 the number of queries.</p><p>The subsequent $$$q$$$ lines of the test case describe the queries. The first number of each query, $$$tp \\in \\{1, 2\\}$$$, characterizes the type of the query: if $$$tp = 1$$$, then $$$2$$$ integers $$$1 \\le l \\le r \\le n$$$ follow, meaning that the operation of type $$$1$$$ should be performed with parameters $$$l, r$$$, and if $$$tp = 2$$$, then one integer $$$g \\in \\{0, 1\\}$$$ follows, meaning that the operation of type $$$2$$$ should be performed with parameter $$$g$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$, and also that the sum of $$$q$$$ over all test cases does not exceed $$$10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, and for each query of type $$$2$$$ in it, output the answer to the corresponding query.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2 3 4 5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">01000</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 0</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 0</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">6</div><div class=\"test-example-line test-example-line-even test-example-line-2\">12 12 14 14 5 5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">001001</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">7 7 7 777</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1111</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 0</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 0</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1000000000 996179179</div><div class=\"test-example-line test-example-line-even test-example-line-4\">11</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 42 20 47 7</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">00011</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 2 4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2 0</div>",
            "output": "\n3 2 6 7 7 \n11 7 \n0 0 \n16430827 \n47 \n"
        }
    ],
    "note": "<p>Let's analyze the first test case:</p><ol><li> \"2 $$$0$$$\"\u00a0\u2014 we are interested in the indices $$$i$$$ for which $$$s_i = \\tt{0}$$$, since $$$s = \\tt{01000}$$$, these are the indices $$$1, 3, 4$$$, and $$$5$$$, so the answer to the query will be $$$a_1 \\oplus a_3 \\oplus a_4 \\oplus a_5 = 1 \\oplus 3 \\oplus 4 \\oplus 5 = 3$$$.</li><li> \"2 $$$1$$$\"\u00a0\u2014 we are interested in the indices $$$i$$$ for which $$$s_i = \\tt{1}$$$, since $$$s = \\tt{01000}$$$, the only suitable index is $$$2$$$, so the answer to the query will be $$$a_2 = 2$$$.</li><li> \"1 $$$2$$$ $$$4$$$\"\u00a0\u2014 we need to replace the characters $$$s_2, s_3, s_4$$$ with their opposites, so before the query $$$s = \\tt{01000}$$$, and after the query: $$$s = \\tt{00110}$$$.</li><li> \"2 $$$0$$$\"\u00a0\u2014 we are interested in the indices $$$i$$$ for which $$$s_i = \\tt{0}$$$, since $$$s = \\tt{00110}$$$, these are the indices $$$1, 2$$$, and $$$5$$$, so the answer to the query will be $$$a_1 \\oplus a_2 \\oplus a_5 = 1 \\oplus 2 \\oplus 5 = 6$$$.</li><li> \"2 $$$1$$$\"\u00a0\u2014 we are interested in the indices $$$i$$$ for which $$$s_i = \\tt{1}$$$, since $$$s = \\tt{00110}$$$, these are the indices $$$3$$$ and $$$4$$$, so the answer to the query will be $$$a_3 \\oplus a_4 = 3 \\oplus 4 = 7$$$.</li><li> \"1 $$$1$$$ $$$3$$$\"\u00a0\u2014 $$$s = \\tt{00110}$$$ $$$\\to$$$ $$$s = \\tt{11010}$$$.</li><li> \"2 $$$1$$$\"\u00a0\u2014 we are interested in the indices $$$i$$$ for which $$$s_i = \\tt{1}$$$, since $$$s = \\tt{11010}$$$, these are the indices $$$1, 2$$$, and $$$4$$$, so the answer to the query will be $$$a_1 \\oplus a_2 \\oplus a_4 = 1 \\oplus 2 \\oplus 4 = 7$$$.</li></ol>",
    "contestId": 1872,
    "index": "E",
    "name": "Data Structures Fan",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "bitmasks",
        "data structures",
        "dp"
    ],
    "solvedCount": 12351
}