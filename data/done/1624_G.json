{
    "title": "G. MinOr Tree",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Recently, Vlad has been carried away by spanning trees, so his friends, without hesitation, gave him a connected weighted undirected graph of $$$n$$$ vertices and $$$m$$$ edges for his birthday.</p><p>Vlad defined the <span class=\"tex-font-style-it\">ority</span> of a spanning tree as the <a href=\"https://tiny.cc/bitwise_or\">bitwise OR</a> of all its weights, and now he is interested in what is the minimum possible <span class=\"tex-font-style-it\">ority</span> that can be achieved by choosing a certain spanning tree. A spanning tree is a connected subgraph of a given graph that does not contain cycles.</p><p>In other words, you want to keep $$$n-1$$$ edges so that the graph remains connected and the bitwise OR weights of the edges are as small as possible. You have to find the minimum bitwise OR itself.</p>",
    "inputSpecification": "<p>The first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) \u2014 the number of test cases in the input.</p><p>An empty line is written in front of each test case.</p><p>This is followed by two numbers $$$n$$$ and $$$m$$$ ($$$3 \\le n \\le 2 \\cdot 10^5, n - 1 \\le m \\le 2 \\cdot 10^5$$$) \u2014 the number of vertices and edges of the graph, respectively.</p><p>The next $$$m$$$ lines contain the description of the edges. Line $$$i$$$ contains three numbers $$$v_i$$$, $$$u_i$$$ and $$$w_i$$$ ($$$1 \\le v_i, u_i \\le n$$$, $$$1 \\le w_i \\le 10^9$$$, $$$v_i \\neq u_i$$$) \u2014 the vertices that the edge connects and its weight.</p><p>It is guaranteed that the sum $$$m$$$ and the sum $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$ and each test case contains a connected graph.</p>",
    "outputSpecification": "<p>Print $$$t$$$ lines, each of which contains the answer to the corresponding set of input data\u00a0\u2014 the minimum possible spanning tree <span class=\"tex-font-style-it\">ority</span>.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\"><br/></div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 3 2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\"><br/></div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 7</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 2 7</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 5 8</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 4 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 2 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 4 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 1 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\"><br/></div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 3 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 3 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 1 4</div>",
            "output": "\n2\n10\n3\n"
        }
    ],
    "note": "<center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/8742531632c6da018dbeff32c1ee5dac9389435e.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"340px\"/> <span class=\"tex-font-size-small\">Graph from the first test case.</span> </center><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/af2d6e2c50daa1dff26beb34d7dc4e1e2569aadb.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"340px\"/> <span class=\"tex-font-size-small\"><span class=\"tex-font-style-it\">Ority</span> of this tree equals to <span class=\"tex-font-style-tt\">2 or 2 = 2</span> and it's minimal.</span> </center><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/b82b9d172399f9ee9cc2e8e94a3905da51bc7031.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"340px\"/> <span class=\"tex-font-size-small\">Without excluding edge with weight $$$1$$$ <span class=\"tex-font-style-it\">ority</span> is <span class=\"tex-font-style-tt\">1 or 2 = 3</span>.</span> </center>",
    "contestId": 1624,
    "index": "G",
    "name": "MinOr Tree",
    "type": "PROGRAMMING",
    "tags": [
        "bitmasks",
        "dfs and similar",
        "dsu",
        "graphs",
        "greedy"
    ],
    "solvedCount": 5654
}