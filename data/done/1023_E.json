{
    "title": "E. Down or Right",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p><span class=\"tex-font-style-it\">This is an interactive problem.</span></p><p>Bob lives in a square grid of size $$$n \\times n$$$, with rows numbered $$$1$$$ through $$$n$$$ from top to bottom, and columns numbered $$$1$$$ through $$$n$$$ from left to right. Every cell is either allowed or blocked, but you don't know the exact description of the grid. You are given only an integer $$$n$$$.</p><p>Bob can move through allowed cells but only in some limited directions. When Bob is in an allowed cell in the grid, he can move <span class=\"tex-font-style-bf\">down or right</span> to an adjacent cell, if it is allowed.</p><p>You can ask at most $$$4 \\cdot n$$$ queries of form \"<span class=\"tex-font-style-tt\">? </span>$$$r_1$$$ $$$c_1$$$ $$$r_2$$$ $$$c_2$$$\" ($$$1 \\le r_1 \\le r_2 \\le n$$$, $$$1 \\le c_1 \\le c_2 \\le n$$$). The answer will be \"<span class=\"tex-font-style-tt\">YES</span>\" if Bob can get from a cell $$$(r_1, c_1)$$$ to a cell $$$(r_2, c_2)$$$, and \"<span class=\"tex-font-style-tt\">NO</span>\" otherwise. In particular, if one of the two cells (or both) is a blocked cell then the answer is \"<span class=\"tex-font-style-tt\">NO</span>\" for sure. Since Bob doesn't like short trips, you can only ask queries with the manhattan distance between the two cells at least $$$n - 1$$$, i.e. the following condition must be satisfied: $$$(r_2 - r_1) + (c_2 - c_1) \\ge n - 1$$$.</p><p>It's guaranteed that Bob can get from the top-left corner $$$(1, 1)$$$ to the bottom-right corner $$$(n, n)$$$ and your task is to find a way to do it. You should print the answer in form \"<span class=\"tex-font-style-tt\">! S</span>\" where $$$S$$$ is a string of length $$$2 \\cdot n - 2$$$ consisting of characters '<span class=\"tex-font-style-tt\">D</span>' and '<span class=\"tex-font-style-tt\">R</span>', denoting moves down and right respectively. The down move increases the first coordinate by $$$1$$$, the right move increases the second coordinate by $$$1$$$. If there are multiple solutions, any of them will be accepted. You should terminate immediately after printing the solution.</p>",
    "inputSpecification": "<p>The only line of the input contains an integer $$$n$$$ ($$$2 \\le n \\le 500$$$) \u2014 the size of the grid.</p>",
    "outputSpecification": "<p>When you are ready to print the answer, print a single line containing \"<span class=\"tex-font-style-tt\">! S</span>\" where where $$$S$$$ is a string of length $$$2 \\cdot n - 2$$$ consisting of characters '<span class=\"tex-font-style-tt\">D</span>' and '<span class=\"tex-font-style-tt\">R</span>', denoting moves down and right respectively. The path should be a valid path going from the cell $$$(1, 1)$$$ to the cell $$$(n, n)$$$ passing only through allowed cells.</p>",
    "samples": [
        {
            "input": "4<br/>\u00a0<br/>YES<br/>\u00a0<br/>NO<br/>\u00a0<br/>YES<br/>\u00a0<br/>YES<br/>\u00a0<br/>",
            "output": "\u00a0<br/>? 1 1 4 4<br/>\u00a0<br/>? 1 2 4 3<br/>\u00a0<br/>? 4 1 4 4<br/>\u00a0<br/>? 1 4 4 4<br/>\u00a0<br/>! RDRRDD<br/>"
        }
    ],
    "note": "<p>The first example is shown on the picture below.</p><center> <img class=\"tex-graphics\" height=\"151px\" src=\"https://espresso.codeforces.com/39891e64ad381f16c20ce1f416db8513647b0549.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"151px\"/> </center><p>To hack, use the following input format:</p><p>The first line should contain a single integer $$$n$$$ ($$$2 \\le n \\le 500$$$)\u00a0\u2014 the size of the grid.</p><p>Each of the next $$$n$$$ lines should contain a string of $$$n$$$ characters '<span class=\"tex-font-style-tt\">#</span>' or '<span class=\"tex-font-style-tt\">.</span>', where '<span class=\"tex-font-style-tt\">#</span>' denotes a blocked cell, and '<span class=\"tex-font-style-tt\">.</span>' denotes an allowed cell.</p><p>For example, the following text encodes the example shown above:</p><pre class=\"verbatim\"><br/>4<br/>..#.<br/>#...<br/>###.<br/>....<br/></pre>",
    "contestId": 1023,
    "index": "E",
    "name": "Down or Right",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "interactive",
        "matrices"
    ],
    "solvedCount": 1964
}