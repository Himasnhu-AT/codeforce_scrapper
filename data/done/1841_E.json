{
    "title": "E. Fill the Matrix",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>There is a square matrix, consisting of $$$n$$$ rows and $$$n$$$ columns of cells, both numbered from $$$1$$$ to $$$n$$$. The cells are colored white or black. Cells from $$$1$$$ to $$$a_i$$$ are black, and cells from $$$a_i+1$$$ to $$$n$$$ are white, in the $$$i$$$-th column.</p><p>You want to place $$$m$$$ integers in the matrix, from $$$1$$$ to $$$m$$$. There are two rules: </p><ul> <li> each cell should contain at most one integer; </li><li> black cells should not contain integers. </li></ul><p>The <span class=\"tex-font-style-it\">beauty</span> of the matrix is the number of such $$$j$$$ that $$$j+1$$$ is written in the same row, in the next column as $$$j$$$ (in the neighbouring cell to the right).</p><p>What's the maximum possible beauty of the matrix?</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of testcases.</p><p>The first line of each testcase contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the size of the matrix.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le n$$$)\u00a0\u2014 the number of black cells in each column.</p><p>The third line contains a single integer $$$m$$$ ($$$0 \\le m \\le \\sum \\limits_{i=1}^n n - a_i$$$)\u00a0\u2014 the number of integers you have to write in the matrix. Note that this number might not fit into a 32-bit integer data type.</p><p>The sum of $$$n$$$ over all testcases doesn't exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each testcase, print a single integer\u00a0\u2014 the maximum beauty of the matrix after you write all $$$m$$$ integers in it. Note that there are no more integers than the white cells, so the answer always exists.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">0 0 0</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">9</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 0 3 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 0 3 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">6</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 0 3 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">0 2 2 1 5 10 3 4 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">20</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1</div><div class=\"test-example-line test-example-line-even test-example-line-6\">0</div>",
            "output": "\n6\n3\n4\n4\n16\n0\n"
        }
    ],
    "note": null,
    "contestId": 1841,
    "index": "E",
    "name": "Fill the Matrix",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "greedy",
        "math"
    ],
    "solvedCount": 1912
}