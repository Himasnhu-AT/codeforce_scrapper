{
    "title": "E. Okabe and El Psy Kongroo",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Okabe likes to take walks but knows that spies from the Organization could be anywhere; that's why he wants to know how many different walks he can take in his city safely. Okabe's city can be represented as all points <span class=\"tex-span\">(<i>x</i>,\u2009<i>y</i>)</span> such that <span class=\"tex-span\"><i>x</i></span> and <span class=\"tex-span\"><i>y</i></span> are non-negative. Okabe starts at the origin (point <span class=\"tex-span\">(0,\u20090)</span>), and needs to reach the point <span class=\"tex-span\">(<i>k</i>,\u20090)</span>. If Okabe is currently at the point <span class=\"tex-span\">(<i>x</i>,\u2009<i>y</i>)</span>, in one step he can go to <span class=\"tex-span\">(<i>x</i>\u2009+\u20091,\u2009<i>y</i>\u2009+\u20091)</span>, <span class=\"tex-span\">(<i>x</i>\u2009+\u20091,\u2009<i>y</i>)</span>, or <span class=\"tex-span\">(<i>x</i>\u2009+\u20091,\u2009<i>y</i>\u2009-\u20091)</span>.</p><p>Additionally, there are <span class=\"tex-span\"><i>n</i></span> horizontal line segments, the <span class=\"tex-span\"><i>i</i></span>-th of which goes from <span class=\"tex-span\"><i>x</i>\u2009=\u2009<i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> to <span class=\"tex-span\"><i>x</i>\u2009=\u2009<i>b</i><sub class=\"lower-index\"><i>i</i></sub></span> inclusive, and is at <span class=\"tex-span\"><i>y</i>\u2009=\u2009<i>c</i><sub class=\"lower-index\"><i>i</i></sub></span>. It is guaranteed that <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>\u2009=\u20090</span>, <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>n</i></sub>\u2009\u2264\u2009<i>k</i>\u2009\u2264\u2009<i>b</i><sub class=\"lower-index\"><i>n</i></sub></span>, and <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009=\u2009<i>b</i><sub class=\"lower-index\"><i>i</i>\u2009-\u20091</sub></span> for <span class=\"tex-span\">2\u2009\u2264\u2009<i>i</i>\u2009\u2264\u2009<i>n</i></span>. The <span class=\"tex-span\"><i>i</i></span>-th line segment forces Okabe to walk with <span class=\"tex-span\"><i>y</i></span>-value in the range <span class=\"tex-span\">0\u2009\u2264\u2009<i>y</i>\u2009\u2264\u2009<i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> when his <span class=\"tex-span\"><i>x</i></span> value satisfies <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>x</i>\u2009\u2264\u2009<i>b</i><sub class=\"lower-index\"><i>i</i></sub></span>, or else he might be spied on. This also means he is required to be under two line segments when one segment ends and another begins.</p><p>Okabe now wants to know how many walks there are from the origin to the point <span class=\"tex-span\">(<i>k</i>,\u20090)</span> satisfying these conditions, modulo <span class=\"tex-span\">10<sup class=\"upper-index\">9</sup>\u2009+\u20097</span>.</p>",
    "inputSpecification": "<p>The first line of input contains the integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u2009100</span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>k</i>\u2009\u2264\u200910<sup class=\"upper-index\">18</sup></span>)\u00a0\u2014 the number of segments and the destination <span class=\"tex-span\"><i>x</i></span> coordinate.</p><p>The next <span class=\"tex-span\"><i>n</i></span> lines contain three space-separated integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span>, and <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">0\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009&lt;\u2009<i>b</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">18</sup></span>, <span class=\"tex-span\">0\u2009\u2264\u2009<i>c</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200915</span>)\u00a0\u2014 the left and right ends of a segment, and its <span class=\"tex-span\"><i>y</i></span> coordinate.</p><p>It is guaranteed that <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>\u2009=\u20090</span>, <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>n</i></sub>\u2009\u2264\u2009<i>k</i>\u2009\u2264\u2009<i>b</i><sub class=\"lower-index\"><i>n</i></sub></span>, and <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009=\u2009<i>b</i><sub class=\"lower-index\"><i>i</i>\u2009-\u20091</sub></span> for <span class=\"tex-span\">2\u2009\u2264\u2009<i>i</i>\u2009\u2264\u2009<i>n</i></span>.</p>",
    "outputSpecification": "<p>Print the number of walks satisfying the conditions, modulo <span class=\"tex-span\">1000000007</span> (<span class=\"tex-span\">10<sup class=\"upper-index\">9</sup>\u2009+\u20097</span>).</p>",
    "samples": [
        {
            "input": "1 3<br/>0 3 3<br/>",
            "output": "4<br/>"
        },
        {
            "input": "2 6<br/>0 3 0<br/>3 10 2<br/>",
            "output": "4<br/>"
        }
    ],
    "note": "<center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/9ef3912fcf0bea2b51dc29f31e46e3062cd5385d.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>The graph above corresponds to sample 1. The possible walks are:</p><ul> <li> <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/7fcce410dbd2cf4e427a6b50e0f159b7ce538901.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/d3272e751b9cfbd2d66c0477da221a5e709750b7.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/bf2314532d33218db716521bdc560bd6a5d19042.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/eda8eb8a4d01a31964b628e1f60b9c975b4ac98c.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li></ul><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/9619414cf901798ff709e95fcb4ba25f3b4213f3.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>The graph above corresponds to sample 2. There is only one walk for Okabe to reach <span class=\"tex-span\">(3,\u20090)</span>. After this, the possible walks are:</p><ul> <li> <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/c473f0a747d038f29946077ab3ab35a49be51f4c.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/63d2d732544825681ef0f35ecd3a9344df44e7fb.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/84ef9bab9e5e0289798b9252fc0f37fbc26a1158.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/4792c74b41188d0f4722fa7378ec34596c6c916e.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li></ul>",
    "contestId": 821,
    "index": "E",
    "name": "Okabe and El Psy Kongroo",
    "type": "PROGRAMMING",
    "tags": [
        "dp",
        "matrices"
    ],
    "solvedCount": 1423
}