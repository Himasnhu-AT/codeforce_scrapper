{
    "title": "D. XORificator",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a binary (consisting only of <span class=\"tex-font-style-tt\">0</span>s and <span class=\"tex-font-style-tt\">1</span>s) $$$n \\times m$$$ matrix. You are also given a XORificator, using which you can invert all the values in a chosen row (i.e. replace <span class=\"tex-font-style-tt\">0</span> with <span class=\"tex-font-style-tt\">1</span> and <span class=\"tex-font-style-tt\">1</span> with <span class=\"tex-font-style-tt\">0</span>).</p><p>A column in the matrix is considered <span class=\"tex-font-style-it\">special</span> if it contains exactly one <span class=\"tex-font-style-tt\">1</span>. Your task is to find the maximum number of columns that can be made <span class=\"tex-font-style-it\">special</span> at the same time, and the set of rows the XORificator should be used on to achieve that.</p>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line of input contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 3 \\cdot 10^5$$$, $$$n \\cdot m \\leq 3 \\cdot 10^5$$$).</p><p>Each of the following $$$n$$$ lines of the test case contains a binary string of length $$$m$$$.</p><p>It is guaranteed that the sum of $$$n \\cdot m$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output two lines.</p><p>In the first line, output the maximum number of <span class=\"tex-font-style-it\">special</span> columns that is possible to get simultaneously.</p><p>In the second line, output a binary string of length $$$n$$$, where the $$$i$$$-th character is <span class=\"tex-font-style-tt\">0</span>, if you don't use the XORificator on the $$$i$$$-th row, and <span class=\"tex-font-style-tt\">1</span>, if you use the XORificator on the $$$i$$$-th row.</p><p>If there are multiple valid XORificator configurations that achieve the optimal answer, you can output any of them.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1010</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">0110</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">0100</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">0</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">00101</div><div class=\"test-example-line test-example-line-even test-example-line-4\">10110</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3 3</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">101</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">111</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">000</div>",
            "output": "\n3\n010\n1\n0\n1\n1\n3\n00\n2\n010\n"
        }
    ],
    "note": "<p>In the first test case, you can use the XORificator on the second row to make the columns $$$2$$$, $$$3$$$, and $$$4$$$ <span class=\"tex-font-style-it\">special</span>.</p><p>In the second test case, the only column is already <span class=\"tex-font-style-it\">special</span>, so you don't need to use the XORificator.</p>",
    "contestId": 1977,
    "index": "D",
    "name": "XORificator",
    "type": "PROGRAMMING",
    "tags": [
        "bitmasks",
        "brute force",
        "greedy",
        "hashing"
    ],
    "solvedCount": 1346
}