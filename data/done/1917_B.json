{
    "title": "B. Erase First or Second Letter",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a string $$$s$$$ of length $$$n$$$. Let's define two operations you can apply on the string:</p><ul> <li> remove the first character of the string; </li><li> remove the second character of the string. </li></ul><p>Your task is to find the number of distinct <span class=\"tex-font-style-bf\">non-empty</span> strings that can be generated by applying the given operations on the initial string any number of times (possibly zero), in any order.</p>",
    "inputSpecification": "<p>Each test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) \u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$) \u2014 the length of the string.</p><p>The second line of each test case contains the string $$$s$$$. It is guaranteed that the string only contains lowercase letters of the English alphabet.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output a single integer: the number of distinct non-empty strings you can get.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">aaaaa</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">z</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">ababa</div><div class=\"test-example-line test-example-line-even test-example-line-4\">14</div><div class=\"test-example-line test-example-line-even test-example-line-4\">bcdaaaabcdaaaa</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">20</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">abcdefghijklmnopqrst</div>",
            "output": "\n5\n1\n9\n50\n210\n"
        }
    ],
    "note": "<p>In the first test case, we can get the following strings: $$$a$$$, $$$aa$$$, $$$aaa$$$, $$$aaaa$$$, $$$aaaaa$$$.</p><p>In the third test case, for example, the word $$$ba$$$ can be reached in the following way:</p><ul> <li> remove the first character of the current string $$$ababa$$$, getting $$$baba$$$; </li><li> remove the second character of the current string $$$baba$$$, getting $$$bba$$$; </li><li> remove the second character of the current string $$$bba$$$, getting $$$ba$$$. </li></ul>",
    "contestId": 1917,
    "index": "B",
    "name": "Erase First or Second Letter",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "combinatorics",
        "data structures",
        "dp",
        "strings"
    ],
    "solvedCount": 19949
}