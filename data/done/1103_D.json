{
    "title": "D. Professional layer",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 512.0,
        "unit": "megabytes"
    },
    "statement": "<p>Cardbluff is popular sport game in Telegram. Each Cardbluff player has ever dreamed about entrance in the professional layer. There are $$$n$$$ judges now in the layer and you are trying to pass the entrance exam. You have a number $$$k$$$ \u2014 your skill in Cardbluff.</p><p>Each judge has a number $$$a_i$$$ \u2014 an indicator of uncertainty about your entrance to the professional layer and a number $$$e_i$$$ \u2014 an experience playing Cardbluff. To pass the exam you need to convince all judges by playing with them. You can play only <span class=\"tex-font-style-bf\">one</span> game with each judge. As a result of a particular game, you can divide the uncertainty of $$$i$$$-th judge by any natural divisor of $$$a_i$$$ which is at most $$$k$$$. If GCD of all indicators is equal to $$$1$$$, you will enter to the professional layer and become a judge.</p><p>Also, you want to minimize the total amount of spent time. So, if you play with $$$x$$$ judges with total experience $$$y$$$ you will spend $$$x \\cdot y$$$ seconds.</p><p>Print minimal time to enter to the professional layer or $$$-1$$$ if it's impossible.</p>",
    "inputSpecification": "<p>There are two numbers in the first line $$$n$$$ and $$$k$$$ ($$$1 \\leq n \\leq 10^6$$$, $$$1 \\leq k \\leq 10^{12}$$$) \u2014 the number of judges and your skill in Cardbluff.</p><p>The second line contains $$$n$$$ integers, where $$$i$$$-th number $$$a_i$$$ ($$$1 \\leq a_i \\leq 10^{12}$$$) \u2014 the uncertainty of $$$i$$$-th judge</p><p>The third line contains $$$n$$$ integers in the same format ($$$1 \\leq e_i \\leq 10^9$$$), $$$e_i$$$ \u2014 the experience of $$$i$$$-th judge.</p>",
    "outputSpecification": "<p>Print the single integer \u2014 minimal number of seconds to pass exam, or $$$-1$$$ if it's impossible</p>",
    "samples": [
        {
            "input": "\n3 6\n30 30 30\n100 4 5\n",
            "output": "\n18\n"
        },
        {
            "input": "\n1 1000000\n1\n100\n",
            "output": "\n0\n"
        },
        {
            "input": "\n3 5\n7 7 7\n1 1 1\n",
            "output": "\n-1\n"
        }
    ],
    "note": null,
    "contestId": 1103,
    "index": "D",
    "name": "Professional layer",
    "type": "PROGRAMMING",
    "tags": [
        "bitmasks",
        "dp"
    ],
    "solvedCount": 402
}