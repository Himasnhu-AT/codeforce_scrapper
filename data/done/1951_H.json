{
    "title": "H. Thanos Snap",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 512.0,
        "unit": "megabytes"
    },
    "statement": "<div class=\"epigraph\"><div class=\"epigraph-text\"><a href=\"https://youtu.be/3WWwuA6twKI\"><span class=\"tex-font-style-it\">Piotr Rubik - Psalm dla Ciebie</span></a></div><div class=\"epigraph-source\">\u0d9e</div></div><p>There is an array $$$a$$$ of size $$$2^k$$$ for some positive integer $$$k$$$, which is initially a permutation of values from $$$1$$$ to $$$2^k$$$. Alice and Bob play the following game on the array $$$a$$$. First, a value $$$t$$$ between $$$1$$$ and $$$k$$$ is shown to both Alice and Bob. Then, for exactly $$$t$$$ turns, the following happens: </p><ul> <li> Alice either does nothing, or chooses two distinct elements of the array $$$a$$$ and swaps them. </li><li> Bob chooses either the left half or the right half of the array $$$a$$$ and erases it. </li></ul><p>The score of the game is defined as the maximum value in $$$a$$$ after all $$$t$$$ turns have been played. Alice wants to maximize this score, while Bob wants to minimize it.</p><p>You need to output $$$k$$$ numbers: the score of the game if both Alice and Bob play optimally for $$$t$$$ from $$$1$$$ to $$$k$$$.</p>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains an integer $$$k$$$ ($$$1 \\le k \\le 20$$$)\u00a0\u2014 the parameter of the size of $$$a$$$.</p><p>The second line of each test case contains $$$2^k$$$ integers $$$a_1, a_2, \\ldots, a_{2^k}$$$ ($$$1 \\le a_i \\le 2^k$$$, $$$a_i$$$'s are pairwise distinct)\u00a0\u2014 the given array $$$a$$$.</p><p>It is guaranteed that the sum of $$$2^k$$$ over all test cases does not exceed $$$2^{20}$$$.</p>",
    "outputSpecification": "<p>For each test case, print $$$k$$$ numbers, where the $$$i$$$-th number is the score of the game if both Alice and Bob play optimally for $$$t = i$$$.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 3 2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5 1 6 4 7 2 8 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">10 15 6 12 1 3 4 9 13 5 7 16 14 11 2 8</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">32 2 5 23 19 17 31 7 29 3 4 16 13 9 30 24 14 1 8 20 6 15 26 18 10 27 22 12 25 21 28 11</div>",
            "output": "\n1\n3 1\n7 5 1\n15 13 9 1\n31 28 25 17 1\n"
        }
    ],
    "note": "<p>In the third test case, for $$$t = 2$$$, the game could have proceeded as follows: </p><ul> <li> Initially, $$$a = [5, 1, 6, 4, 7, 2, 8, 3]$$$. </li><li> Alice swaps $$$a_6$$$ and $$$a_8$$$, $$$a$$$ becomes $$$[5, 1, 6, 4, 7, 3, 8, 2]$$$. </li><li> Bob erases the right half of the array, $$$a$$$ becomes $$$[5, 1, 6, 4]$$$. </li><li> Alice does nothing, $$$a$$$ remains as $$$[5, 1, 6, 4]$$$. </li><li> Bob erases the right half of the array, $$$a$$$ becomes $$$[5, 1]$$$. </li><li> The game ends with a score of $$$5$$$. </li></ul>",
    "contestId": 1951,
    "index": "H",
    "name": "Thanos Snap",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "dp",
        "games",
        "greedy",
        "trees"
    ],
    "solvedCount": 223
}