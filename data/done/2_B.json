{
    "title": "B. The least round way",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 64.0,
        "unit": "megabytes"
    },
    "statement": "<p>There is a square matrix <span class=\"tex-span\"><i>n</i>\u2009\u00d7\u2009<i>n</i></span>, consisting of non-negative integer numbers. You should find such a way on it that </p><ul> <li> starts in the upper left cell of the matrix; </li><li> each following cell is to the right or down from the current cell; </li><li> the way ends in the bottom right cell. </li></ul><p>Moreover, if we multiply together all the numbers along the way, the result should be the least \"round\". In other words, it should end in the least possible number of zeros.</p>",
    "inputSpecification": "<p>The first line contains an integer number <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">2\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20091000</span>), <span class=\"tex-span\"><i>n</i></span> is the size of the matrix. Then follow <span class=\"tex-span\"><i>n</i></span> lines containing the matrix elements (non-negative integer numbers not exceeding <span class=\"tex-span\">10<sup class=\"upper-index\">9</sup></span>).</p>",
    "outputSpecification": "<p>In the first line print the least number of trailing zeros. In the second line print the correspondent way itself.</p>",
    "samples": [
        {
            "input": "3<br/>1 2 3<br/>4 5 6<br/>7 8 9<br/>",
            "output": "0<br/>DDRR<br/>"
        }
    ],
    "note": null,
    "contestId": 2,
    "index": "B",
    "name": "The least round way",
    "type": "PROGRAMMING",
    "tags": [
        "dp",
        "math"
    ],
    "solvedCount": 10461
}