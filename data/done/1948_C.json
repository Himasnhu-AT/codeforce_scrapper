{
    "title": "C. Arrow Path",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>There is a grid, consisting of $$$2$$$ rows and $$$n$$$ columns. The rows are numbered from $$$1$$$ to $$$2$$$ from top to bottom. The columns are numbered from $$$1$$$ to $$$n$$$ from left to right. Each cell of the grid contains an arrow pointing either to the left or to the right. No arrow points outside the grid.</p><p>There is a robot that starts in a cell $$$(1, 1)$$$. Every second, the following two actions happen one after another: </p><ol> <li> Firstly, the robot moves left, right, down or up (<span class=\"tex-font-style-bf\">it can't try to go outside the grid, and can't skip a move</span>); </li><li> then it moves along the arrow that is placed in the current cell (the cell it ends up after its move). </li></ol><p>Your task is to determine whether the robot can reach the cell $$$(2, n)$$$.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of each test case contains a single integer ($$$2 \\le n \\le 2 \\cdot 10^5$$$).</p><p>The second line contains a string consisting of exactly $$$n$$$ characters <span class=\"tex-font-style-tt\">&lt;</span> and/or <span class=\"tex-font-style-tt\">&gt;</span>\u00a0\u2014 the first row of the grid.</p><p>The third line contains a string consisting of exactly $$$n$$$ characters <span class=\"tex-font-style-tt\">&lt;</span> and/or <span class=\"tex-font-style-tt\">&gt;</span>\u00a0\u2014 the second row of the grid.</p><p>Additional constraints on the input: </p><ul> <li> $$$n$$$ is even; </li><li> there are no arrows pointing outside the grid; </li><li> the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$. </li></ul>",
    "outputSpecification": "<p>For each test case, print <span class=\"tex-font-style-tt\">YES</span> if the robot can reach the cell $$$(2, n)$$$; otherwise, print <span class=\"tex-font-style-tt\">NO</span>.</p><p>You can print each letter in any case. For example, <span class=\"tex-font-style-tt\">yes</span>, <span class=\"tex-font-style-tt\">Yes</span>, <span class=\"tex-font-style-tt\">YeS</span> will all be recognized as positive answer.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">&gt;&gt;&lt;&lt;</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">&gt;&gt;&gt;&lt;</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">&gt;&lt;</div><div class=\"test-example-line test-example-line-even test-example-line-2\">&gt;&lt;</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">&gt;&gt;&gt;&lt;</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">&gt;&gt;&lt;&lt;</div><div class=\"test-example-line test-example-line-even test-example-line-4\">6</div><div class=\"test-example-line test-example-line-even test-example-line-4\">&gt;&gt;&lt;&lt;&gt;&lt;</div><div class=\"test-example-line test-example-line-even test-example-line-4\">&gt;&lt;&gt;&gt;&gt;&lt;</div>",
            "output": "\nYES\nYES\nNO\nYES\n"
        }
    ],
    "note": "<p>In the first example, one of the possible paths looks as follows: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3) \\rightarrow (2, 4)$$$.</p><p>In the second example, one of the possible paths looks as follows: $$$(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 2)$$$.</p><p>In the third example, there is no way to reach the cell $$$(2, 4)$$$.</p><p>In the fourth example, one of the possible paths looks as follows: $$$(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 2) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3) \\rightarrow (2, 4) \\rightarrow (2, 5) \\rightarrow (2, 6)$$$.</p>",
    "contestId": 1948,
    "index": "C",
    "name": "Arrow Path",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "constructive algorithms",
        "dfs and similar",
        "dp",
        "graphs",
        "shortest paths"
    ],
    "solvedCount": 15061
}