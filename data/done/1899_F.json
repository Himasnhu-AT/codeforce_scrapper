{
    "title": "F. Alex's whims",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p><span class=\"tex-font-style-it\">Tree</span> is a connected graph without cycles. It can be shown that any tree of $$$n$$$ vertices has exactly $$$n - 1$$$ edges.</p><p><span class=\"tex-font-style-it\">Leaf</span> is a vertex in the tree with exactly one edge connected to it.</p><p><span class=\"tex-font-style-it\">Distance</span> between two vertices $$$u$$$ and $$$v$$$ in a tree is the minimum number of edges that must be passed to come from vertex $$$u$$$ to vertex $$$v$$$.</p><p>Alex's birthday is coming up, and Timofey would like to gift him a tree of $$$n$$$ vertices. However, Alex is a very moody boy. Every day for $$$q$$$ days, he will choose an integer, denoted by the integer chosen on the $$$i$$$-th day by $$$d_i$$$. If on the $$$i$$$-th day there are not two leaves in the tree at a distance <span class=\"tex-font-style-bf\">exactly</span> $$$d_i$$$, Alex will be <span class=\"tex-font-style-it\">disappointed</span>.</p><p>Timofey decides to gift Alex a designer so that he can change his tree as he wants. Timofey knows that Alex is also lazy (a disaster, not a human being), so at the beginning of every day, he can perform <span class=\"tex-font-style-bf\">no more</span> than one operation of the following kind:</p><ul><li> Choose vertices $$$u$$$, $$$v_1$$$, and $$$v_2$$$ such that there is an edge between $$$u$$$ and $$$v_1$$$ and no edge between $$$u$$$ and $$$v_2$$$. Then remove the edge between $$$u$$$ and $$$v_1$$$ and add an edge between $$$u$$$ and $$$v_2$$$. This operation <span class=\"tex-font-style-bf\">cannot</span> be performed if the graph is no longer a tree after it.</li></ul><p>Somehow Timofey managed to find out all the $$$d_i$$$. After that, he had another brilliant idea\u00a0\u2014 just in case, make an instruction manual for the set, one that Alex wouldn't be <span class=\"tex-font-style-it\">disappointed</span>.</p><p>Timofey is not as lazy as Alex, but when he saw the integer $$$n$$$, he quickly lost the desire to develop the instruction and the original tree, so he assigned this task to you. It can be shown that a tree and a sequence of operations satisfying the described conditions always exist.</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/d63d1917bd547055b308a1fb223d05c5d304257d.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p>Here is an example of an operation where vertices were selected: $$$u$$$\u00a0\u2014 $$$6$$$, $$$v_1$$$\u00a0\u2014 $$$1$$$, $$$v_2$$$\u00a0\u2014 $$$4$$$.</p>",
    "inputSpecification": "<p>The first line contains the integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of each test case contains two integers $$$n$$$ ($$$3 \\leq n \\leq 500$$$) and $$$q$$$ ($$$1 \\leq q \\leq 500$$$)\u00a0\u2014 the number of nodes in the tree and the number of days, respectively.</p><p>The $$$i$$$th of the following $$$q$$$ lines contains the integer $$$d_i$$$ ($$$2 \\leq d_i \\leq n - 1$$$).</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$500$$$. The same is guaranteed for $$$q$$$.</p><p>It can be shown that a tree and a sequence of operations satisfying the described conditions always exist.</p>",
    "outputSpecification": "<p>For each test case, first print an $$$n - 1$$$ string describing the edges of the tree. If you want the tree to have an edge between nodes $$$u$$$ and $$$v$$$, there must be a string $$$v$$$ $$$u$$$ or $$$u$$$ $$$v$$$ among these $$$n - 1$$$ lines.</p><p>In the next $$$q$$$ lines, print three integers each $$$u$$$ $$$v_1$$$ $$$v_2$$$\u00a0\u2014 a description of the operations. If Alex doesn't need to perform an operation the following day, print $$$-1$$$ $$$-1$$$ $$$-1$$$.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 6</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 9</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div>",
            "output": "\n1 2\n2 3\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n1 2\n2 3\n3 4\n4 5\n-1 -1 -1\n4 3 2\n5 4 3\n4 2 5\n4 5 2\n5 3 4\n1 2\n2 3\n3 4\n4 3 2\n4 2 3\n-1 -1 -1\n4 3 2\n-1 -1 -1\n-1 -1 -1\n4 2 3\n4 3 2\n-1 -1 -1\n"
        }
    ],
    "note": null,
    "contestId": 1899,
    "index": "F",
    "name": "Alex's whims",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "graphs",
        "greedy",
        "shortest paths",
        "trees"
    ],
    "solvedCount": 6888
}