{
    "title": "D. Reset K Edges",
    "timeLimit": {
        "value": 4.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a rooted tree, consisting of $$$n$$$ vertices. The vertices are numbered from $$$1$$$ to $$$n$$$, the root is the vertex $$$1$$$.</p><p>You can perform the following operation <span class=\"tex-font-style-bf\">at most</span> $$$k$$$ times: </p><ul> <li> choose an edge $$$(v, u)$$$ of the tree such that $$$v$$$ is a parent of $$$u$$$; </li><li> remove the edge $$$(v, u)$$$; </li><li> add an edge $$$(1, u)$$$ (i.\u2009e. make $$$u$$$ with its subtree a child of the root). </li></ul><p><span class=\"tex-font-style-it\">The height</span> of a tree is the maximum depth of its vertices, and the depth of a vertex is the number of edges on the path from the root to it. For example, the depth of vertex $$$1$$$ is $$$0$$$, since it's the root, and the depth of all its children is $$$1$$$.</p><p>What's the smallest height of the tree that can be achieved?</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of testcases.</p><p>The first line of each testcase contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$; $$$0 \\le k \\le n - 1$$$)\u00a0\u2014 the number of vertices in the tree and the maximum number of operations you can perform.</p><p>The second line contains $$$n-1$$$ integers $$$p_2, p_3, \\dots, p_n$$$ ($$$1 \\le p_i &lt; i$$$)\u00a0\u2014 the parent of the $$$i$$$-th vertex. Vertex $$$1$$$ is the root.</p><p>The sum of $$$n$$$ over all testcases doesn't exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each testcase, print a single integer\u00a0\u2014 the smallest height of the tree that can achieved by performing <span class=\"tex-font-style-bf\">at most</span> $$$k$$$ operations.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 1 2 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 1 2 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">6 0</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2 3 4 5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">6 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 2 3 4 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4 3</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 1 1</div>",
            "output": "\n2\n1\n5\n3\n1\n"
        }
    ],
    "note": null,
    "contestId": 1739,
    "index": "D",
    "name": "Reset K Edges",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "data structures",
        "dfs and similar",
        "graphs",
        "greedy",
        "trees"
    ],
    "solvedCount": 4933
}