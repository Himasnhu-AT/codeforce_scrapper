{
    "title": "D1. Balance (Easy version)",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p><span class=\"tex-font-style-bf\">This is the easy version of the problem. The only difference is that in this version there are no \"remove\" queries.</span></p><p>Initially you have a set containing one element \u2014 $$$0$$$. You need to handle $$$q$$$ queries of the following types:</p><ul><li><span class=\"tex-font-style-tt\">+</span> $$$x$$$ \u2014 add the integer $$$x$$$ to the set. It is guaranteed that this integer is not contained in the set;</li><li> <span class=\"tex-font-style-tt\">?</span> $$$k$$$ \u2014 find the $$$k\\text{-mex}$$$ of the set. </li></ul><p>In our problem, we define the $$$k\\text{-mex}$$$ of a set of integers as the smallest non-negative integer $$$x$$$ that is divisible by $$$k$$$ and which is not contained in the set.</p>",
    "inputSpecification": "<p>The first line contains an integer $$$q$$$ ($$$1 \\leq q \\leq 2 \\cdot 10^5$$$) \u2014 the number of queries.</p><p>The following $$$q$$$ lines describe the queries.</p><p>An addition query of integer $$$x$$$ is given in the format <span class=\"tex-font-style-tt\">+</span> $$$x$$$ ($$$1 \\leq x \\leq 10^{18}$$$). It is guaranteed that $$$x$$$ was not contained in the set.</p><p>A search query of $$$k\\text{-mex}$$$ is given in the format <span class=\"tex-font-style-tt\">?</span> $$$k$$$ ($$$1 \\leq k \\leq 10^{18}$$$).</p><p>It is guaranteed that there will be at least one query of type <span class=\"tex-font-style-tt\">?</span>.</p>",
    "outputSpecification": "<p>For each query of type <span class=\"tex-font-style-tt\">?</span> output a single integer \u2014 the $$$k\\text{-mex}$$$ of the set.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">15</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 1</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 2</div><div class=\"test-example-line test-example-line-even test-example-line-0\">? 1</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 4</div><div class=\"test-example-line test-example-line-even test-example-line-0\">? 2</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 6</div><div class=\"test-example-line test-example-line-even test-example-line-0\">? 3</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 7</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 8</div><div class=\"test-example-line test-example-line-even test-example-line-0\">? 1</div><div class=\"test-example-line test-example-line-even test-example-line-0\">? 2</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 5</div><div class=\"test-example-line test-example-line-even test-example-line-0\">? 1</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 1000000000000000000</div><div class=\"test-example-line test-example-line-even test-example-line-0\">? 1000000000000000000</div>",
            "output": "\n3\n6\n3\n3\n10\n3\n2000000000000000000\n"
        },
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">6</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 100</div><div class=\"test-example-line test-example-line-even test-example-line-0\">? 100</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 200</div><div class=\"test-example-line test-example-line-even test-example-line-0\">? 100</div><div class=\"test-example-line test-example-line-even test-example-line-0\">+ 50</div><div class=\"test-example-line test-example-line-even test-example-line-0\">? 50</div>",
            "output": "\n200\n300\n150\n"
        }
    ],
    "note": "<p>In the first example:</p><p>After the first and second queries, the set will contain elements $$$\\{0, 1, 2\\}$$$. The smallest non-negative number that is divisible by $$$1$$$ and is not contained in the set is $$$3$$$.</p><p>After the fourth query, the set will contain the elements $$$\\{0, 1, 2, 4\\}$$$. The smallest non-negative number that is divisible by $$$2$$$ and is not contained in the set is $$$6$$$.</p><p>In the second example: </p><ul> <li> Initially, the set contains only the element $$$\\{0\\}$$$. </li><li> After adding an integer $$$100$$$ the set contains elements $$$\\{0, 100\\}$$$. </li><li> $$$100\\text{-mex}$$$ of the set is $$$200$$$. </li><li> After adding an integer $$$200$$$ the set contains elements $$$\\{0, 100, 200\\}$$$. </li><li> $$$100\\text{-mex}$$$ of the set is $$$300$$$. </li><li> After adding an integer $$$50$$$ the set contains elements $$$\\{0, 50, 100, 200\\}$$$. </li><li> $$$50\\text{-mex}$$$ of the set is $$$150$$$. </li></ul>",
    "contestId": 1732,
    "index": "D1",
    "name": "Balance (Easy version)",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "data structures",
        "implementation",
        "number theory"
    ],
    "solvedCount": 8371
}