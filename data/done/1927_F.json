{
    "title": "F. Microcycle",
    "timeLimit": {
        "value": 4.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Given an undirected weighted graph with $$$n$$$ vertices and $$$m$$$ edges. There is at most one edge between each pair of vertices in the graph, and the graph does not contain loops (edges from a vertex to itself). The graph is not necessarily connected.</p><p>A cycle in the graph is called simple if it doesn't pass through the same vertex twice and doesn't contain the same edge twice.</p><p>Find any simple cycle in this graph in which the weight of the lightest edge is minimal.</p>",
    "inputSpecification": "<p>The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases. Then follow the descriptions of the test cases.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$3 \\le n \\le m \\le \\min(\\frac{n\\cdot(n - 1)}{2}, 2 \\cdot 10^5)$$$)\u00a0\u2014 the size of the graph and the number of edges.</p><p>The next $$$m$$$ lines of the test case contain three integers $$$u$$$, $$$v$$$, and $$$w$$$ ($$$1 \\le u, v \\le n$$$, $$$u \\ne v$$$, $$$1 \\le w \\le 10^6$$$)\u00a0\u2014 vertices $$$u$$$ and $$$v$$$ are connected by an edge of weight $$$w$$$.</p><p>It is guaranteed that there is at most one edge between each pair of vertices. Note that under the given constraints, there is always at least one simple cycle in the graph.</p><p>It is guaranteed that the sum of the values of $$$m$$$ for all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output a pair of numbers $$$b$$$ and $$$k$$$, where:</p><ul> <li> $$$b$$$\u00a0\u2014 the minimum weight of the edge in the found cycle, </li><li> $$$k$$$\u00a0\u2014 the number of vertices in the found cycle. </li></ul><p>On the next line, output $$$k$$$ numbers from $$$1$$$ to $$$n$$$ \u00a0\u2014 the vertices of the cycle in traversal order.</p><p>Note that the answer always exists, as under the given constraints, there is always at least one simple cycle in the graph.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">6 6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 3 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 5 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5 6 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">6 4 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">6 6</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2 10</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 3 8</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 1 5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 5 100</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 6 40</div><div class=\"test-example-line test-example-line-even test-example-line-2\">6 4 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">6 15</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5 2 8</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">6 1 7</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">6 3 10</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">6 5 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 2 8</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5 3 6</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 6 6</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5 4 5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">6 4 5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 1 7</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 5 5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4 6</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 3 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 3 10</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 4 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3 4 7</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 4 5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 2 2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2 1 10</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3 1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4 2 6</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 4 7</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2 3 3</div>",
            "output": "\n1 3\n1 2 3 \n3 3\n6 4 5 \n1 5\n4 2 1 6 3 \n1 4\n1 4 3 2 \n3 3\n2 3 1 \n"
        }
    ],
    "note": null,
    "contestId": 1927,
    "index": "F",
    "name": "Microcycle",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "dfs and similar",
        "dsu",
        "graphs",
        "greedy",
        "implementation",
        "sortings",
        "trees"
    ],
    "solvedCount": 3928
}