{
    "title": "D. Minimum Triangulation",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a regular polygon with $$$n$$$ vertices labeled from $$$1$$$ to $$$n$$$ in counter-clockwise order. The triangulation of a given polygon is a set of triangles such that each vertex of each triangle is a vertex of the initial polygon, there is no pair of triangles such that their intersection has non-zero area, and the total area of all triangles is equal to the area of the given polygon. The weight of a triangulation is the sum of weigths of triangles it consists of, where the weight of a triagle is denoted as the product of labels of its vertices.</p><p>Calculate the minimum weight among all triangulations of the polygon.</p>",
    "inputSpecification": "<p>The first line contains single integer $$$n$$$ ($$$3 \\le n \\le 500$$$) \u2014 the number of vertices in the regular polygon.</p>",
    "outputSpecification": "<p>Print one integer \u2014 the minimum weight among all triangulations of the given polygon.</p>",
    "samples": [
        {
            "input": "\n3\n",
            "output": "\n6\n"
        },
        {
            "input": "\n4\n",
            "output": "\n18\n"
        }
    ],
    "note": "<p>According to Wiki: polygon triangulation is the decomposition of a polygonal area (simple polygon) $$$P$$$ into a set of triangles, i.\u2009e., finding a set of triangles with pairwise non-intersecting interiors whose union is $$$P$$$.</p><p>In the first example the polygon is a triangle, so we don't need to cut it further, so the answer is $$$1 \\cdot 2 \\cdot 3 = 6$$$.</p><p>In the second example the polygon is a rectangle, so it should be divided into two triangles. It's optimal to cut it using diagonal $$$1-3$$$ so answer is $$$1 \\cdot 2 \\cdot 3 + 1 \\cdot 3 \\cdot 4 = 6 + 12 = 18$$$.</p>",
    "contestId": 1140,
    "index": "D",
    "name": "Minimum Triangulation",
    "type": "PROGRAMMING",
    "tags": [
        "dp",
        "greedy",
        "math"
    ],
    "solvedCount": 12419
}