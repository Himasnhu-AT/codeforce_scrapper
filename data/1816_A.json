{
    "title": "A. Ian Visits Mary",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Ian and Mary are frogs living on lattice points of the Cartesian coordinate plane, with Ian living on $$$(0,0)$$$ and Mary living on $$$(a,b)$$$. </p><p>Ian would like to visit Mary by jumping around the Cartesian coordinate plane. Every second, he jumps from his current position $$$(x_p, y_p)$$$ to another lattice point $$$(x_q, y_q)$$$, such that no lattice point other than $$$(x_p, y_p)$$$ and $$$(x_q, y_q)$$$ lies on the segment between point $$$(x_p, y_p)$$$ and point $$$(x_q, y_q)$$$. </p><p>As Ian wants to meet Mary as soon as possible, he wants to jump towards point $$$(a,b)$$$ using <span class=\"tex-font-style-bf\">at most $$$2$$$ jumps</span>. Unfortunately, Ian is not good at maths. Can you help him?</p><p>A lattice point is defined as a point with both the $$$x$$$-coordinate and $$$y$$$-coordinate being integers.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 500$$$) \u2014 the number of test cases. The description of test cases follows.</p><p>The first and only line of each test case contains two integers $$$a$$$ and $$$b$$$ ($$$1\\le a,b\\le 10^9$$$) \u2014 the coordinates of the lattice point where Mary lives.</p>",
    "outputSpecification": "<p>For each test case, print an integer $$$n$$$ ($$$1 \\le n \\le 2$$$) on the first line, denoting the number of jumps Ian uses in order to meet Mary. Note that you do not need to minimize the number of jumps.</p><p>On the $$$i$$$-th line of the next $$$n$$$ lines, print two integers $$$0 \\le x_i,y_i \\le 10^9$$$ separated by a space, denoting Ian's location $$$(x_i,y_i)$$$ after the $$$i$$$-th jump. $$$x_n = a$$$, $$$y_n = b$$$ must hold.</p><p>Ian's initial location and his locations after each of the $$$n$$$ jumps <span class=\"tex-font-style-bf\">need not</span> be distinct.</p><p>If there are multiple solutions, output any.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">8</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 6</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 1</div><div class=\"test-example-line test-example-line-even test-example-line-6\">7 3</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">2022 2023</div><div class=\"test-example-line test-example-line-even test-example-line-8\">1000000000 1000000000</div>",
            "output": "\n1\n3 4\n2\n3 2\n4 4\n2\n5 3\n3 6\n2\n1 0\n2 2\n1\n1 1\n1\n7 3\n1\n2022 2023\n2\n69420420 469696969\n1000000000 1000000000\n"
        }
    ],
    "note": "<p>In the first test case:</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/0a4b539a785ed84ff303e0ea9a4e01d9b05d01a4.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p>$$$(0,0) \\to (3,4)$$$</p><p>In the second test case:</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/04312929b14fcf0adc7b4523c3f930ef70009e20.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p>$$$(0,0) \\to (3,2) \\to (4,4)$$$</p><p>In the third test case:</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/ec09ec0dff2493e1c62f42643ed926780315f46b.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p>$$$(0,0) \\to (5,3) \\to (3,6)$$$</p>",
    "contestId": 1816,
    "index": "A",
    "name": "Ian Visits Mary",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "geometry",
        "number theory"
    ],
    "solvedCount": 17003
}