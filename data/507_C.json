{
    "title": "C. Guess Your Way Out!",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Amr bought a new video game \"Guess Your Way Out!\". The goal of the game is to find an exit from the maze that looks like a perfect binary tree of height <span class=\"tex-span\"><i>h</i></span>. The player is initially standing at the root of the tree and the exit from the tree is located at some leaf node. </p><p>Let's index all the leaf nodes from the left to the right from 1 to <span class=\"tex-span\">2<sup class=\"upper-index\"><i>h</i></sup></span>. The exit is located at some node <span class=\"tex-span\"><i>n</i></span> where <span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20092<sup class=\"upper-index\"><i>h</i></sup></span>, the player doesn't know where the exit is so he has to guess his way out!</p><p>Amr follows simple algorithm to choose the path. Let's consider infinite command string \"<span class=\"tex-font-style-tt\">LRLRLRLRL...</span>\" (consisting of alternating characters '<span class=\"tex-font-style-tt\">L</span>' and '<span class=\"tex-font-style-tt\">R</span>'). Amr sequentially executes the characters of the string using following rules:</p><ul> <li> Character '<span class=\"tex-font-style-tt\">L</span>' means \"go to the left child of the current node\"; </li><li> Character '<span class=\"tex-font-style-tt\">R</span>' means \"go to the right child of the current node\"; </li><li> If the destination node is already visited, Amr skips current command, otherwise he moves to the destination node; </li><li> If Amr skipped two consecutive commands, he goes back to the parent of the current node before executing next command; </li><li> If he reached a leaf node that is not the exit, he returns to the parent of the current node; </li><li> If he reaches an exit, the game is finished. </li></ul><p>Now Amr wonders, if he follows this algorithm, how many nodes he is going to visit before reaching the exit?</p>",
    "inputSpecification": "<p>Input consists of two integers <span class=\"tex-span\"><i>h</i>,\u2009<i>n</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>h</i>\u2009\u2264\u200950</span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20092<sup class=\"upper-index\"><i>h</i></sup></span>).</p>",
    "outputSpecification": "<p>Output a single integer representing the number of nodes (excluding the exit node) Amr is going to visit before reaching the exit by following this algorithm.</p>",
    "samples": [
        {
            "input": "1 2<br/>",
            "output": "2"
        },
        {
            "input": "2 3<br/>",
            "output": "5"
        },
        {
            "input": "3 6<br/>",
            "output": "10"
        },
        {
            "input": "10 1024<br/>",
            "output": "2046"
        }
    ],
    "note": "<p>A perfect binary tree of height <span class=\"tex-span\"><i>h</i></span> is a binary tree consisting of <span class=\"tex-span\"><i>h</i>\u2009+\u20091</span> levels. Level <span class=\"tex-span\">0</span> consists of a single node called <span class=\"tex-font-style-it\">root</span>, level <span class=\"tex-span\"><i>h</i></span> consists of <span class=\"tex-span\">2<sup class=\"upper-index\"><i>h</i></sup></span> nodes called <span class=\"tex-font-style-it\">leaves</span>. Each node that is not a leaf has exactly two children, <span class=\"tex-font-style-it\">left</span> and <span class=\"tex-font-style-it\">right</span> one. </p><p>Following picture illustrates the sample test number <span class=\"tex-span\">3</span>. Nodes are labeled according to the order of visit.</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/e9d0715dc8cd9b4f6ac7a0fb137563f857660adc.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p>",
    "contestId": 507,
    "index": "C",
    "name": "Guess Your Way Out!",
    "type": "PROGRAMMING",
    "tags": [
        "implementation",
        "math",
        "trees"
    ],
    "solvedCount": 4287
}