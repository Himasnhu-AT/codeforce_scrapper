{
    "title": "B. Make Product Equal One",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given $$$n$$$ numbers $$$a_1, a_2, \\dots, a_n$$$. With a cost of one coin you can perform the following operation:</p><p>Choose one of these numbers and add or subtract $$$1$$$ from it.</p><p>In particular, we can apply this operation to the same number several times.</p><p>We want to make the product of all these numbers equal to $$$1$$$, in other words, we want $$$a_1 \\cdot a_2$$$ $$$\\dots$$$ $$$\\cdot a_n = 1$$$. </p><p>For example, for $$$n = 3$$$ and numbers $$$[1, -3, 0]$$$ we can make product equal to $$$1$$$ in $$$3$$$ coins: add $$$1$$$ to second element, add $$$1$$$ to second element again, subtract $$$1$$$ from third element, so that array becomes $$$[1, -1, -1]$$$. And $$$1\\cdot (-1) \\cdot (-1) = 1$$$.</p><p>What is the minimum cost we will have to pay to do that?</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$)\u00a0\u2014 the number of numbers.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$-10^9 \\le a_i \\le 10^9$$$)\u00a0\u2014 the numbers.</p>",
    "outputSpecification": "<p>Output a single number\u00a0\u2014 the minimal number of coins you need to pay to make the product equal to $$$1$$$.</p>",
    "samples": [
        {
            "input": "\n2\n-1 1\n",
            "output": "\n2"
        },
        {
            "input": "\n4\n0 0 0 0\n",
            "output": "\n4"
        },
        {
            "input": "\n5\n-5 -3 5 3 0\n",
            "output": "\n13"
        }
    ],
    "note": "<p>In the first example, you can change $$$1$$$ to $$$-1$$$ or $$$-1$$$ to $$$1$$$ in $$$2$$$ coins.</p><p>In the second example, you have to apply at least $$$4$$$ operations for the product not to be $$$0$$$.</p><p>In the third example, you can change $$$-5$$$ to $$$-1$$$ in $$$4$$$ coins, $$$-3$$$ to $$$-1$$$ in $$$2$$$ coins, $$$5$$$ to $$$1$$$ in $$$4$$$ coins, $$$3$$$ to $$$1$$$ in $$$2$$$ coins, $$$0$$$ to $$$1$$$ in $$$1$$$ coin.</p>",
    "contestId": 1206,
    "index": "B",
    "name": "Make Product Equal One",
    "type": "PROGRAMMING",
    "tags": [
        "dp",
        "implementation"
    ],
    "solvedCount": 26294
}