{
    "title": "C. First Digit Law",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>In the probability theory the following paradox called Benford's law is known: \"In many lists of random numbers taken from real sources, numbers starting with digit 1 occur much more often than numbers starting with any other digit\" (that's the simplest form of the law).</p><p>Having read about it on Codeforces, the Hedgehog got intrigued by the statement and wishes to thoroughly explore it. He finds the following similar problem interesting in particular: there are <span class=\"tex-span\"><i>N</i></span> random variables, the <span class=\"tex-span\"><i>i</i></span>-th of which can take any integer value from some segment <span class=\"tex-span\">[<i>L</i><sub class=\"lower-index\"><i>i</i></sub>;<i>R</i><sub class=\"lower-index\"><i>i</i></sub>]</span> (all numbers from this segment are equiprobable). It means that the value of the <span class=\"tex-span\"><i>i</i></span>-th quantity can be equal to any integer number from a given interval <span class=\"tex-span\">[<i>L</i><sub class=\"lower-index\"><i>i</i></sub>;<i>R</i><sub class=\"lower-index\"><i>i</i></sub>]</span> with probability <span class=\"tex-span\">1\u2009/\u2009(<i>R</i><sub class=\"lower-index\"><i>i</i></sub>\u2009-\u2009<i>L</i><sub class=\"lower-index\"><i>i</i></sub>\u2009+\u20091)</span>.</p><p>The Hedgehog wants to know the probability of the event that the first digits of at least <span class=\"tex-span\"><i>K</i>%</span> of those values will be equal to one. In other words, let us consider some set of fixed values of these random variables and leave only the first digit (the MSD \u2014 most significant digit) of each value. Then let's count how many times the digit 1 is encountered and if it is encountered in at least <span class=\"tex-span\"><i>K</i></span> per cent of those <span class=\"tex-span\"><i>N</i></span> values, than such set of values will be called a good one. You have to find the probability that a set of values of the given random variables will be a good one.</p>",
    "inputSpecification": "<p>The first line contains number <span class=\"tex-span\"><i>N</i></span> which is the number of random variables (<span class=\"tex-span\">1\u2009\u2264\u2009<i>N</i>\u2009\u2264\u20091000</span>). Then follow <span class=\"tex-span\"><i>N</i></span> lines containing pairs of numbers <span class=\"tex-span\"><i>L</i><sub class=\"lower-index\"><i>i</i></sub>,\u2009<i>R</i><sub class=\"lower-index\"><i>i</i></sub></span>, each of whom is a description of a random variable. It is guaranteed that <span class=\"tex-span\">1\u2009\u2264\u2009<i>L</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>R</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">18</sup></span>.</p><p>The last line contains an integer <span class=\"tex-span\"><i>K</i></span> (<span class=\"tex-span\">0\u2009\u2264\u2009<i>K</i>\u2009\u2264\u2009100</span>).</p><p>All the numbers in the input file are integers.</p><p>Please, do not use <span class=\"tex-font-style-tt\">%lld</span> specificator to read or write 64-bit integers in C++. It is preffered to use <span class=\"tex-font-style-tt\">cin</span> (also you may use <span class=\"tex-font-style-tt\">%I64d</span>).</p>",
    "outputSpecification": "<p>Print the required probability. Print the fractional number with such a precision that the relative or absolute error of the result won't exceed <span class=\"tex-span\">10<sup class=\"upper-index\">\u2009-\u20099</sup></span>.</p>",
    "samples": [
        {
            "input": "1<br/>1 2<br/>50<br/>",
            "output": "0.500000000000000"
        },
        {
            "input": "2<br/>1 2<br/>9 11<br/>50<br/>",
            "output": "0.833333333333333"
        }
    ],
    "note": null,
    "contestId": 54,
    "index": "C",
    "name": "First Digit Law",
    "type": "PROGRAMMING",
    "tags": [
        "dp",
        "math",
        "probabilities"
    ],
    "solvedCount": 1254
}