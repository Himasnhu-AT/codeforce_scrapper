{
    "title": "E. Price Maximization",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>A batch of $$$n$$$ goods ($$$n$$$\u00a0\u2014 an even number) is brought to the store, $$$i$$$-th of which has weight $$$a_i$$$. Before selling the goods, they must be packed into packages. After packing, the following will be done: </p><ul> <li> There will be $$$\\frac{n}{2}$$$ packages, each package contains exactly two goods; </li><li> The weight of the package that contains goods with indices $$$i$$$ and $$$j$$$ ($$$1 \\le i, j \\le n$$$) is $$$a_i + a_j$$$. </li></ul><p>With this, the cost of a package of weight $$$x$$$ is always $$$\\left \\lfloor\\frac{x}{k}\\right\\rfloor$$$ burles (rounded down), where $$$k$$$\u00a0\u2014 a fixed and given value.</p><p>Pack the goods to the packages so that the revenue from their sale is maximized. In other words, make such $$$\\frac{n}{2}$$$ pairs of given goods that the sum of the values $$$\\left \\lfloor\\frac{x_i}{k} \\right \\rfloor$$$, where $$$x_i$$$ is the weight of the package number $$$i$$$ ($$$1 \\le i \\le \\frac{n}{2}$$$), is <span class=\"tex-font-style-bf\">maximal</span>.</p><p>For example, let $$$n = 6, k = 3$$$, weights of goods $$$a = [3, 2, 7, 1, 4, 8]$$$. Let's pack them into the following packages. </p><ul> <li> In the first package we will put the third and sixth goods. Its weight will be $$$a_3 + a_6 = 7 + 8 = 15$$$. The cost of the package will be $$$\\left \\lfloor\\frac{15}{3}\\right\\rfloor = 5$$$ burles. </li><li> In the second package put the first and fifth goods, the weight is $$$a_1 + a_5 = 3 + 4 = 7$$$. The cost of the package is $$$\\left \\lfloor\\frac{7}{3}\\right\\rfloor = 2$$$ burles. </li><li> In the third package put the second and fourth goods, the weight is $$$a_2 + a_4 = 2 + 1 = 3$$$. The cost of the package is $$$\\left \\lfloor\\frac{3}{3}\\right\\rfloor = 1$$$ burle. </li></ul><p>With this packing, the total cost of all packs would be $$$5 + 2 + 1 = 8$$$ burles.</p>",
    "inputSpecification": "<p>The first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014the number of test cases in the test.</p><p>The descriptions of the test cases follow.</p><p>The first line of each test case contains two integers $$$n$$$ ($$$2 \\le n \\le 2\\cdot10^5$$$) and $$$k$$$ ($$$1 \\le k \\le 1000$$$). The number $$$n$$$\u00a0\u2014 is even.</p><p>The second line of each test case contains exactly $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le 10^9$$$).</p><p>It is guaranteed that the sum of $$$n$$$ over all the test cases does not exceed $$$2\\cdot10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, print on a separate line a single number \u2014 the maximum possible total cost of all the packages.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">6 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 2 7 1 4 8</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 1 5 6</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 12</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">0 0 0 0</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">6 10</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2 0 0 5 9 4</div><div class=\"test-example-line test-example-line-even test-example-line-6\">6 5</div><div class=\"test-example-line test-example-line-even test-example-line-6\">5 3 8 6 3 2</div>",
            "output": "\n8\n4\n0\n2\n1\n5\n"
        }
    ],
    "note": "<p>The first test case is analyzed in the statement.</p><p>In the second test case, you can get a total value equal to $$$4$$$ if you put the first and second goods in the first package and the third and fourth goods in the second package.</p><p>In the third test case, the cost of each item is $$$0$$$, so the total cost will also be $$$0$$$.</p>",
    "contestId": 1690,
    "index": "E",
    "name": "Price Maximization",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "greedy",
        "math",
        "two pointers"
    ],
    "solvedCount": 14680
}