{
    "title": "C. Move Brackets",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a bracket sequence $$$s$$$ of length $$$n$$$, where $$$n$$$ is even (divisible by two). The string $$$s$$$ consists of $$$\\frac{n}{2}$$$ opening brackets '<span class=\"tex-font-style-tt\">(</span>' and $$$\\frac{n}{2}$$$ closing brackets '<span class=\"tex-font-style-tt\">)</span>'.</p><p>In one move, you can choose <span class=\"tex-font-style-bf\">exactly one bracket</span> and move it to the beginning of the string or to the end of the string (i.e. you choose some index $$$i$$$, remove the $$$i$$$-th character of $$$s$$$ and insert it before or after all remaining characters of $$$s$$$).</p><p>Your task is to find the minimum number of moves required to obtain <span class=\"tex-font-style-bf\">regular bracket sequence</span> from $$$s$$$. It can be proved that the answer always exists under the given constraints.</p><p>Recall what the regular bracket sequence is:</p><ul> <li> \"<span class=\"tex-font-style-tt\">()</span>\" is regular bracket sequence; </li><li> if $$$s$$$ is regular bracket sequence then \"<span class=\"tex-font-style-tt\">(</span>\" + $$$s$$$ + \"<span class=\"tex-font-style-tt\">)</span>\" is regular bracket sequence; </li><li> if $$$s$$$ and $$$t$$$ are regular bracket sequences then $$$s$$$ + $$$t$$$ is regular bracket sequence. </li></ul><p>For example, \"<span class=\"tex-font-style-tt\">()()</span>\", \"<span class=\"tex-font-style-tt\">(())()</span>\", \"<span class=\"tex-font-style-tt\">(())</span>\" and \"<span class=\"tex-font-style-tt\">()</span>\" are regular bracket sequences, but \"<span class=\"tex-font-style-tt\">)(</span>\", \"<span class=\"tex-font-style-tt\">()(</span>\" and \"<span class=\"tex-font-style-tt\">)))</span>\" are not.</p><p>You have to answer $$$t$$$ independent test cases.</p>",
    "inputSpecification": "<p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2000$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The first line of the test case contains one integer $$$n$$$ ($$$2 \\le n \\le 50$$$) \u2014 the length of $$$s$$$. It is guaranteed that $$$n$$$ is even. The second line of the test case containg the string $$$s$$$ consisting of $$$\\frac{n}{2}$$$ opening and $$$\\frac{n}{2}$$$ closing brackets.</p>",
    "outputSpecification": "<p>For each test case, print the answer \u2014 the minimum number of moves required to obtain <span class=\"tex-font-style-bf\">regular bracket sequence</span> from $$$s$$$. It can be proved that the answer always exists under the given constraints.</p>",
    "samples": [
        {
            "input": "\n4\n2\n)(\n4\n()()\n8\n())()()(\n10\n)))((((())\n",
            "output": "\n1\n0\n1\n3\n"
        }
    ],
    "note": "<p>In the first test case of the example, it is sufficient to move the first bracket to the end of the string.</p><p>In the third test case of the example, it is sufficient to move the last bracket to the beginning of the string.</p><p>In the fourth test case of the example, we can choose last three openning brackets, move them to the beginning of the string and obtain \"<span class=\"tex-font-style-tt\">((()))(())</span>\".</p>",
    "contestId": 1374,
    "index": "C",
    "name": "Move Brackets",
    "type": "PROGRAMMING",
    "tags": [
        "greedy",
        "strings"
    ],
    "solvedCount": 44045
}