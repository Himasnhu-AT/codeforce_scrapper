{
    "title": "B. Equalize by Divide",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given an array $$$a_1, a_2, \\ldots, a_n$$$ of positive integers.</p><p>You can make this operation multiple (possibly zero) times:</p><ul> <li> Choose two indices $$$i$$$, $$$j$$$ ($$$1 \\leq i, j \\leq n$$$, $$$i \\neq j$$$). </li><li> Assign $$$a_i := \\lceil \\frac{a_i}{a_j} \\rceil$$$. Here $$$\\lceil x \\rceil$$$ denotes $$$x$$$ rounded up to the smallest integer $$$\\geq x$$$. </li></ul><p>Is it possible to make all array elements equal by some sequence of operations (possibly empty)? If yes, print <span class=\"tex-font-style-bf\">any</span> way to do it in at most $$$30n$$$ operations.</p><p>It can be proven, that under the problem constraints, if some way exists to make all elements equal, there exists a way with at most $$$30n$$$ operations.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. Descriptions of test cases follow.</p><p>The first line of each test case description contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$).</p><p>The second line of each test case description contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$).</p><p>It is guaranteed, that the sum of $$$n$$$ for all test cases does not exceed $$$1000$$$.</p>",
    "outputSpecification": "<p>For each test case print a single integer $$$q$$$ ($$$-1 \\leq q \\leq 30n$$$). If $$$q=-1$$$, there is no solution, otherwise $$$q$$$ is equal to the number of operations.</p><p>If $$$q \\geq 0$$$, on the next $$$q$$$ lines print two integers $$$i$$$, $$$j$$$ ($$$1 \\leq i, j \\leq n$$$, $$$i \\neq j$$$) \u2014 descriptions of operations.</p><p>If there are multiple solutions, you can print any.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">100</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">5 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4 3 2</div><div class=\"test-example-line test-example-line-even test-example-line-6\">4</div><div class=\"test-example-line test-example-line-even test-example-line-6\">3 3 4 4</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">2 100</div><div class=\"test-example-line test-example-line-even test-example-line-8\">5</div><div class=\"test-example-line test-example-line-even test-example-line-8\">5 3 6 7 8</div><div class=\"test-example-line test-example-line-odd test-example-line-9\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-9\">3 3 80 3 8 3</div><div class=\"test-example-line test-example-line-even test-example-line-10\">4</div><div class=\"test-example-line test-example-line-even test-example-line-10\">19 40 19 55</div>",
            "output": "\n0\n0\n-1\n0\n2\n1 3\n2 1\n4\n3 1\n4 2\n1 3\n2 4\n6\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n8\n5 2\n4 2\n3 2\n1 3\n1 3\n2 1\n4 1\n5 1\n4\n5 1\n3 1\n3 1\n3 1\n9\n4 2\n2 1\n1 2\n1 2\n3 2\n3 2\n1 4\n2 4\n3 4\n"
        }
    ],
    "note": "<p>In the first and second, fourth test cases all numbers are equal, so it is possible to do nothing.</p><p>In the third test case, it is impossible to make all numbers equal.</p><p>In the fifth test case: $$$[\\color{red}{4}, 3, \\color{blue}{2}] \\to [\\color{blue}{2}, \\color{red}{3}, 2] \\to [2, 2, 2]$$$.</p><p>In the sixth test case: $$$[\\color{blue}{3}, 3, \\color{red}{4}, 4] \\to [3, \\color{blue}{3}, 2, \\color{red}{4}] \\to [\\color{red}{3}, 3, \\color{blue}{2}, 2] \\to [2, \\color{red}{3}, 2, \\color{blue}{2}] \\to [2, 2, 2, 2]$$$.</p><p>Here the red numbers are $$$i$$$ indices (that will be assigned), blue numbers are $$$j$$$ indices.</p>",
    "contestId": 1799,
    "index": "B",
    "name": "Equalize by Divide",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "solvedCount": 10924
}