{
    "title": "D. Invertible Bracket Sequences",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters '<span class=\"tex-font-style-tt\">1</span>' and '<span class=\"tex-font-style-tt\">+</span>' between the original characters of the sequence. For example:</p><ul> <li> bracket sequences \"<span class=\"tex-font-style-tt\">()()</span>\" and \"<span class=\"tex-font-style-tt\">(())</span>\" are regular (the resulting expressions are: \"<span class=\"tex-font-style-tt\">(1)+(1)</span>\" and \"<span class=\"tex-font-style-tt\">((1+1)+1)</span>\"); </li><li> bracket sequences \"<span class=\"tex-font-style-tt\">)(</span>\", \"<span class=\"tex-font-style-tt\">(</span>\" and \"<span class=\"tex-font-style-tt\">)</span>\" are not. </li></ul><p>Let's define the <span class=\"tex-font-style-it\">inverse</span> of the bracket sequence as follows: replace all brackets '<span class=\"tex-font-style-tt\">(</span>' with '<span class=\"tex-font-style-tt\">)</span>', and vice versa (all brackets '<span class=\"tex-font-style-tt\">)</span>' with '<span class=\"tex-font-style-tt\">(</span>'). For example, strings \"<span class=\"tex-font-style-tt\">()((</span>\" and \"<span class=\"tex-font-style-tt\">)())</span>\" are inverses of each other.</p><p>You are given a regular bracket sequence $$$s$$$. Calculate the number of pairs of integers $$$(l,r)$$$ ($$$1 \\le l \\le r \\le |s|$$$) such that if you replace the substring of $$$s$$$ from the $$$l$$$-th character to the $$$r$$$-th character (inclusive) with its inverse, $$$s$$$ will still be a regular bracket sequence.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases.</p><p>The only line of each test case contains a non-empty regular bracket sequence; it consists only of characters '<span class=\"tex-font-style-tt\">(</span>' and/or '<span class=\"tex-font-style-tt\">)</span>'.</p><p>Additional constraint on the input: the total length of the regular bracket sequences over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, print a single integer\u00a0\u2014 the number of pairs $$$(l,r)$$$ meeting the conditions from the statement.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">(())</div><div class=\"test-example-line test-example-line-even test-example-line-2\">()</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">()()()</div><div class=\"test-example-line test-example-line-even test-example-line-4\">(()())(())</div>",
            "output": "\n1\n0\n3\n13\n"
        }
    ],
    "note": "<p>In the first example, there is only one pair: </p><ul> <li> $$$(2, 3)$$$: <span class=\"tex-font-style-tt\">(())</span> $$$\\rightarrow$$$ <span class=\"tex-font-style-tt\">()()</span>. </li></ul><p>In the second example, there are no pairs.</p><p>In the third example, there are three pairs: </p><ul> <li> $$$(2, 3)$$$: <span class=\"tex-font-style-tt\">()()()</span> $$$\\rightarrow$$$ <span class=\"tex-font-style-tt\">(())()</span>; </li><li> $$$(4, 5)$$$: <span class=\"tex-font-style-tt\">()()()</span> $$$\\rightarrow$$$ <span class=\"tex-font-style-tt\">()(())</span>; </li><li> $$$(2, 5)$$$: <span class=\"tex-font-style-tt\">()()()</span> $$$\\rightarrow$$$ <span class=\"tex-font-style-tt\">(()())</span>; </li></ul>",
    "contestId": 1976,
    "index": "D",
    "name": "Invertible Bracket Sequences",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "combinatorics",
        "data structures",
        "divide and conquer",
        "implementation",
        "two pointers"
    ],
    "solvedCount": 3077
}