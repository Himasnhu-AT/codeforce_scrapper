{
    "title": "C. Doremy's City Construction",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Doremy's new city is under construction! The city can be regarded as a simple undirected graph with $$$n$$$ vertices. The $$$i$$$-th vertex has altitude $$$a_i$$$. Now Doremy is deciding which pairs of vertices should be connected with edges.</p><p>Due to economic reasons, there should be no self-loops or multiple edges in the graph.</p><p>Due to safety reasons, there should not be <span class=\"tex-font-style-bf\">pairwise distinct</span> vertices $$$u$$$, $$$v$$$, and $$$w$$$ such that $$$a_u \\leq a_v \\leq a_w$$$ and the edges $$$(u,v)$$$ and $$$(v,w)$$$ exist.</p><p>Under these constraints, Doremy would like to know the maximum possible number of edges in the graph. Can you help her?</p><p>Note that the constructed graph is allowed to be disconnected.</p>",
    "inputSpecification": "<p>The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1\\le t\\le 10^4$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 2\\cdot 10^5$$$)\u00a0\u2014 the number of vertices.</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1\\le a_i\\le 10^6$$$)\u00a0\u2014 the altitudes of each vertex.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output the maximum possible number of edges in the graph.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 2 3 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">6</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 2 3 1 5 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">12</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">7 2 4 9 1 4 6 3 7 4 2 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1000000 1000000 1000000 1000000</div>",
            "output": "\n3\n9\n35\n2\n"
        }
    ],
    "note": "<p>In the first test case, there can only be at most $$$3$$$ edges in the graph. A possible construction is to connect $$$(1,3)$$$, $$$(2,3)$$$, $$$(3,4)$$$. In the picture below the red number above node $$$i$$$ is $$$a_i$$$.</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/1418c24979440d1a012429347170871195054446.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p>The following list shows all such $$$u$$$, $$$v$$$, $$$w$$$ that the edges $$$(u,v)$$$ and $$$(v,w)$$$ exist.</p><ul> <li> $$$u=1$$$, $$$v=3$$$, $$$w=2$$$; </li><li> $$$u=1$$$, $$$v=3$$$, $$$w=4$$$; </li><li> $$$u=2$$$, $$$v=3$$$, $$$w=1$$$; </li><li> $$$u=2$$$, $$$v=3$$$, $$$w=4$$$; </li><li> $$$u=4$$$, $$$v=3$$$, $$$w=1$$$; </li><li> $$$u=4$$$, $$$v=3$$$, $$$w=2$$$. </li></ul><p>Another possible construction is to connect $$$(1,4)$$$, $$$(2,4)$$$, $$$(3,4)$$$.</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/115580187374dcfe66c47f2d96ac1755b4df4d3d.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p>An unacceptable construction is to connect $$$(1,3)$$$, $$$(2,3)$$$, $$$(2,4)$$$, $$$(3,4)$$$. Because when $$$u=4$$$, $$$v=2$$$, $$$w=3$$$, $$$a_u\\le a_v \\le a_w$$$ holds, and the respective edges exist.</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/a030082fa80a298932acf8c816dcb70e2a123219.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p>",
    "contestId": 1764,
    "index": "C",
    "name": "Doremy's City Construction",
    "type": "PROGRAMMING",
    "tags": [
        "graphs",
        "greedy"
    ],
    "solvedCount": 9177
}