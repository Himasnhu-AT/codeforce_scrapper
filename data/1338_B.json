{
    "title": "B. Edge Weight Assignment",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You have unweighted tree of $$$n$$$ vertices. You have to assign a <span class=\"tex-font-style-bf\">positive</span> weight to each edge so that the following condition would hold:</p><ul> <li> For every two different leaves $$$v_{1}$$$ and $$$v_{2}$$$ of this tree, <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\">bitwise XOR</a> of weights of all edges on the simple path between $$$v_{1}$$$ and $$$v_{2}$$$ has to be equal to $$$0$$$. </li></ul><p>Note that you can put <span class=\"tex-font-style-bf\">very large</span> positive integers (like $$$10^{(10^{10})}$$$).</p><p>It's guaranteed that such assignment always exists under given constraints. Now let's define $$$f$$$ as <span class=\"tex-font-style-bf\">the number of distinct weights</span> in assignment.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/822324016e7a6837336849481ecbe0190b03dfa3.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> In this example, assignment is valid, because bitwise XOR of all edge weights between every pair of leaves is $$$0$$$. $$$f$$$ value is $$$2$$$ here, because there are $$$2$$$ distinct edge weights($$$4$$$ and $$$5$$$).<p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/82d52d5070be134d11729e65fab0a8709aae6b3f.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> In this example, assignment is invalid, because bitwise XOR of all edge weights between vertex $$$1$$$ and vertex $$$6$$$ ($$$3, 4, 5, 4$$$) is not $$$0$$$. </p></center><p>What are the minimum and the maximum possible values of $$$f$$$ for the given tree? Find and print both.</p>",
    "inputSpecification": "<p>The first line contains integer $$$n$$$ ($$$3 \\le n \\le 10^{5}$$$)\u00a0\u2014 the number of vertices in given tree.</p><p>The $$$i$$$-th of the next $$$n-1$$$ lines contains two integers $$$a_{i}$$$ and $$$b_{i}$$$ ($$$1 \\le a_{i} \\lt b_{i} \\le n$$$)\u00a0\u2014 it means there is an edge between $$$a_{i}$$$ and $$$b_{i}$$$. It is guaranteed that given graph forms tree of $$$n$$$ vertices.</p>",
    "outputSpecification": "<p>Print two integers\u00a0\u2014 the minimum and maximum possible value of $$$f$$$ can be made from valid assignment of given tree. Note that it's always possible to make an assignment under given constraints.</p>",
    "samples": [
        {
            "input": "\n6\n1 3\n2 3\n3 4\n4 5\n5 6\n",
            "output": "\n1 4\n"
        },
        {
            "input": "\n6\n1 3\n2 3\n3 4\n4 5\n4 6\n",
            "output": "\n3 3\n"
        },
        {
            "input": "\n7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 7\n",
            "output": "\n1 6\n"
        }
    ],
    "note": "<p>In the first example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum. </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/e7bf97f0144ccdc05c3ef43ccaa89a3d0c9ce1dc.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>In the second example, possible assignments for each minimum and maximum are described in picture below. The $$$f$$$ value of valid assignment of this tree is always $$$3$$$. </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/f98bbf02e8b21aed9fd5a82be44c2dcd71808c3c.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>In the third example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum. </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/0a99edbccedea10ea506d2c7bd3d027a4bdf17ce.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center>",
    "contestId": 1338,
    "index": "B",
    "name": "Edge Weight Assignment",
    "type": "PROGRAMMING",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "dfs and similar",
        "greedy",
        "math",
        "trees"
    ],
    "solvedCount": 8158
}