{
    "title": "B. Neutral Tonality",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 512.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given an array $$$a$$$ consisting of $$$n$$$ integers, as well as an array $$$b$$$ consisting of $$$m$$$ integers.</p><p>Let $$$\\text{LIS}(c)$$$ denote the length of the <a href=\"https://en.wikipedia.org/wiki/Longest_increasing_subsequence\">longest increasing subsequence</a> of array $$$c$$$. For example, $$$\\text{LIS}([2, \\underline{1}, 1, \\underline{3}])$$$ = $$$2$$$, $$$\\text{LIS}([\\underline{1}, \\underline{7}, \\underline{9}])$$$ = $$$3$$$, $$$\\text{LIS}([3, \\underline{1}, \\underline{2}, \\underline{4}])$$$ = $$$3$$$.</p><p>You need to insert the numbers $$$b_1, b_2, \\ldots, b_m$$$ into the array $$$a$$$, at any positions, in any order. Let the resulting array be $$$c_1, c_2, \\ldots, c_{n+m}$$$. You need to choose the positions for insertion in order to <span class=\"tex-font-style-bf\">minimize</span> $$$\\text{LIS}(c)$$$.</p><p>Formally, you need to find an array $$$c_1, c_2, \\ldots, c_{n+m}$$$ that simultaneously satisfies the following conditions:</p><ul><li> The array $$$a_1, a_2, \\ldots, a_n$$$ is a subsequence of the array $$$c_1, c_2, \\ldots, c_{n+m}$$$.</li><li> The array $$$c_1, c_2, \\ldots, c_{n+m}$$$ consists of the numbers $$$a_1, a_2, \\ldots, a_n, b_1, b_2, \\ldots, b_m$$$, possibly rearranged.</li><li> The value of $$$\\text{LIS}(c)$$$ is the <span class=\"tex-font-style-bf\">minimum</span> possible among all suitable arrays $$$c$$$.</li></ul>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line contains a single integer $$$t$$$ $$$(1 \\leq t \\leq 10^4)$$$\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains two integers $$$n, m$$$ $$$(1 \\leq n \\leq 2 \\cdot 10^5, 1 \\leq m \\leq 2 \\cdot 10^5)$$$\u00a0\u2014 the length of array $$$a$$$ and the length of array $$$b$$$.</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ $$$(1 \\leq a_i \\leq 10^9)$$$\u00a0\u2014 the elements of the array $$$a$$$.</p><p>The third line of each test case contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ $$$(1 \\leq b_i \\leq 10^9)$$$\u00a0\u2014 the elements of the array $$$b$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$, and the sum of $$$m$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output $$$n + m$$$ numbers\u00a0\u2014 the elements of the final array $$$c_1, c_2, \\ldots, c_{n+m}$$$, obtained after the insertion, such that the value of $$$\\text{LIS}(c)$$$ is minimized. If there are several answers, you can output any of them.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">6 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 7 2 4 5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 4 1 2 7</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 9</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2 3 4 5 6 7 8 9</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 3 5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">10 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 9 2 3 8 1 4 7 2 9</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">7 8 5 4 6</div><div class=\"test-example-line test-example-line-even test-example-line-6\">2 1</div><div class=\"test-example-line test-example-line-even test-example-line-6\">2 2</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">6 1</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">1 1 1 1 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">777</div>",
            "output": "\n6 5 4\n1 1 7 7 2 2 4 4 5 5\n9 8 7 7 6 5 4 3 2 1\n1 3 5 2 4\n1 9 2 3 8 8 1 4 4 7 7 2 9 6 5\n2 2 1\n777 1 1 1 1 1 1\n"
        }
    ],
    "note": "<p>In the first test case, $$$\\text{LIS}(a) = \\text{LIS}([6, 4]) = 1$$$. We can insert the number $$$5$$$ between $$$6$$$ and $$$4$$$, then $$$\\text{LIS}(c) = \\text{LIS}([6, 5, 4]) = 1$$$.</p><p>In the second test case, $$$\\text{LIS}([\\underline{1}, 7, \\underline{2}, \\underline{4}, \\underline{5}])$$$ = $$$4$$$. After the insertion, $$$c = [1, 1, 7, 7, 2, 2, 4, 4, 5, 5]$$$. It is easy to see that $$$\\text{LIS}(c) = 4$$$. It can be shown that it is impossible to achieve $$$\\text{LIS}(c)$$$ less than $$$4$$$.</p>",
    "contestId": 1893,
    "index": "B",
    "name": "Neutral Tonality",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "solvedCount": 8238
}