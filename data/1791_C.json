{
    "title": "C. Prepend and Append",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Timur initially had a binary string$$$^{\\dagger}$$$ $$$s$$$ (possibly of length $$$0$$$). He performed the following operation several (possibly zero) times: </p><ul> <li> Add $$$\\texttt{0}$$$ to one end of the string and $$$\\texttt{1}$$$ to the other end of the string. For example, starting from the string $$$\\texttt{1011}$$$, you can obtain either $$$\\color{red}{\\texttt{0}}\\texttt{1011}\\color{red}{\\texttt{1}}$$$ or $$$\\color{red}{\\texttt{1}}\\texttt{1011}\\color{red}{\\texttt{0}}$$$. </li></ul> You are given Timur's final string. What is the length of the <span class=\"tex-font-style-bf\">shortest</span> possible string he could have started with?<p>$$$^{\\dagger}$$$ A binary string is a string (possibly the empty string) whose characters are either $$$\\texttt{0}$$$ or $$$\\texttt{1}$$$.</p>",
    "inputSpecification": "<p>The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$)\u00a0\u2014 the number of testcases.</p><p>The first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2000$$$)\u00a0\u2014 the length of Timur's final string.</p><p>The second line of each test case contains a string $$$s$$$ of length $$$n$$$ consisting of characters $$$\\texttt{0}$$$ or $$$\\texttt{1}$$$, denoting the final string.</p>",
    "outputSpecification": "<p>For each test case, output a single nonnegative integer\u00a0\u2014 the shortest possible length of Timur's original string. Note that Timur's original string could have been empty, in which case you should output $$$0$$$.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">9</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">100</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">0111</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">10101</div><div class=\"test-example-line test-example-line-even test-example-line-4\">6</div><div class=\"test-example-line test-example-line-even test-example-line-4\">101010</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1010110</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">10</div><div class=\"test-example-line test-example-line-even test-example-line-8\">2</div><div class=\"test-example-line test-example-line-even test-example-line-8\">11</div><div class=\"test-example-line test-example-line-odd test-example-line-9\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-9\">1011011010</div>",
            "output": "\n1\n2\n5\n0\n3\n1\n0\n2\n4\n"
        }
    ],
    "note": "<p>In the first test case, the shortest possible string Timur started with is $$$\\texttt{0}$$$, and he performed the following operation: $$$\\texttt{0} \\to \\color{red}{\\texttt{1}}\\texttt{0}\\color{red}{\\texttt{0}}$$$.</p><p>In the second test case, the shortest possible string Timur started with is $$$\\texttt{11}$$$, and he performed the following operation: $$$\\texttt{11} \\to \\color{red}{\\texttt{0}}\\texttt{11}\\color{red}{\\texttt{1}}$$$.</p><p>In the third test case, the shortest possible string Timur started with is $$$\\texttt{10101}$$$, and he didn't perform any operations.</p><p>In the fourth test case, the shortest possible string Timur started with is the empty string (which we denote by $$$\\varepsilon$$$), and he performed the following operations: $$$\\varepsilon \\to \\color{red}{\\texttt{1}}\\texttt{}\\color{red}{\\texttt{0}} \\to \\color{red}{\\texttt{0}}\\texttt{10}\\color{red}{\\texttt{1}} \\to \\color{red}{\\texttt{1}}\\texttt{0101}\\color{red}{\\texttt{0}}$$$.</p><p>In the fifth test case, the shortest possible string Timur started with is $$$\\texttt{101}$$$, and he performed the following operations: $$$\\texttt{101} \\to \\color{red}{\\texttt{0}}\\texttt{101}\\color{red}{\\texttt{1}} \\to \\color{red}{\\texttt{1}}\\texttt{01011}\\color{red}{\\texttt{0}}$$$.</p>",
    "contestId": 1791,
    "index": "C",
    "name": "Prepend and Append",
    "type": "PROGRAMMING",
    "tags": [
        "implementation",
        "two pointers"
    ],
    "solvedCount": 41549
}