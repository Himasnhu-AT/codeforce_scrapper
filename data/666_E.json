{
    "title": "E. Forensic Examination",
    "timeLimit": {
        "value": 6.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 768.0,
        "unit": "megabytes"
    },
    "statement": "<p>The country of Reberland is the archenemy of Berland. Recently the authorities of Berland arrested a Reberlandian spy who tried to bring the leaflets intended for agitational propaganda to Berland illegally . The most leaflets contain substrings of the Absolutely Inadmissible Swearword and maybe even the whole word.</p><p>Berland legal system uses the difficult algorithm in order to determine the guilt of the spy. The main part of this algorithm is the following procedure.</p><p>All the <span class=\"tex-span\"><i>m</i></span> leaflets that are brought by the spy are numbered from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>m</i></span>. After that it's needed to get the answer to <span class=\"tex-span\"><i>q</i></span> queries of the following kind: \"<span class=\"tex-font-style-it\">In which leaflet in the segment of numbers <span class=\"tex-span\">[<i>l</i>,\u2009<i>r</i>]</span> the substring of the Absolutely Inadmissible Swearword <span class=\"tex-span\">[<i>p</i><sub class=\"lower-index\"><i>l</i></sub>,\u2009<i>p</i><sub class=\"lower-index\"><i>r</i></sub>]</span> occurs more often?</span>\".</p><p>The expert wants you to automate that procedure because this time texts of leaflets are too long. Help him!</p>",
    "inputSpecification": "<p>The first line contains the string <span class=\"tex-span\"><i>s</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009|<i>s</i>|\u2009\u2264\u20095\u00b710<sup class=\"upper-index\">5</sup></span>) \u2014 the Absolutely Inadmissible Swearword. The string <span class=\"tex-span\"><i>s</i></span> consists of only lowercase English letters.</p><p>The second line contains the only integer <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>m</i>\u2009\u2264\u20095\u00b710<sup class=\"upper-index\">4</sup></span>) \u2014 the number of texts of leaflets for expertise.</p><p>Each of the next <span class=\"tex-span\"><i>m</i></span> lines contains the only string <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub></span> \u2014 the text of the <span class=\"tex-span\"><i>i</i></span>-th leaflet. The sum of lengths of all leaflet texts doesn't exceed <span class=\"tex-span\">5\u00b710<sup class=\"upper-index\">4</sup></span>. The text of the leaflets consists of only lowercase English letters.</p><p>The next line contains integer <span class=\"tex-span\"><i>q</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>q</i>\u2009\u2264\u20095\u00b710<sup class=\"upper-index\">5</sup></span>) \u2014 the number of queries for expertise.</p><p>Finally, each of the last <span class=\"tex-span\"><i>q</i></span> lines contains four integers <span class=\"tex-span\"><i>l</i></span>, <span class=\"tex-span\"><i>r</i></span>, <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>l</i></sub></span>, <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>r</i></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>l</i>\u2009\u2264\u2009<i>r</i>\u2009\u2264\u2009<i>m</i>,\u20091\u2009\u2264\u2009<i>p</i><sub class=\"lower-index\"><i>l</i></sub>\u2009\u2264\u2009<i>p</i><sub class=\"lower-index\"><i>r</i></sub>\u2009\u2264\u2009|<i>s</i>|</span>), where <span class=\"tex-span\">|<i>s</i>|</span> is the length of the Absolutely Inadmissible Swearword.</p>",
    "outputSpecification": "<p>Print <span class=\"tex-span\"><i>q</i></span> lines. The <span class=\"tex-span\"><i>i</i></span>-th of them should contain two integers \u2014 the number of the text with the most occurences and the number of occurences of the substring <span class=\"tex-span\">[<i>p</i><sub class=\"lower-index\"><i>l</i></sub>,\u2009<i>p</i><sub class=\"lower-index\"><i>r</i></sub>]</span> of the string <span class=\"tex-span\"><i>s</i></span>. If there are several text numbers print the smallest one.</p>",
    "samples": [
        {
            "input": "suffixtree<br/>3<br/>suffixtreesareawesome<br/>cartesiantreeisworsethansegmenttree<br/>nyeeheeheee<br/>2<br/>1 2 1 10<br/>1 3 9 10<br/>",
            "output": "1 1<br/>3 4<br/>"
        }
    ],
    "note": null,
    "contestId": 666,
    "index": "E",
    "name": "Forensic Examination",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "string suffix structures"
    ],
    "solvedCount": 1339
}