{
    "title": "A. Array with Odd Sum",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given an array $$$a$$$ consisting of $$$n$$$ integers.</p><p>In one move, you can choose two indices $$$1 \\le i, j \\le n$$$ such that $$$i \\ne j$$$ and set $$$a_i := a_j$$$. You can perform such moves any number of times (possibly, zero). You can choose different indices in different operations. The operation := is the operation of assignment (i.e. you choose $$$i$$$ and $$$j$$$ and replace $$$a_i$$$ with $$$a_j$$$).</p><p>Your task is to say if it is possible to obtain an array with an odd (not divisible by $$$2$$$) sum of elements.</p><p>You have to answer $$$t$$$ independent test cases.</p>",
    "inputSpecification": "<p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2000$$$) \u2014 the number of test cases.</p><p>The next $$$2t$$$ lines describe test cases. The first line of the test case contains one integer $$$n$$$ ($$$1 \\le n \\le 2000$$$) \u2014 the number of elements in $$$a$$$. The second line of the test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 2000$$$), where $$$a_i$$$ is the $$$i$$$-th element of $$$a$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2000$$$ ($$$\\sum n \\le 2000$$$).</p>",
    "outputSpecification": "<p>For each test case, print the answer on it \u2014 \"<span class=\"tex-font-style-tt\">YES</span>\" (without quotes) if it is possible to obtain the array with an odd sum of elements, and \"<span class=\"tex-font-style-tt\">NO</span>\" otherwise.</p>",
    "samples": [
        {
            "input": "\n5\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n",
            "output": "\nYES\nNO\nYES\nNO\nNO\n"
        }
    ],
    "note": null,
    "contestId": 1296,
    "index": "A",
    "name": "Array with Odd Sum",
    "type": "PROGRAMMING",
    "tags": [
        "math"
    ],
    "solvedCount": 40042
}