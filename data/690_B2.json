{
    "title": "B2. Recover Polygon (medium)",
    "timeLimit": {
        "value": 4.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Now that Heidi has made sure her Zombie Contamination level checker works, it's time to strike! This time, the zombie lair is a strictly convex polygon on the lattice. Each vertex of the polygon occupies a point on the lattice. For each cell of the lattice, Heidi knows the level of Zombie Contamination \u2013 the number of corners of the cell that are inside or on the border of the lair.</p><p>Given this information, Heidi wants to know the exact shape of the lair to rain destruction on the zombies. Help her!</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/5f2797151e6d4b15d2fd355edbf492fdc25c67aa.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"378px\"/></p>",
    "inputSpecification": "<p>The input contains multiple test cases.</p><p>The first line of each test case contains one integer <span class=\"tex-span\"><i>N</i></span>, the size of the lattice grid (<span class=\"tex-span\">5\u2009\u2264\u2009<i>N</i>\u2009\u2264\u2009500</span>). The next <span class=\"tex-span\"><i>N</i></span> lines each contain <span class=\"tex-span\"><i>N</i></span> characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4. </p><p>Cells are given in the same order as they are shown in the picture above: rows go in the decreasing value of <span class=\"tex-span\"><i>y</i></span> coordinate, and in one row cells go in the order of increasing <span class=\"tex-span\"><i>x</i></span> coordinate. This means that the first row corresponds to cells with coordinates <span class=\"tex-span\">(1,\u2009<i>N</i>),\u2009...,\u2009(<i>N</i>,\u2009<i>N</i>)</span> and the last row corresponds to cells with coordinates <span class=\"tex-span\">(1,\u20091),\u2009...,\u2009(<i>N</i>,\u20091)</span>.</p><p>The last line of the file contains a zero. This line should not be treated as a test case. The sum of the <span class=\"tex-span\"><i>N</i></span> values for all tests in one file will not exceed <span class=\"tex-span\">5000</span>.</p>",
    "outputSpecification": "<p>For each test case, give the following output:</p><p>The first line of the output should contain one integer <span class=\"tex-span\"><i>V</i></span>, the number of vertices of the polygon that is the secret lair. The next <span class=\"tex-span\"><i>V</i></span> lines each should contain two integers, denoting the vertices of the polygon in the clockwise order, starting from the lexicographically smallest vertex.</p>",
    "samples": [
        {
            "input": "8<br/>00000000<br/>00000110<br/>00012210<br/>01234200<br/>02444200<br/>01223200<br/>00001100<br/>00000000<br/>5<br/>00000<br/>01210<br/>02420<br/>01210<br/>00000<br/>7<br/>0000000<br/>0122100<br/>0134200<br/>0013200<br/>0002200<br/>0001100<br/>0000000<br/>0<br/>",
            "output": "4<br/>2 3<br/>2 4<br/>6 6<br/>5 2<br/>4<br/>2 2<br/>2 3<br/>3 3<br/>3 2<br/>3<br/>2 5<br/>4 5<br/>4 2<br/>"
        }
    ],
    "note": "<p>It is guaranteed that the solution always exists and is unique. It is guaranteed that in the correct solution the coordinates of the polygon vertices are between <span class=\"tex-span\">2</span> and <span class=\"tex-span\"><i>N</i>\u2009-\u20092</span>. A vertex <span class=\"tex-span\">(<i>x</i><sub class=\"lower-index\">1</sub>,\u2009<i>y</i><sub class=\"lower-index\">1</sub>)</span> is lexicographically smaller than vertex <span class=\"tex-span\">(<i>x</i><sub class=\"lower-index\">2</sub>,\u2009<i>y</i><sub class=\"lower-index\">2</sub>)</span> if <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\">1</sub>\u2009&lt;\u2009<i>x</i><sub class=\"lower-index\">2</sub></span> or <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/f45db1409d1cd11215311a368a0683868ef22505.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p>",
    "contestId": 690,
    "index": "B2",
    "name": "Recover Polygon (medium)",
    "type": "PROGRAMMING",
    "tags": [
        "geometry"
    ],
    "solvedCount": 197
}