{
    "title": "G. Alphabetic Tree",
    "timeLimit": {
        "value": 3.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given $$$m$$$ strings and a tree on $$$n$$$ nodes. Each edge has some letter written on it.</p><p>You have to answer $$$q$$$ queries. Each query is described by $$$4$$$ integers $$$u$$$, $$$v$$$, $$$l$$$ and $$$r$$$. The answer to the query is the total number of occurrences of $$$str(u,v)$$$ in strings with indices from $$$l$$$ to $$$r$$$. $$$str(u,v)$$$ is defined as the string that is made by concatenating letters written on the edges on the shortest path from $$$u$$$ to $$$v$$$ (in order that they are traversed).</p>",
    "inputSpecification": "<p>The first line of the input contains three integers $$$n$$$, $$$m$$$ and $$$q$$$ ($$$2 \\le n \\le 10^5$$$, $$$1 \\le m,q \\le 10^5$$$).</p><p>The $$$i$$$-th of the following $$$n-1$$$ lines contains two integers $$$u_i, v_i$$$ and a lowercase Latin letter $$$c_i$$$ ($$$1 \\le u_i, v_i \\le n$$$, $$$u_i \\neq v_i$$$), denoting the edge between nodes $$$u_i, v_i$$$ with a character $$$c_i$$$ on it. </p><p>It's guaranteed that these edges form a tree.</p><p>The following $$$m$$$ lines contain the strings consisting of lowercase Latin letters. The total length of those strings does not exceed $$$10^5$$$.</p><p>Then $$$q$$$ lines follow, each containing four integers $$$u$$$, $$$v$$$, $$$l$$$ and $$$r$$$ ($$$1 \\le u,v \\le n$$$, $$$u \\neq v$$$, $$$1 \\le l \\le r \\le m$$$), denoting the queries. </p>",
    "outputSpecification": "<p>For each query print a single integer \u2014 the answer to the query.</p>",
    "samples": [
        {
            "input": "\n2 5 3\n1 2 a\naab\nabab\naaa\nb\na\n2 1 1 5\n1 2 1 3\n2 1 3 5\n",
            "output": "\n8\n7\n4\n"
        },
        {
            "input": "\n9 5 6\n1 2 a\n2 7 c\n1 3 b\n3 4 b\n4 6 b\n3 5 a\n5 8 b\n5 9 c\nababa\ncabbb\nbac\nbbbac\nabacaba\n2 7 1 4\n2 5 1 5\n6 3 4 4\n6 9 4 5\n5 7 3 5\n5 3 1 5\n",
            "output": "\n3\n4\n2\n1\n1\n10\n"
        }
    ],
    "note": null,
    "contestId": 1608,
    "index": "G",
    "name": "Alphabetic Tree",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "data structures",
        "dfs and similar",
        "hashing",
        "string suffix structures",
        "strings",
        "trees"
    ],
    "solvedCount": 151
}