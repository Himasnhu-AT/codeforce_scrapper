{
    "title": "F. Andrey's Tree",
    "timeLimit": {
        "value": 4.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Master Andrey loves trees$$$^{\\dagger}$$$ very much, so he has a tree consisting of $$$n$$$ vertices.</p><p>But it's not that simple. Master Timofey decided to steal one vertex from the tree. If Timofey stole vertex $$$v$$$ from the tree, then vertex $$$v$$$ and all edges with one end at vertex $$$v$$$ are removed from the tree, while the numbers of other vertices remain unchanged. To prevent Andrey from getting upset, Timofey decided to make the resulting graph a tree again. To do this, he can add edges between any vertices $$$a$$$ and $$$b$$$, but when adding such an edge, he must pay $$$|a - b|$$$ coins to the Master's Assistance Center.</p><p>Note that the resulting tree <span class=\"tex-font-style-bf\">does not contain</span> vertex $$$v$$$.</p><p>Timofey has not yet decided which vertex $$$v$$$ he will remove from the tree, so he wants to know for each vertex $$$1 \\leq v \\leq n$$$, the minimum number of coins needed to be spent to make the graph a tree again after removing vertex $$$v$$$, as well as which edges need to be added.</p><p>$$$^{\\dagger}$$$A tree is an undirected connected graph without cycles.</p>",
    "inputSpecification": "<p>Each test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) \u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$5 \\le n \\le 2\\cdot10^5$$$) \u2014 the number of vertices in Andrey's tree.</p><p>The next $$$n - 1$$$ lines contain a description of the tree's edges. The $$$i$$$-th of these lines contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \\le u_i, v_i \\le n$$$) \u2014 the numbers of vertices connected by the $$$i$$$-th edge.</p><p>It is guaranteed that the given edges form a tree.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output the answer in the following format:</p><p>For each vertex $$$v$$$ (in the order from $$$1$$$ to $$$n$$$), in the first line output two integers $$$w$$$ and $$$m$$$ \u2014 the minimum number of coins that need to be spent to make the graph a tree again after removing vertex $$$v$$$, and the number of added edges.</p><p>Then output $$$m$$$ lines, each containing two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le n, a \\ne v, b \\ne v$$$, $$$a \\ne b$$$) \u2014 the ends of the added edge.</p><p>If there are multiple ways to add edges, you can output any solution with the minimum cost.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 3</div>",
            "output": "\n1 1\n3 4\n\n0 0\n\n1 1\n1 2\n\n2 1\n3 5\n\n0 0\n\n0 0\n\n0 0\n\n1 1\n1 2\n\n1 1\n1 2\n\n1 1\n1 2\n\n3 3\n2 3\n4 5\n3 4\n\n0 0\n\n0 0\n\n0 0\n\n0 0\n\n"
        }
    ],
    "note": "<p>In the first test case:</p><p>Consider the removal of vertex $$$4$$$:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/9af9f3bd91477fd731f4aa715fe753511c288968.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>The optimal solution would be to add an edge from vertex $$$5$$$ to vertex $$$3$$$. Then we will spend $$$|5 - 3| = 2$$$ coins.</p><p>In the third test case:</p><p>Consider the removal of vertex $$$1$$$:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/e99252f9766c11f12763d45d8d2bc6f30d2f2305.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>The optimal solution would be: </p><ul> <li> Add an edge from vertex $$$2$$$ to vertex $$$3$$$, spending $$$|2 - 3| = 1$$$ coin. </li><li> Add an edge from vertex $$$3$$$ to vertex $$$4$$$, spending $$$|3 - 4| = 1$$$ coin. </li><li> Add an edge from vertex $$$4$$$ to vertex $$$5$$$, spending $$$|4 - 5| = 1$$$ coin. </li></ul><p>Then we will spend a total of $$$1 + 1 + 1 = 3$$$ coins.</p><p>Consider the removal of vertex $$$2$$$:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/0c40cbfc84a9ac5f32d218257519f18be9a69893.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>No edges need to be added, as the graph will remain a tree after removing the vertex.</p>",
    "contestId": 1935,
    "index": "F",
    "name": "Andrey's Tree",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "constructive algorithms",
        "data structures",
        "dfs and similar",
        "dsu",
        "greedy",
        "implementation",
        "trees"
    ],
    "solvedCount": 405
}