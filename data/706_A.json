{
    "title": "A. Beru-taxi",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Vasiliy lives at point <span class=\"tex-span\">(<i>a</i>,\u2009<i>b</i>)</span> of the coordinate plane. He is hurrying up to work so he wants to get out of his house as soon as possible. New app suggested <span class=\"tex-span\"><i>n</i></span> available Beru-taxi nearby. The <span class=\"tex-span\"><i>i</i></span>-th taxi is located at point <span class=\"tex-span\">(<i>x</i><sub class=\"lower-index\"><i>i</i></sub>,\u2009<i>y</i><sub class=\"lower-index\"><i>i</i></sub>)</span> and moves with a speed <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\"><i>i</i></sub></span>. </p><p>Consider that each of <span class=\"tex-span\"><i>n</i></span> drivers will move directly to Vasiliy and with a maximum possible speed. Compute the minimum time when Vasiliy will get in any of Beru-taxi cars.</p>",
    "inputSpecification": "<p>The first line of the input contains two integers <span class=\"tex-span\"><i>a</i></span> and <span class=\"tex-span\"><i>b</i></span> (<span class=\"tex-span\">\u2009-\u2009100\u2009\u2264\u2009<i>a</i>,\u2009<i>b</i>\u2009\u2264\u2009100</span>)\u00a0\u2014 coordinates of Vasiliy's home.</p><p>The second line contains a single integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20091000</span>)\u00a0\u2014 the number of available Beru-taxi cars nearby. </p><p>The <span class=\"tex-span\"><i>i</i></span>-th of the following <span class=\"tex-span\"><i>n</i></span> lines contains three integers <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">\u2009-\u2009100\u2009\u2264\u2009<i>x</i><sub class=\"lower-index\"><i>i</i></sub>,\u2009<i>y</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009100</span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>v</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009100</span>)\u00a0\u2014 the coordinates of the <span class=\"tex-span\"><i>i</i></span>-th car and its speed.</p><p>It's allowed that several cars are located at the same point. Also, cars may be located at exactly the same point where Vasiliy lives.</p>",
    "outputSpecification": "<p>Print a single real value\u00a0\u2014 the minimum time Vasiliy needs to get in any of the Beru-taxi cars. You answer will be considered correct if its absolute or relative error does not exceed <span class=\"tex-span\">10<sup class=\"upper-index\">\u2009-\u20096</sup></span>. </p><p>Namely: let's assume that your answer is <span class=\"tex-span\"><i>a</i></span>, and the answer of the jury is <span class=\"tex-span\"><i>b</i></span>. The checker program will consider your answer correct, if <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/c97ba2000ebfad962bff7ffd8d043594f5ae1086.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p>",
    "samples": [
        {
            "input": "0 0<br/>2<br/>2 0 1<br/>0 2 2<br/>",
            "output": "1.00000000000000000000"
        },
        {
            "input": "1 3<br/>3<br/>3 3 2<br/>-2 3 6<br/>-2 7 10<br/>",
            "output": "0.50000000000000000000"
        }
    ],
    "note": "<p>In the first sample, first taxi will get to Vasiliy in time <span class=\"tex-span\">2</span>, and second will do this in time <span class=\"tex-span\">1</span>, therefore <span class=\"tex-span\">1</span> is the answer.</p><p>In the second sample, cars <span class=\"tex-span\">2</span> and <span class=\"tex-span\">3</span> will arrive simultaneously.</p>",
    "contestId": 706,
    "index": "A",
    "name": "Beru-taxi",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "geometry",
        "implementation"
    ],
    "solvedCount": 14317
}