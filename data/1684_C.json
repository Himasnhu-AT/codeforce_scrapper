{
    "title": "C. Column Swapping",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a grid with $$$n$$$ rows and $$$m$$$ columns, where each cell has a positive integer written on it. Let's call a grid <span class=\"tex-font-style-it\">good</span>, if in each row the sequence of numbers is sorted in a non-decreasing order. It means, that for each $$$1 \\le i \\le n$$$ and $$$2 \\le j \\le m$$$ the following holds: $$$a_{i,j} \\ge a_{i, j-1}$$$.</p><p>You have to to do the following operation exactly once: choose two columns with indexes $$$i$$$ and $$$j$$$ (<span class=\"tex-font-style-bf\">not necessarily different</span>), $$$1 \\le i, j \\le m$$$, and swap them.</p><p>You are asked to determine whether it is possible to make the grid good after the swap and, if it is, find the columns that need to be swapped.</p>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 100$$$). Description of the test cases follows.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the number of rows and columns respectively.</p><p>Each of the next $$$n$$$ rows contains $$$m$$$ integers, $$$j$$$-th element of $$$i$$$-th row is $$$a_{i,j}$$$ ($$$1 \\le a_{i,j} \\le 10^9$$$)\u00a0\u2014 the number written in the $$$j$$$-th cell of the $$$i$$$-th row.</p><p>It's guaranteed that the sum of $$$n \\cdot m$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>If after the swap it is impossible to get a good grid, output $$$-1$$$.</p><p>In the other case output $$$2$$$ integers\u00a0\u2014 the indices of the columns that should be swapped to get a good grid.</p><p>If there are multiple solutions, print any.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 1 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">6 2 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">5 4 3</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2</div>",
            "output": "\n1 1\n-1\n1 2\n1 3\n1 1\n"
        }
    ],
    "note": "<p>In the first test case the grid is initially good, so we can, for example, swap the first column with itself.</p><p>In the second test case it is impossible to make the grid good.</p><p>In the third test case it is needed to swap the first and the second column, then the grid becomes good.</p>",
    "contestId": 1684,
    "index": "C",
    "name": "Column Swapping",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "implementation",
        "sortings"
    ],
    "solvedCount": 12100
}