{
    "title": "G. Long Binary String",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>There is a binary string $$$t$$$ of length $$$10^{100}$$$, and initally all of its bits are $$$\\texttt{0}$$$. You are given a binary string $$$s$$$, and perform the following operation some times: </p><ul> <li> Select some substring of $$$t$$$, and replace it with its XOR with $$$s$$$.$$$^\\dagger$$$ </li></ul> After several operations, the string $$$t$$$ has exactly two bits $$$\\texttt{1}$$$; that is, there are exactly two distinct indices $$$p$$$ and $$$q$$$ such that the $$$p$$$-th and $$$q$$$-th bits of $$$t$$$ are $$$\\texttt{1}$$$, and the rest of the bits are $$$\\texttt{0}$$$. <p>Find the lexicographically largest$$$^\\ddagger$$$ string $$$t$$$ satisfying these constraints, or report that no such string exists.</p><p>$$$^\\dagger$$$ Formally, choose an index $$$i$$$ such that $$$0 \\leq i \\leq 10^{100}-|s|$$$. For all $$$1 \\leq j \\leq |s|$$$, if $$$s_j = \\texttt{1}$$$, then toggle $$$t_{i+j}$$$. That is, if $$$t_{i+j}=\\texttt{0}$$$, set $$$t_{i+j}=\\texttt{1}$$$. Otherwise if $$$t_{i+j}=\\texttt{1}$$$, set $$$t_{i+j}=\\texttt{0}$$$.</p><p>$$$^\\ddagger$$$ A binary string $$$a$$$ is lexicographically larger than a binary string $$$b$$$ of the same length if in the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ has a bit $$$\\texttt{1}$$$ and the corresponding bit in $$$b$$$ is $$$\\texttt{0}$$$.</p>",
    "inputSpecification": "<p>The only line of each test contains a single binary string $$$s$$$ ($$$1 \\leq |s| \\leq 35$$$).</p>",
    "outputSpecification": "<p>If no string $$$t$$$ exists as described in the statement, output <span class=\"tex-font-style-tt\">-1</span>. Otherwise, output the integers $$$p$$$ and $$$q$$$ ($$$1 \\leq p &lt; q \\leq 10^{100}$$$) such that the $$$p$$$-th and $$$q$$$-th bits of the lexicographically maximal $$$t$$$ are $$$\\texttt{1}$$$.</p>",
    "samples": [
        {
            "input": "\n1\n",
            "output": "\n1 2\n"
        },
        {
            "input": "\n001\n",
            "output": "\n3 4\n"
        },
        {
            "input": "\n1111\n",
            "output": "\n1 5\n"
        },
        {
            "input": "\n00000\n",
            "output": "\n-1\n"
        },
        {
            "input": "\n00000111110000011111000001111101010\n",
            "output": "\n6 37452687\n"
        }
    ],
    "note": "<p>In the first test, you can perform the following operations. $$$$$$\\texttt{00000}\\ldots \\to \\color{red}{\\texttt{1}}\\texttt{0000}\\ldots \\to \\texttt{1}\\color{red}{\\texttt{1}}\\texttt{000}\\ldots$$$$$$</p><p>In the second test, you can perform the following operations. $$$$$$\\texttt{00000}\\ldots \\to \\color{red}{\\texttt{001}}\\texttt{00}\\ldots \\to \\texttt{0}\\color{red}{\\texttt{011}}\\texttt{0}\\ldots$$$$$$</p><p>In the third test, you can perform the following operations. $$$$$$\\texttt{00000}\\ldots \\to \\color{red}{\\texttt{1111}}\\texttt{0}\\ldots \\to \\texttt{1}\\color{red}{\\texttt{0001}}\\ldots$$$$$$</p><p>It can be proven that these strings $$$t$$$ are the lexicographically largest ones.</p><p>In the fourth test, you can't make a single bit $$$\\texttt{1}$$$, so it is impossible.</p>",
    "contestId": 1698,
    "index": "G",
    "name": "Long Binary String",
    "type": "PROGRAMMING",
    "tags": [
        "bitmasks",
        "math",
        "matrices",
        "meet-in-the-middle",
        "number theory"
    ],
    "solvedCount": 307
}