{
    "title": "F. Minimum Maximum Distance",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You have a tree with $$$n$$$ vertices, some of which are marked. A tree is a connected undirected graph without cycles.</p><p>Let $$$f_i$$$ denote the maximum distance from vertex $$$i$$$ to any of the marked vertices.</p><p>Your task is to find the minimum value of $$$f_i$$$ among all vertices.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/274c072df56daa8245be057f40c9af87463bd559.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>For example, in the tree shown in the example, vertices $$$2$$$, $$$6$$$, and $$$7$$$ are marked. Then the array $$$f(i) = [2, 3, 2, 4, 4, 3, 3]$$$. The minimum $$$f_i$$$ is for vertices $$$1$$$ and $$$3$$$.</p>",
    "inputSpecification": "<p>The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the number of vertices in the tree and the number of marked vertices, respectively.</p><p>The second line of each test case contains $$$k$$$ integers $$$a_i$$$ ($$$1 \\le a_i \\le n, a_{i-1} &lt; a_i$$$)\u00a0\u2014 the indices of the marked vertices.</p><p>The next $$$n - 1$$$ lines contain two integers $$$u_i$$$ and $$$v_i$$$ \u2014 the indices of vertices connected by the $$$i$$$-th edge.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output a single integer \u2014 the minimum value of $$$f_i$$$ among all vertices.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">7 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 6 7</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 7</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2 3 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">5 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4 5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">10 8</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 2 3 4 5 8 9 10</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2 10</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">10 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5 3</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3 1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 7</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">7 4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4 9</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">8 9</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">6 1</div><div class=\"test-example-line test-example-line-even test-example-line-6\">10 9</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1 2 4 5 6 7 8 9 10</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1 3</div><div class=\"test-example-line test-example-line-even test-example-line-6\">3 9</div><div class=\"test-example-line test-example-line-even test-example-line-6\">9 4</div><div class=\"test-example-line test-example-line-even test-example-line-6\">4 10</div><div class=\"test-example-line test-example-line-even test-example-line-6\">10 6</div><div class=\"test-example-line test-example-line-even test-example-line-6\">6 7</div><div class=\"test-example-line test-example-line-even test-example-line-6\">7 2</div><div class=\"test-example-line test-example-line-even test-example-line-6\">2 5</div><div class=\"test-example-line test-example-line-even test-example-line-6\">5 8</div>",
            "output": "\n2\n2\n0\n1\n4\n5\n"
        },
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">6 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 6</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2 5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">7 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 6</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">6 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5 6</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">7 6</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 5</div>",
            "output": "\n0\n2\n0\n"
        }
    ],
    "note": null,
    "contestId": 1881,
    "index": "F",
    "name": "Minimum Maximum Distance",
    "type": "PROGRAMMING",
    "tags": [
        "dfs and similar",
        "dp",
        "graphs",
        "shortest paths",
        "trees"
    ],
    "solvedCount": 6196
}