{
    "title": "A. Dual Trigger",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<div class=\"epigraph\"><div class=\"epigraph-text\"><a href=\"https://youtu.be/kSjj0LlsqnI\"><span class=\"tex-font-style-it\">Ng\u1ecdt - L\u1ea6N CU\u1ed0I (\u0111i b\u00ean em x\u00f3t xa ng\u01b0\u1eddi \u01a1i)</span></a></div><div class=\"epigraph-source\">\u0d9e</div></div><p>There are $$$n$$$ lamps numbered $$$1$$$ to $$$n$$$ lined up in a row, initially turned off. You can perform the following operation any number of times (possibly zero): </p><ul> <li> Choose two <span class=\"tex-font-style-bf\">non-adjacent</span>$$${}^\\dagger$$$ lamps that are currently turned off, then turn them on. </li></ul><p>Determine whether you can reach configuration $$$s$$$, where $$$s_i = 1$$$ means the $$$i$$$-th lamp is turned on, and $$$s_i = 0$$$ otherwise.</p><p>$$${}^\\dagger$$$ Only lamp $$$i$$$ and $$$i + 1$$$ are adjacent for all $$$1 \\le i &lt; n$$$. Note that lamp $$$n$$$ and $$$1$$$ are <span class=\"tex-font-style-bf\">not</span> adjacent when $$$n \\ne 2$$$.</p>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 50$$$)\u00a0\u2014 the number of lamps.</p><p>The second line of each test case contains a binary string $$$s$$$ of size $$$n$$$\u00a0\u2014 the final desired configuration.</p>",
    "outputSpecification": "<p>For each test case, print on one line <span class=\"tex-font-style-tt\">\"YES\"</span> if we can reach the configuration $$$s$$$ via applying the given operation any number of times. Otherwise, print <span class=\"tex-font-style-tt\">\"NO\"</span>.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1101010110</div><div class=\"test-example-line test-example-line-even test-example-line-2\">10</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1001001110</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">000000</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">12</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">111111111111</div>",
            "output": "\nYES\nNO\nYES\nNO\nYES\n"
        }
    ],
    "note": "<p>In the first test case, the sequence of operation could have been as follows (note that initially $$$s$$$ is all zero): $$$\\mathtt{0000000000} \\to \\mathtt{\\color{red}{1}0000000\\color{red}{1}0} \\to \\mathtt{1\\color{red}{1}00000\\color{red}{1}10} \\to \\mathtt{110\\color{red}{1}0\\color{red}{1}0110}$$$.</p><p>In the third test case, we don't have to do any operation.</p><p>In the fourth test case, we cannot do any operation, but we need the first lamp to be on. Therefore, it is impossible to achieve the desired state.</p>",
    "contestId": 1951,
    "index": "A",
    "name": "Dual Trigger",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "solvedCount": 17671
}