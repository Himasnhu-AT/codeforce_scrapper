{
    "title": "E. Gardener and Tree",
    "timeLimit": {
        "value": 4.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>A tree is an undirected connected graph in which there are no cycles. This problem is about non-rooted trees. A leaf of a tree is a vertex that is connected to <span class=\"tex-font-style-bf\">at most one</span> vertex.</p><p>The gardener Vitaly grew a tree from $$$n$$$ vertices. He decided to trim the tree. To do this, he performs a number of operations. In one operation, he removes <span class=\"tex-font-style-bf\">all</span> leaves of the tree.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/d7a2bee4a53f776c10b597d2352894ffe1a232bf.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> <span class=\"tex-font-size-small\">Example of a tree.</span> </center><p>For example, consider the tree shown in the figure above. The figure below shows the result of applying exactly one operation to the tree.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/3273be473b853013611a2076ff1b1271a009b07f.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> <span class=\"tex-font-size-small\">The result of applying the operation \"remove all leaves\" to the tree.</span> </center><p>Note the special cases of the operation:</p><ul> <li> applying an operation to an empty tree (of $$$0$$$ vertices) does not change it; </li><li> applying an operation to a tree of one vertex removes this vertex (this vertex is treated as a leaf); </li><li> applying an operation to a tree of two vertices removes both vertices (both vertices are treated as leaves). </li></ul><p>Vitaly applied $$$k$$$ operations sequentially to the tree. How many vertices remain?</p>",
    "inputSpecification": "<p>The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>Each test case is preceded by an empty line.</p><p>Each test case consists of several lines. The first line of the test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 4 \\cdot 10^5$$$, $$$1 \\le k \\le 2 \\cdot 10^5$$$) \u2014 the number of vertices in the tree and the number of operations, respectively. Then $$$n - 1$$$ lines follow, each of them contains two integers $$$u$$$ and $$$v$$$ ($$$1 \\le u, v \\le n$$$, $$$u \\neq v$$$) which describe a pair of vertices connected by an edge. It is guaranteed that the given graph is a tree and has no loops or multiple edges.</p><p>It is guaranteed that the sum of $$$n$$$ from all test cases does not exceed $$$4 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case output on a separate line a single integer \u2014 the number of vertices that remain in the tree after applying $$$k$$$ operations.</p>",
    "samples": [
        {
            "input": "\n6\n\n14 1\n1 2\n2 3\n2 4\n4 5\n4 6\n2 7\n7 8\n8 9\n8 10\n3 11\n3 12\n1 13\n13 14\n\n2 200000\n1 2\n\n3 2\n1 2\n2 3\n\n5 1\n5 1\n3 2\n2 1\n5 4\n\n6 2\n5 1\n2 5\n5 6\n4 2\n3 4\n\n7 1\n4 3\n5 1\n1 3\n6 1\n1 7\n2 1\n",
            "output": "\n7\n0\n0\n3\n1\n2\n"
        }
    ],
    "note": "<p>The first test case is considered in the statement.</p><p>The second test case contains a tree of two vertices. $$$200000$$$ operations are applied to it. The first one removes all two vertices, the other operations do not change the tree.</p><p>In the third test case, a tree of three vertices is given. As a result of the first operation, only $$$1$$$ vertex remains in it (with the index $$$2$$$), the second operation makes the tree empty.</p>",
    "contestId": 1593,
    "index": "E",
    "name": "Gardener and Tree",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "data structures",
        "dfs and similar",
        "greedy",
        "implementation",
        "trees"
    ],
    "solvedCount": 11848
}