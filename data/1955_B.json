{
    "title": "B. Progressive Square",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>A <span class=\"tex-font-style-it\">progressive square</span> of size $$$n$$$ is an $$$n \\times n$$$ matrix. Maxim chooses three integers $$$a_{1,1}$$$, $$$c$$$, and $$$d$$$ and constructs a <span class=\"tex-font-style-it\">progressive square</span> according to the following rules:</p><p>$$$$$$a_{i+1,j} = a_{i,j} + c$$$$$$</p><p>$$$$$$a_{i,j+1} = a_{i,j} + d$$$$$$</p><p>For example, if $$$n = 3$$$, $$$a_{1,1} = 1$$$, $$$c=2$$$, and $$$d=3$$$, then the <span class=\"tex-font-style-it\">progressive square</span> looks as follows:</p><p>$$$$$$ \\begin{pmatrix} 1 &amp; 4 &amp; 7 \\\\ 3 &amp; 6 &amp; 9 \\\\ 5 &amp; 8 &amp; 11 \\end{pmatrix} $$$$$$</p><p>Last month Maxim constructed a <span class=\"tex-font-style-it\">progressive square</span> and remembered the values of $$$n$$$, $$$c$$$, and $$$d$$$. Recently, he found an array $$$b$$$ of $$$n^2$$$ integers in random order and wants to make sure that these elements are the elements of <span class=\"tex-font-style-bf\">that specific</span> square.</p><p>It can be shown that for any values of $$$n$$$, $$$a_{1,1}$$$, $$$c$$$, and $$$d$$$, there exists exactly one <span class=\"tex-font-style-it\">progressive square</span> that satisfies all the rules.</p>",
    "inputSpecification": "<p>The first line contains an integer $$$t$$$ ($$$1 \\le t \\le {10} ^ 4$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of each test case contains three integers $$$n$$$, $$$c$$$, and $$$d$$$ ($$$2 \\le n \\le 500$$$, $$$1 \\le c, d \\le 10^6$$$)\u00a0\u2014 the size of the square and the values of $$$c$$$ and $$$d$$$ as described in the statement.</p><p>The second line of each test case contains $$$n \\cdot n$$$ integers $$$b_1, b_2, \\dots, b_{n \\cdot n}$$$ ($$$1 \\le b_i \\le 10^9$$$)\u00a0\u2014 the elements found by Maxim.</p><p>It is guaranteed that the sum of $$$n ^ 2$$$ over all test cases does not exceed $$$25 \\cdot {10} ^ 4$$$.</p>",
    "outputSpecification": "<p>For each test case, output \"<span class=\"tex-font-style-tt\">YES</span>\" in a separate line if a <span class=\"tex-font-style-it\">progressive square</span> for the given $$$n$$$, $$$c$$$, and $$$d$$$ can be constructed from the array elements $$$a$$$, otherwise output \"<span class=\"tex-font-style-tt\">NO</span>\".</p><p>You can output each letter in any case (lowercase or uppercase). For example, the strings \"<span class=\"tex-font-style-tt\">yEs</span>\", \"<span class=\"tex-font-style-tt\">yes</span>\", \"<span class=\"tex-font-style-tt\">Yes</span>\", and \"<span class=\"tex-font-style-tt\">YES</span>\" will be accepted as a positive answer.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 2 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 9 6 5 7 1 10 4 8</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 2 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 9 6 5 7 1 11 4 8</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 100 100</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">400 300 400 500</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3 2 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3 9 6 6 5 1 11 4 8</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4 4 4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">15 27 7 19 23 23 11 15 7 3 19 23 11 15 11 15</div>",
            "output": "\nNO\nYES\nYES\nNO\nNO\n"
        }
    ],
    "note": null,
    "contestId": 1955,
    "index": "B",
    "name": "Progressive Square",
    "type": "PROGRAMMING",
    "tags": [
        "constructive algorithms",
        "data structures",
        "implementation",
        "sortings"
    ],
    "solvedCount": 25034
}