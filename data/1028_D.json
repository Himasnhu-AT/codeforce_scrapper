{
    "title": "D. Order book",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Let's consider a simplified version of order book of some stock. The order book is a list of orders (offers) from people that want to buy or sell one unit of the stock, each order is described by <span class=\"tex-font-style-it\">direction</span> (<span class=\"tex-font-style-tt\">BUY</span> or <span class=\"tex-font-style-tt\">SELL</span>) and price.</p><p>At every moment of time, every <span class=\"tex-font-style-tt\">SELL</span> offer has higher price than every <span class=\"tex-font-style-tt\">BUY</span> offer. </p><p><span class=\"tex-font-style-bf\">In this problem no two ever existed orders will have the same price.</span></p><p>The lowest-price <span class=\"tex-font-style-tt\">SELL</span> order and the highest-price <span class=\"tex-font-style-tt\">BUY</span> order are called the <span class=\"tex-font-style-it\">best offers</span>, marked with black frames on the picture below.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/dd49a092b83e391bd82b1c5d38751fa2f8d8fb2f.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> <span class=\"tex-font-size-small\">The presented order book says that someone wants to sell the product at price $$$12$$$ and it's the best <span class=\"tex-font-style-tt\">SELL</span> offer because the other two have higher prices. The best <span class=\"tex-font-style-tt\">BUY</span> offer has price $$$10$$$.</span> </center><p>There are two possible actions in this orderbook: </p><ol><li> Somebody adds a new order of some direction with some price.</li><li> Somebody accepts the best possible <span class=\"tex-font-style-tt\">SELL</span> or <span class=\"tex-font-style-tt\">BUY</span> offer (makes a deal). It's impossible to accept not the best <span class=\"tex-font-style-tt\">SELL</span> or <span class=\"tex-font-style-tt\">BUY</span> offer (to make a deal at worse price). After someone accepts the offer, it is removed from the orderbook forever.</li></ol><p>It is allowed to add new <span class=\"tex-font-style-tt\">BUY</span> order only with prices less than the best <span class=\"tex-font-style-tt\">SELL</span> offer (if you want to buy stock for higher price, then instead of adding an order you should accept the best <span class=\"tex-font-style-tt\">SELL</span> offer). Similarly, one couldn't add a new <span class=\"tex-font-style-tt\">SELL</span> order with price less or equal to the best <span class=\"tex-font-style-tt\">BUY</span> offer. For example, you can't add a new offer \"<span class=\"tex-font-style-tt\">SELL</span> $$$20$$$\" if there is already an offer \"<span class=\"tex-font-style-tt\">BUY</span> $$$20$$$\" or \"<span class=\"tex-font-style-tt\">BUY</span> $$$25$$$\"\u00a0\u2014 in this case you just accept the best <span class=\"tex-font-style-tt\">BUY</span> offer.</p><p>You have a damaged order book log (in the beginning the are no orders in book). Every action has one of the two types:</p><ol><li> \"<span class=\"tex-font-style-tt\">ADD</span> $$$p$$$\" denotes adding a new order with price $$$p$$$ and unknown direction. The order must not contradict with orders still not removed from the order book. </li><li> \"<span class=\"tex-font-style-tt\">ACCEPT</span> $$$p$$$\" denotes accepting an existing best offer with price $$$p$$$ and unknown direction.</li></ol><p>The directions of all actions are lost. Information from the log isn't always enough to determine these directions. Count the number of ways to correctly restore all <span class=\"tex-font-style-tt\">ADD</span> action directions so that all the described conditions are satisfied at any moment. Since the answer could be large, output it modulo $$$10^9 + 7$$$. If it is impossible to correctly restore directions, then output $$$0$$$.</p>",
    "inputSpecification": "<p>The first line contains an integer $$$n$$$ ($$$1 \\le n \\le 363\\,304$$$) \u2014 the number of actions in the log.</p><p>Each of the next $$$n$$$ lines contains a string \"<span class=\"tex-font-style-tt\">ACCEPT</span>\" or \"<span class=\"tex-font-style-tt\">ADD</span>\" and an integer $$$p$$$ ($$$1 \\le p \\le 308\\,983\\,066$$$), describing an action type and price. </p><p>All <span class=\"tex-font-style-tt\">ADD</span> actions have different prices. For <span class=\"tex-font-style-tt\">ACCEPT</span> action it is guaranteed that the order with the same price has already been added but has not been accepted yet.</p>",
    "outputSpecification": "<p>Output the number of ways to restore directions of <span class=\"tex-font-style-tt\">ADD</span> actions modulo $$$10^9 + 7$$$.</p>",
    "samples": [
        {
            "input": "6<br/>ADD 1<br/>ACCEPT 1<br/>ADD 2<br/>ACCEPT 2<br/>ADD 3<br/>ACCEPT 3<br/>",
            "output": "8<br/>"
        },
        {
            "input": "4<br/>ADD 1<br/>ADD 2<br/>ADD 3<br/>ACCEPT 2<br/>",
            "output": "2<br/>"
        },
        {
            "input": "7<br/>ADD 1<br/>ADD 2<br/>ADD 3<br/>ADD 4<br/>ADD 5<br/>ACCEPT 3<br/>ACCEPT 5<br/>",
            "output": "0<br/>"
        }
    ],
    "note": "<p>In the first example each of orders may be <span class=\"tex-font-style-tt\">BUY</span> or <span class=\"tex-font-style-tt\">SELL</span>.</p><p>In the second example the order with price $$$1$$$ has to be <span class=\"tex-font-style-tt\">BUY</span> order, the order with the price $$$3$$$ has to be <span class=\"tex-font-style-tt\">SELL</span> order.</p>",
    "contestId": 1028,
    "index": "D",
    "name": "Order book",
    "type": "PROGRAMMING",
    "tags": [
        "combinatorics",
        "data structures",
        "greedy"
    ],
    "solvedCount": 1716
}