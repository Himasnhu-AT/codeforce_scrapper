{
    "title": "E. Prefix Function Queries",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a string $$$s$$$, consisting of lowercase Latin letters.</p><p>You are asked $$$q$$$ queries about it: given another string $$$t$$$, consisting of lowercase Latin letters, perform the following steps:</p><ol> <li> concatenate $$$s$$$ and $$$t$$$; </li><li> calculate the prefix function of the resulting string $$$s+t$$$; </li><li> print the values of the prefix function on positions $$$|s|+1, |s|+2, \\dots, |s|+|t|$$$ ($$$|s|$$$ and $$$|t|$$$ denote the lengths of strings $$$s$$$ and $$$t$$$, respectively); </li><li> revert the string back to $$$s$$$. </li></ol><p>The prefix function of a string $$$a$$$ is a sequence $$$p_1, p_2, \\dots, p_{|a|}$$$, where $$$p_i$$$ is the maximum value of $$$k$$$ such that $$$k &lt; i$$$ and $$$a[1..k]=a[i-k+1..i]$$$ ($$$a[l..r]$$$ denotes a contiguous substring of a string $$$a$$$ from a position $$$l$$$ to a position $$$r$$$, inclusive). In other words, it's the longest proper prefix of the string $$$a[1..i]$$$ that is equal to its suffix of the same length.</p>",
    "inputSpecification": "<p>The first line contains a non-empty string $$$s$$$ ($$$1 \\le |s| \\le 10^6$$$), consisting of lowercase Latin letters.</p><p>The second line contains a single integer $$$q$$$ ($$$1 \\le q \\le 10^5$$$)\u00a0\u2014 the number of queries.</p><p>Each of the next $$$q$$$ lines contains a query: a non-empty string $$$t$$$ ($$$1 \\le |t| \\le 10$$$), consisting of lowercase Latin letters.</p>",
    "outputSpecification": "<p>For each query, print the values of the prefix function of a string $$$s+t$$$ on positions $$$|s|+1, |s|+2, \\dots, |s|+|t|$$$.</p>",
    "samples": [
        {
            "input": "\naba\n6\ncaba\naba\nbababa\naaaa\nb\nforces\n",
            "output": "\n0 1 2 3 \n1 2 3 \n2 3 4 5 6 7 \n1 1 1 1 \n2 \n0 0 0 0 0 0 \n"
        },
        {
            "input": "\naacba\n4\naaca\ncbbb\naab\nccaca\n",
            "output": "\n2 2 3 1 \n0 0 0 0 \n2 2 0 \n0 0 1 0 1 \n"
        }
    ],
    "note": null,
    "contestId": 1721,
    "index": "E",
    "name": "Prefix Function Queries",
    "type": "PROGRAMMING",
    "tags": [
        "dfs and similar",
        "dp",
        "hashing",
        "string suffix structures",
        "strings",
        "trees"
    ],
    "solvedCount": 1835
}