{
    "title": "A. LCM Challenge",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Some days ago, I learned the concept of LCM (least common multiple). I've played with it for several times and I want to make a big number with it.</p><p>But I also don't want to use many numbers, so I'll choose three positive integers (they don't have to be distinct) which are not greater than <span class=\"tex-span\"><i>n</i></span>. Can you help me to find the maximum possible least common multiple of these three integers?</p>",
    "inputSpecification": "<p>The first line contains an integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u200910<sup class=\"upper-index\">6</sup></span>) \u2014 the <span class=\"tex-span\"><i>n</i></span> mentioned in the statement.</p>",
    "outputSpecification": "<p>Print a single integer \u2014 the maximum possible LCM of three not necessarily distinct positive integers that are not greater than <span class=\"tex-span\"><i>n</i></span>.</p>",
    "samples": [
        {
            "input": "9<br/>",
            "output": "504<br/>"
        },
        {
            "input": "7<br/>",
            "output": "210<br/>"
        }
    ],
    "note": "<p>The least common multiple of some positive integers is the least positive integer which is multiple for each of them.</p><p>The result may become very large, 32-bit integer won't be enough. So using 64-bit integers is recommended.</p><p>For the last example, we can chose numbers <span class=\"tex-span\">7</span>, <span class=\"tex-span\">6</span>, <span class=\"tex-span\">5</span> and the LCM of them is <span class=\"tex-span\">7\u00b76\u00b75\u2009=\u2009210</span>. It is the maximum value we can get.</p>",
    "contestId": 235,
    "index": "A",
    "name": "LCM Challenge",
    "type": "PROGRAMMING",
    "tags": [
        "number theory"
    ],
    "solvedCount": 17004
}