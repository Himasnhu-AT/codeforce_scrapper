{
    "title": "C. Zero Path",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a grid with $$$n$$$ rows and $$$m$$$ columns. We denote the square on the $$$i$$$-th ($$$1\\le i\\le n$$$) row and $$$j$$$-th ($$$1\\le j\\le m$$$) column by $$$(i, j)$$$ and the number there by $$$a_{ij}$$$. All numbers are equal to $$$1$$$ or to $$$-1$$$. </p><p>You start from the square $$$(1, 1)$$$ and can move one square down or one square to the right at a time. In the end, you want to end up at the square $$$(n, m)$$$.</p><p>Is it possible to move in such a way so that the sum of the values written in all the visited cells (including $$$a_{11}$$$ and $$$a_{nm}$$$) is $$$0$$$?</p><center><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/ec89cd08933aec8a8d885927c0806a556ed1f6ed.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></center>",
    "inputSpecification": "<p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$). Description of the test cases follows.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 1000$$$) \u00a0\u2014 the size of the grid.</p><p>Each of the following $$$n$$$ lines contains $$$m$$$ integers. The $$$j$$$-th integer on the $$$i$$$-th line is $$$a_{ij}$$$ ($$$a_{ij} = 1$$$ or $$$-1$$$) \u00a0\u2014 the element in the cell $$$(i, j)$$$.</p><p>It is guaranteed that the sum of $$$n\\cdot m$$$ over all test cases does not exceed $$$10^6$$$.</p>",
    "outputSpecification": "<p>For each test case, print \"YES\" if there exists a path from the top left to the bottom right that adds up to $$$0$$$, and \"NO\" otherwise. You can output each letter in any case.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 -1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 -1 1 -1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3 4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 -1 -1 -1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">-1 1 1 -1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 1 1 -1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 -1 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">-1 1 -1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 -1 1 1</div>",
            "output": "\nNO\nYES\nYES\nYES\nNO\n"
        }
    ],
    "note": "<p>One possible path for the fourth test case is given in the picture in the statement.</p>",
    "contestId": 1695,
    "index": "C",
    "name": "Zero Path",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "graphs",
        "greedy",
        "shortest paths"
    ],
    "solvedCount": 10518
}