{
    "title": "D. Segment Tree",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>As the name of the task implies, you are asked to do some work with segments and trees.</p><p>Recall that a tree is a connected undirected graph such that there is exactly one simple path between every pair of its vertices.</p><p>You are given $$$n$$$ segments $$$[l_1, r_1], [l_2, r_2], \\dots, [l_n, r_n]$$$, $$$l_i &lt; r_i$$$ for every $$$i$$$. It is guaranteed that all segments' endpoints are integers, and all endpoints are unique \u2014 there is no pair of segments such that they start in the same point, end in the same point or one starts in the same point the other one ends.</p><p>Let's generate a graph with $$$n$$$ vertices from these segments. Vertices $$$v$$$ and $$$u$$$ are connected by an edge if and only if segments $$$[l_v, r_v]$$$ and $$$[l_u, r_u]$$$ intersect and neither of it lies fully inside the other one.</p><p>For example, pairs $$$([1, 3], [2, 4])$$$ and $$$([5, 10], [3, 7])$$$ will induce the edges but pairs $$$([1, 2], [3, 4])$$$ and $$$([5, 7], [3, 10])$$$ will not.</p><p>Determine if the resulting graph is a tree or not.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 5 \\cdot 10^5$$$) \u2014 the number of segments.</p><p>The $$$i$$$-th of the next $$$n$$$ lines contain the description of the $$$i$$$-th segment \u2014 two integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\le l_i &lt; r_i \\le 2n$$$).</p><p>It is guaranteed that all segments borders are pairwise distinct. </p>",
    "outputSpecification": "<p>Print \"<span class=\"tex-font-style-tt\">YES</span>\" if the resulting graph is a tree and \"<span class=\"tex-font-style-tt\">NO</span>\" otherwise.</p>",
    "samples": [
        {
            "input": "\n6\n9 12\n2 11\n1 3\n6 10\n5 7\n4 8\n",
            "output": "\nYES\n"
        },
        {
            "input": "\n5\n1 3\n2 4\n5 9\n6 8\n7 10\n",
            "output": "\nNO\n"
        },
        {
            "input": "\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n",
            "output": "\nNO\n"
        }
    ],
    "note": "<p>The graph corresponding to the first example:</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/2d2aa7a63ebeae31d1149ddfab2d05bb06ed07e8.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p>The graph corresponding to the second example:</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/8248c6ced1f83fdef9e4a4875fb02b297d359006.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p>The graph corresponding to the third example:</p><p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/aaa130bc901103f6b135ddb68f60fc1b1c26049d.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p>",
    "contestId": 1278,
    "index": "D",
    "name": "Segment Tree",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "dsu",
        "graphs",
        "trees"
    ],
    "solvedCount": 3786
}