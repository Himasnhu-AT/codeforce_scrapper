{
    "title": "D. Inaccurate Subsequence Search",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>Maxim has an array $$$a$$$ of $$$n$$$ integers and an array $$$b$$$ of $$$m$$$ integers ($$$m \\le n$$$).</p><p>Maxim considers an array $$$c$$$ of length $$$m$$$ to be good if the elements of array $$$c$$$ can be rearranged in such a way that at least $$$k$$$ of them match the elements of array $$$b$$$. </p><p>For example, if $$$b = [1, 2, 3, 4]$$$ and $$$k = 3$$$, then the arrays $$$[4, 1, 2, 3]$$$ and $$$[2, 3, 4, 5]$$$ are good (they can be reordered as follows: $$$[1, 2, 3, 4]$$$ and $$$[5, 2, 3, 4]$$$), while the arrays $$$[3, 4, 5, 6]$$$ and $$$[3, 4, 3, 4]$$$ are not good.</p><p>Maxim wants to choose every subsegment of array $$$a$$$ of length $$$m$$$ as the elements of array $$$c$$$. Help Maxim count how many selected arrays will be good.</p><p>In other words, find the number of positions $$$1 \\le l \\le n - m + 1$$$ such that the elements $$$a_l, a_{l+1}, \\dots, a_{l + m - 1}$$$ form a good array.</p>",
    "inputSpecification": "<p>The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of each test case contains three integers $$$n$$$, $$$m$$$, and $$$k$$$ ($$$1 \\le k \\le m \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the number of elements in arrays $$$a$$$ and $$$b$$$, the required number of matching elements.</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^6$$$)\u00a0\u2014 the elements of array $$$a$$$. Elements of the array $$$a$$$ are not necessarily unique.</p><p>The third line of each test case contains $$$m$$$ integers $$$b_1, b_2, \\dots, b_m$$$ ($$$1 \\le b_i \\le 10^6$$$)\u00a0\u2014 the elements of array $$$b$$$. Elements of the array $$$b$$$ are not necessarily unique.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$. Similarly, it is guaranteed that the sum of $$$m$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output the number of good subsegments of array $$$a$$$ on a separate line.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">7 4 2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 1 2 3 4 5 6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2 3 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">7 4 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 1 2 3 4 5 6</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2 3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">7 4 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 1 2 3 4 5 6</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2 3 4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">11 5 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">9 9 2 2 10 9 7 6 3 6 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">6 9 7 8 10</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4 1 5 6</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">6</div>",
            "output": "\n4\n3\n2\n4\n1\n"
        }
    ],
    "note": "<p>In the first example, all subsegments are good.</p><p>In the second example, good subsegments start at positions $$$1$$$, $$$2$$$, and $$$3$$$.</p><p>In the third example, good subsegments start at positions $$$1$$$ and $$$2$$$.</p>",
    "contestId": 1955,
    "index": "D",
    "name": "Inaccurate Subsequence Search",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "two pointers"
    ],
    "solvedCount": 13559
}