{
    "title": "A. Maximum Cake Tastiness",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>There are $$$n$$$ pieces of cake on a line. The $$$i$$$-th piece of cake has weight $$$a_i$$$ ($$$1 \\leq i \\leq n$$$).</p><p>The tastiness of the cake is the maximum total weight of two adjacent pieces of cake (i.\u00a0e., $$$\\max(a_1+a_2,\\, a_2+a_3,\\, \\ldots,\\, a_{n-1} + a_{n})$$$).</p><p>You want to maximize the tastiness of the cake. You are allowed to do the following operation at most once (doing more operations would ruin the cake): </p><ul> <li> Choose a contiguous subsegment $$$a[l, r]$$$ of pieces of cake ($$$1 \\leq l \\leq r \\leq n$$$), and reverse it. </li></ul><p>The subsegment $$$a[l, r]$$$ of the array $$$a$$$ is the sequence $$$a_l, a_{l+1}, \\dots, a_r$$$.</p><p>If you reverse it, the array will become $$$a_1, a_2, \\dots, a_{l-2}, a_{l-1}, \\underline{a_r}, \\underline{a_{r-1}}, \\underline{\\dots}, \\underline{a_{l+1}}, \\underline{a_l}, a_{r+1}, a_{r+2}, \\dots, a_{n-1}, a_n$$$.</p><p>For example, if the weights are initially $$$[5, 2, 1, 4, 7, 3]$$$, you can reverse the subsegment $$$a[2, 5]$$$, getting $$$[5, \\underline{7}, \\underline{4}, \\underline{1}, \\underline{2}, 3]$$$. The tastiness of the cake is now $$$5 + 7 = 12$$$ (while before the operation the tastiness was $$$4+7=11$$$).</p><p>Find the maximum tastiness of the cake after doing the operation at most once.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 50$$$) \u2014 the number of test cases.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 1000$$$) \u2014 the number of pieces of cake.</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) \u2014 $$$a_i$$$ is the weight of the $$$i$$$-th piece of cake.</p>",
    "outputSpecification": "<p>For each test case, print a single integer: the maximum tastiness of the cake after doing the operation at most once.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5 2 1 4 7 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">32 78 78</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">69 54 91</div><div class=\"test-example-line test-example-line-even test-example-line-4\">8</div><div class=\"test-example-line test-example-line-even test-example-line-4\">999021 999021 999021 999021 999652 999021 999021 999021</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1000000000 1000000000</div>",
            "output": "\n12\n156\n160\n1998673\n2000000000\n"
        }
    ],
    "note": "<p>In the first test case, after reversing the subsegment $$$a[2, 5]$$$, you get a cake with weights $$$[5, \\underline{7}, \\underline{4}, \\underline{1}, \\underline{2}, 3]$$$. The tastiness of the cake is now $$$\\max(5+7, 7+4, 4+1, 1+2, 2+3) = 12$$$. This is the maximum possible tastiness of the cake one can obtain by performing the operation at most once.</p><p>In the second test case, it's optimal not to do any operation. The tastiness is $$$78+78 = 156$$$.</p><p>In the third test case, after reversing the subsegment $$$a[1, 2]$$$, you get a cake with weights $$$[\\underline{54}, \\underline{69}, 91]$$$. The tastiness of the cake is now $$$\\max(54+69, 69+91) = 160$$$. There is no way to make the tastiness of the cake greater than $$$160$$$ by performing at most one operation.</p>",
    "contestId": 1654,
    "index": "A",
    "name": "Maximum Cake Tastiness",
    "type": "PROGRAMMING",
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "sortings"
    ],
    "solvedCount": 18465
}