{
    "title": "C. DZY Loves Fibonacci Numbers",
    "timeLimit": {
        "value": 4.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>In mathematical terms, the sequence <span class=\"tex-span\"><i>F</i><sub class=\"lower-index\"><i>n</i></sub></span> of Fibonacci numbers is defined by the recurrence relation </p><center class=\"tex-equation\"><span class=\"tex-span\"><i>F</i><sub class=\"lower-index\">1</sub>\u2009=\u20091;\u00a0<i>F</i><sub class=\"lower-index\">2</sub>\u2009=\u20091;\u00a0<i>F</i><sub class=\"lower-index\"><i>n</i></sub>\u2009=\u2009<i>F</i><sub class=\"lower-index\"><i>n</i>\u2009-\u20091</sub>\u2009+\u2009<i>F</i><sub class=\"lower-index\"><i>n</i>\u2009-\u20092</sub>\u00a0(<i>n</i>\u2009&gt;\u20092).</span></center><p>DZY loves Fibonacci numbers very much. Today DZY gives you an array consisting of <span class=\"tex-span\"><i>n</i></span> integers: <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span>. Moreover, there are <span class=\"tex-span\"><i>m</i></span> queries, each query has one of the two types:</p><ol> <li> Format of the query \"<span class=\"tex-span\">1 <i>l</i> <i>r</i></span>\". In reply to the query, you need to add <span class=\"tex-span\"><i>F</i><sub class=\"lower-index\"><i>i</i>\u2009-\u2009<i>l</i>\u2009+\u20091</sub></span> to each element <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>, where <span class=\"tex-span\"><i>l</i>\u2009\u2264\u2009<i>i</i>\u2009\u2264\u2009<i>r</i></span>. </li><li> Format of the query \"<span class=\"tex-span\">2 <i>l</i> <i>r</i></span>\". In reply to the query you should output the value of <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/b32147a7ee6ec016b9964a8e2c44d9b0058ec6e8.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> modulo <span class=\"tex-span\">1000000009\u00a0(10<sup class=\"upper-index\">9</sup>\u2009+\u20099)</span>. </li></ol><p>Help DZY reply to all the queries.</p>",
    "inputSpecification": "<p>The first line of the input contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>,\u2009<i>m</i>\u2009\u2264\u2009300000</span>). The second line contains <span class=\"tex-span\"><i>n</i></span> integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>n</i></sub>\u00a0(1\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">9</sup>)</span> \u2014 initial array <span class=\"tex-span\"><i>a</i></span>.</p><p>Then, <span class=\"tex-span\"><i>m</i></span> lines follow. A single line describes a single query in the format given in the statement. It is guaranteed that for each query inequality <span class=\"tex-span\">1\u2009\u2264\u2009<i>l</i>\u2009\u2264\u2009<i>r</i>\u2009\u2264\u2009<i>n</i></span> holds.</p>",
    "outputSpecification": "<p>For each query of the second type, print the value of the sum on a single line.</p>",
    "samples": [
        {
            "input": "4 4<br/>1 2 3 4<br/>1 1 4<br/>2 1 4<br/>1 2 4<br/>2 1 3<br/>",
            "output": "17<br/>12<br/>"
        }
    ],
    "note": "<p>After the first query, <span class=\"tex-span\"><i>a</i>\u2009=\u2009[2,\u20093,\u20095,\u20097]</span>.</p><p>For the second query, <span class=\"tex-span\"><i>sum</i>\u2009=\u20092\u2009+\u20093\u2009+\u20095\u2009+\u20097\u2009=\u200917</span>.</p><p>After the third query, <span class=\"tex-span\"><i>a</i>\u2009=\u2009[2,\u20094,\u20096,\u20099]</span>.</p><p>For the fourth query, <span class=\"tex-span\"><i>sum</i>\u2009=\u20092\u2009+\u20094\u2009+\u20096\u2009=\u200912</span>.</p>",
    "contestId": 446,
    "index": "C",
    "name": "DZY Loves Fibonacci Numbers",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "math",
        "number theory"
    ],
    "solvedCount": 3202
}