{
    "title": "F. New Year and Social Network",
    "timeLimit": {
        "value": 4.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 1024.0,
        "unit": "megabytes"
    },
    "statement": "<p>Donghyun's new social network service (SNS) contains $$$n$$$ users numbered $$$1, 2, \\ldots, n$$$. Internally, their network is a <span class=\"tex-font-style-it\">tree graph</span>, so there are $$$n-1$$$ direct connections between each user. Each user can reach every other users by using some sequence of direct connections. From now on, we will denote this primary network as $$$T_1$$$.</p><p>To prevent a possible server breakdown, Donghyun created a backup network $$$T_2$$$, which also connects the same $$$n$$$ users via a tree graph. If a system breaks down, exactly one edge $$$e \\in T_1$$$ becomes unusable. In this case, Donghyun will protect the edge $$$e$$$ by picking another edge $$$f \\in T_2$$$, and add it to the existing network. This new edge should make the network be connected again. </p><p>Donghyun wants to assign a replacement edge $$$f \\in T_2$$$ for as many edges $$$e \\in T_1$$$ as possible. However, since the backup network $$$T_2$$$ is fragile, $$$f \\in T_2$$$ can be assigned as the replacement edge for at most one edge in $$$T_1$$$. With this restriction, Donghyun wants to protect as many edges in $$$T_1$$$ as possible.</p><p>Formally, let $$$E(T)$$$ be an edge set of the tree $$$T$$$. We consider a bipartite graph with two parts $$$E(T_1)$$$ and $$$E(T_2)$$$. For $$$e \\in E(T_1), f \\in E(T_2)$$$, there is an edge connecting $$$\\{e, f\\}$$$ if and only if graph $$$T_1 - \\{e\\} + \\{f\\}$$$ is a tree. You should find a maximum matching in this bipartite graph.</p>",
    "inputSpecification": "<p>The first line contains an integer $$$n$$$ ($$$2 \\le n \\le 250\\,000$$$), the number of users. </p><p>In the next $$$n-1$$$ lines, two integers $$$a_i$$$, $$$b_i$$$ ($$$1 \\le a_i, b_i \\le n$$$) are given. Those two numbers denote the indices of the vertices connected by the corresponding edge in $$$T_1$$$.</p><p>In the next $$$n-1$$$ lines, two integers $$$c_i$$$, $$$d_i$$$ ($$$1 \\le c_i, d_i \\le n$$$) are given. Those two numbers denote the indices of the vertices connected by the corresponding edge in $$$T_2$$$. </p><p>It is guaranteed that both edge sets form a tree of size $$$n$$$.</p>",
    "outputSpecification": "<p>In the first line, print the number $$$m$$$ ($$$0 \\leq m &lt; n$$$), the maximum number of edges that can be protected.</p><p>In the next $$$m$$$ lines, print four integers $$$a_i, b_i, c_i, d_i$$$. Those four numbers denote that the edge $$$(a_i, b_i)$$$ in $$$T_1$$$ is will be replaced with an edge $$$(c_i, d_i)$$$ in $$$T_2$$$.</p><p>All printed edges should belong to their respective network, and they should link to distinct edges in their respective network. If one removes an edge $$$(a_i, b_i)$$$ from $$$T_1$$$ and adds edge $$$(c_i, d_i)$$$ from $$$T_2$$$, the network should remain connected. The order of printing the edges or the order of vertices in each edge does not matter.</p><p>If there are several solutions, you can print any.</p>",
    "samples": [
        {
            "input": "\n4\n1 2\n2 3\n4 3\n1 3\n2 4\n1 4\n",
            "output": "\n3\n3 2 4 2\n2 1 1 3\n4 3 1 4\n"
        },
        {
            "input": "\n5\n1 2\n2 4\n3 4\n4 5\n1 2\n1 3\n1 4\n1 5\n",
            "output": "\n4\n2 1 1 2\n3 4 1 3\n4 2 1 4\n5 4 1 5\n"
        },
        {
            "input": "\n9\n7 9\n2 8\n2 1\n7 5\n4 7\n2 4\n9 6\n3 9\n1 8\n4 8\n2 9\n9 5\n7 6\n1 3\n4 6\n5 3\n",
            "output": "\n8\n4 2 9 2\n9 7 6 7\n5 7 5 9\n6 9 4 6\n8 2 8 4\n3 9 3 5\n2 1 1 8\n7 4 1 3\n"
        }
    ],
    "note": null,
    "contestId": 1284,
    "index": "F",
    "name": "New Year and Social Network",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "graph matchings",
        "graphs",
        "math",
        "trees"
    ],
    "solvedCount": 315
}