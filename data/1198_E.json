{
    "title": "E. Rectangle Painting 2",
    "timeLimit": {
        "value": 1.0,
        "unit": "second"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>There is a square grid of size $$$n \\times n$$$. Some cells are colored in black, all others are colored in white. In one operation you can select some rectangle and color all its cells in white. It costs $$$\\min(h, w)$$$ to color a rectangle of size $$$h \\times w$$$. You are to make all cells white for minimum total cost.</p><p>The square is large, so we give it to you in a compressed way. The set of black cells is the union of $$$m$$$ rectangles.</p>",
    "inputSpecification": "<p>The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 10^{9}$$$, $$$0 \\le m \\le 50$$$)\u00a0\u2014 the size of the square grid and the number of black rectangles.</p><p>Each of the next $$$m$$$ lines contains 4 integers $$$x_{i1}$$$ $$$y_{i1}$$$ $$$x_{i2}$$$ $$$y_{i2}$$$ ($$$1 \\le x_{i1} \\le x_{i2} \\le n$$$, $$$1 \\le y_{i1} \\le y_{i2} \\le n$$$)\u00a0\u2014 the coordinates of the bottom-left and the top-right corner cells of the $$$i$$$-th black rectangle.</p><p>The rectangles may intersect.</p>",
    "outputSpecification": "<p>Print a single integer\u00a0\u2014 the minimum total cost of painting the whole square in white.</p>",
    "samples": [
        {
            "input": "\n10 2\n4 1 5 10\n1 4 10 5\n",
            "output": "\n4\n"
        },
        {
            "input": "\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n",
            "output": "\n3\n"
        }
    ],
    "note": "<p>The examples and some of optimal solutions are shown on the pictures below.</p><center> <img class=\"tex-graphics\" height=\"227px\" src=\"https://espresso.codeforces.com/01906a3c69ea574f1e01b3db08290097563c1b73.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"340px\"/> </center>",
    "contestId": 1198,
    "index": "E",
    "name": "Rectangle Painting 2",
    "type": "PROGRAMMING",
    "tags": [
        "flows",
        "graph matchings",
        "graphs"
    ],
    "solvedCount": 1157
}