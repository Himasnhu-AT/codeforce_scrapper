{
    "title": "C. Min Max Sort",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a permutation $$$p$$$ of length $$$n$$$ (a permutation of length $$$n$$$ is an array of length $$$n$$$ in which each integer from $$$1$$$ to $$$n$$$ occurs exactly once).</p><p>You can perform the following operation any number of times (possibly zero): </p><ol> <li> choose two different elements $$$x$$$ and $$$y$$$ and erase them from the permutation; </li><li> insert the minimum of $$$x$$$ and $$$y$$$ into the permutation in such a way that it becomes the first element; </li><li> insert the maximum of $$$x$$$ and $$$y$$$ into the permutation in such a way that it becomes the last element. </li></ol><p>For example, if $$$p = [1, 5, 4, 2, 3]$$$ and we want to apply the operation to the elements $$$3$$$ and $$$5$$$, then after the first step of the operation, the permutation becomes $$$p = [1, 4, 2]$$$; and after we insert the elements, it becomes $$$p = [3, 1, 4, 2, 5]$$$.</p><p>Your task is to calculate the minimum number of operations described above to sort the permutation $$$p$$$ in ascending order (i.\u2009e. transform $$$p$$$ so that $$$p_1 &lt; p_2 &lt; \\dots &lt; p_n$$$).</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of the test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the number of elements in the permutation.</p><p>The second line of the test case contains $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$\u00a0\u2014 the given permutation $$$p$$$.</p><p>The sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output a single integer\u00a0\u2014 the minimum number of operations described above to sort the array $$$p$$$ in ascending order.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 5 4 2 3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 1 4 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">6</div><div class=\"test-example-line test-example-line-even test-example-line-4\">5 2 4 1 6 3</div>",
            "output": "\n2\n0\n1\n3\n"
        }
    ],
    "note": "<p>In the first example, you can proceed as follows: </p><ol> <li> in the permutation $$$p = [1, 5, 4, 2, 3]$$$, let's choose the elements $$$4$$$ and $$$2$$$, then, after applying the operation, the permutation becomes $$$p = [2, 1, 5, 3, 4]$$$; </li><li> in the permutation $$$p = [2, 1, 5, 3, 4]$$$, let's choose the elements $$$1$$$ and $$$5$$$, then, after applying operation, the permutation becomes $$$p = [1, 2, 3, 4, 5]$$$. </li></ol>",
    "contestId": 1792,
    "index": "C",
    "name": "Min Max Sort",
    "type": "PROGRAMMING",
    "tags": [
        "binary search",
        "brute force",
        "greedy",
        "math",
        "two pointers"
    ],
    "solvedCount": 13483
}