{
    "title": "E. Yet Another Permutation Constructive",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 512.0,
        "unit": "megabytes"
    },
    "statement": "<p>Suppose you have a permutation $$$p$$$ of $$$n$$$ integers \u2014 an array where each element is an integer from $$$1$$$ to $$$n$$$, and every integer from $$$1$$$ to $$$n$$$ appears exactly once.</p><p>In one operation, you remove <span class=\"tex-font-style-bf\">every</span> element of this permutation which is less than at least one of its neighbors. For example, when you apply the operation to $$$[3, 1, 2, 5, 4]$$$, you get $$$[3, 5]$$$. If you apply an operation again, you get $$$[5]$$$.</p><p>It's easy to see that after applying a finite number of operations, you get an array consisting of a single integer $$$n$$$.</p><p>You are given two integers $$$n$$$ and $$$k$$$. Find a permutation of $$$n$$$ integers such that it becomes an array consisting of a single element $$$n$$$ after exactly $$$k$$$ operations (and not earlier).</p>",
    "inputSpecification": "<p>The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 2000$$$) \u2014 the number of test cases.</p><p>Each test case consists of one line containing two integers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 100$$$; $$$1 \\le k \\le n - 1$$$).</p>",
    "outputSpecification": "<p>For each test case, print the answer as follows:</p><ul> <li> if a permutation of size $$$n$$$ which becomes an array consisting of a single element $$$n$$$ after exactly $$$k$$$ operations does not exist, print $$$-1$$$; </li><li> otherwise, print $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ \u2014 the requested permutation. If there are multiple such permutations, print any of them. </li></ul>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3 2</div>",
            "output": "\n3 1 2 5 4\n-1\n1 2\n2 1 3\n"
        }
    ],
    "note": null,
    "contestId": 1958,
    "index": "E",
    "name": "Yet Another Permutation Constructive",
    "type": "PROGRAMMING",
    "tags": [
        "*special",
        "constructive algorithms"
    ],
    "solvedCount": 215
}