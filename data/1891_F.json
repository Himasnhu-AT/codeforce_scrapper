{
    "title": "F. A Growing Tree",
    "timeLimit": {
        "value": 2.0,
        "unit": "seconds"
    },
    "memoryLimit": {
        "value": 256.0,
        "unit": "megabytes"
    },
    "statement": "<p>You are given a rooted tree with the root at vertex $$$1$$$, initially consisting of a single vertex. Each vertex has a numerical value, initially set to $$$0$$$. There are also $$$q$$$ queries of two types: </p><ul> <li> The first type: add a child vertex with the number $$$sz + 1$$$ to vertex $$$v$$$, where $$$sz$$$ is the current size of the tree. The numerical value of the new vertex will be $$$0$$$. </li><li> The second type: add $$$x$$$ to the numerical values of all vertices in the subtree of vertex $$$v$$$. </li></ul><p>After all queries, output the numerical value of all of the vertices in the final tree.</p>",
    "inputSpecification": "<p>The first line contains a single integer $$$T$$$ ($$$1 \\leq T \\leq 10^4$$$) \u2014 the number of test cases. The descriptions of the test cases follow.</p><p>The first line of each test case contains a single integer $$$q$$$ ($$$1 \\leq q \\leq 5 \\cdot 10^5$$$) \u2014 the number of queries.</p><p>The following $$$q$$$ lines can fall into two cases: </p><ul> <li> The first type of query: The $$$i$$$-th line contains two integers $$$t_i$$$ ($$$t_i = 1$$$), $$$v_i$$$. You need to add a child with the number $$$sz + 1$$$ to vertex $$$v_i$$$, where $$$sz$$$ is the current size of the tree. It is guaranteed that $$$1 \\leq v_i \\leq sz$$$. </li><li> The second type of query: The $$$i$$$-th line contains three integers $$$t_i$$$ ($$$t_i = 2$$$), $$$v_i$$$, $$$x_i$$$ ($$$-10^9 \\leq x_i \\leq 10^9$$$). You need to add $$$x_i$$$ to all numerical values of vertices in the subtree of $$$v_i$$$. It is guaranteed that $$$1 \\leq v_i \\leq sz$$$, where $$$sz$$$ is the current size of the tree. </li></ul><p>It is guaranteed that the sum of $$$q$$$ across all test cases does not exceed $$$5 \\cdot 10^5$$$.</p>",
    "outputSpecification": "<p>For each test case, output the numerical value of each vertex of the final tree after all queries have been performed.</p>",
    "samples": [
        {
            "input": "\n<div class=\"test-example-line test-example-line-even test-example-line-0\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">9</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 2 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 3 2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 1 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 3 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">5</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 1 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 1 -1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 1 1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 2 10</div>",
            "output": "\n7 5 8 6 2 \n1 0 1 \n4 14 4 \n"
        }
    ],
    "note": "<p>In the first case, the final tree with the assigned numerical values will look like this: </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/6af1300cf0e12d6182adf4c26675cc3fc2d1566d.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> <span class=\"tex-font-size-small\">The final tree with the assigned numerical values</span> </center>",
    "contestId": 1891,
    "index": "F",
    "name": "A Growing Tree",
    "type": "PROGRAMMING",
    "tags": [
        "data structures",
        "dfs and similar",
        "trees"
    ],
    "solvedCount": 3456
}